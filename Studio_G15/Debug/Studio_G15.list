
Studio_G15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f04  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080080dc  080080dc  000090dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800811c  0800811c  0000a238  2**0
                  CONTENTS
  4 .ARM          00000008  0800811c  0800811c  0000911c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008124  08008124  0000a238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008124  08008124  00009124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008128  08008128  00009128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  0800812c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db0  20000238  08008364  0000a238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000fe8  08008364  0000afe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015eb7  00000000  00000000  0000a268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002920  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00022a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df6  00000000  00000000  00023c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c6b  00000000  00000000  000249fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015130  00000000  00000000  0004b669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe04c  00000000  00000000  00060799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e7e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce0  00000000  00000000  0015e828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00163508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000238 	.word	0x20000238
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080080c4 	.word	0x080080c4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000023c 	.word	0x2000023c
 8000214:	080080c4 	.word	0x080080c4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <modbus_1t5_Timeout+0x3c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000d00:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <modbus_1t5_Timeout+0x3c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <modbus_1t5_Timeout+0x3c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <modbus_1t5_Timeout+0x3c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f042 0201 	orr.w	r2, r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000254 	.word	0x20000254

08000d34 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <modbus_3t5_Timeout+0x1c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2201      	movs	r2, #1
 8000d42:	755a      	strb	r2, [r3, #21]

}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	20000254 	.word	0x20000254

08000d54 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f006 f84f 	bl	8006e00 <HAL_UART_GetError>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b20      	cmp	r3, #32
 8000d66:	d101      	bne.n	8000d6c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000d68:	f7ff ffc4 	bl	8000cf4 <modbus_1t5_Timeout>

	}
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000d7e:	4a25      	ldr	r2, [pc, #148]	@ (8000e14 <Modbus_init+0xa0>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000d84:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <Modbus_init+0xa0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <Modbus_init+0xa4>)
 8000d92:	210e      	movs	r1, #14
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 fa43 	bl	8005220 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	2110      	movs	r1, #16
 8000da0:	4618      	mov	r0, r3
 8000da2:	f005 ffd7 	bl	8006d54 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 ffee 	bl	8006d8c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4a19      	ldr	r2, [pc, #100]	@ (8000e1c <Modbus_init+0xa8>)
 8000db6:	2104      	movs	r1, #4
 8000db8:	4618      	mov	r0, r3
 8000dba:	f005 f9ed 	bl	8006198 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <Modbus_init+0xa0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <Modbus_init+0xa0>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <Modbus_init+0xa0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000dd0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f005 fbdd 	bl	800659c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <Modbus_init+0xa0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d10c      	bne.n	8000e0c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <Modbus_init+0xa0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fb83 	bl	8004504 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <Modbus_init+0xa0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 fcca 	bl	80047a0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000254 	.word	0x20000254
 8000e18:	08000d35 	.word	0x08000d35
 8000e1c:	08000d55 	.word	0x08000d55

08000e20 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000e2c:	23ff      	movs	r3, #255	@ 0xff
 8000e2e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000e30:	23ff      	movs	r3, #255	@ 0xff
 8000e32:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000e34:	e013      	b.n	8000e5e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	781a      	ldrb	r2, [r3, #0]
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	4053      	eors	r3, r2
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000e46:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <CRC16+0x64>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	4053      	eors	r3, r2
 8000e52:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000e54:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <CRC16+0x68>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000e5e:	883b      	ldrh	r3, [r7, #0]
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	803a      	strh	r2, [r7, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e6      	bne.n	8000e36 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	021b      	lsls	r3, r3, #8
 8000e6c:	b21a      	sxth	r2, r3
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	b29b      	uxth	r3, r3
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	20000100 	.word	0x20000100
 8000e88:	20000000 	.word	0x20000000

08000e8c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000e92:	4b7e      	ldr	r3, [pc, #504]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	7ddb      	ldrb	r3, [r3, #23]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d80a      	bhi.n	8000eb4 <Modbus_Protocal_Worker+0x28>
 8000e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea4 <Modbus_Protocal_Worker+0x18>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000ebf 	.word	0x08000ebf
 8000ea8:	08001053 	.word	0x08001053
 8000eac:	08000f4b 	.word	0x08000f4b
 8000eb0:	08000f8f 	.word	0x08000f8f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000eb4:	4b75      	ldr	r3, [pc, #468]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	75da      	strb	r2, [r3, #23]
		break;
 8000ebc:	e0e1      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000ebe:	4b73      	ldr	r3, [pc, #460]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8000eca:	4b70      	ldr	r3, [pc, #448]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8000ed2:	f000 f9cd 	bl	8001270 <Modbus_Emission>
 8000ed6:	e018      	b.n	8000f0a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8000ed8:	4b6c      	ldr	r3, [pc, #432]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8000ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d00b      	beq.n	8000f0a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000ef2:	4b66      	ldr	r3, [pc, #408]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000efa:	4b64      	ldr	r3, [pc, #400]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2200      	movs	r2, #0
 8000f00:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000f02:	4b62      	ldr	r3, [pc, #392]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2203      	movs	r2, #3
 8000f08:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000f0a:	4b60      	ldr	r3, [pc, #384]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f14:	2b20      	cmp	r3, #32
 8000f16:	f040 80ad 	bne.w	8001074 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000f1a:	4b5c      	ldr	r3, [pc, #368]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000f24:	4b59      	ldr	r3, [pc, #356]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000f2a:	4b58      	ldr	r3, [pc, #352]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4b57      	ldr	r3, [pc, #348]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000f36:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f42:	4619      	mov	r1, r3
 8000f44:	f005 fb2a 	bl	800659c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8000f48:	e094      	b.n	8001074 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000f4a:	4b50      	ldr	r3, [pc, #320]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	7d1b      	ldrb	r3, [r3, #20]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 8091 	beq.w	8001078 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000f56:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	22fe      	movs	r2, #254	@ 0xfe
 8000f5c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8000f68:	4b48      	ldr	r3, [pc, #288]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8000f78:	4b44      	ldr	r3, [pc, #272]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000f7c:	1a8a      	subs	r2, r1, r2
 8000f7e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8000f80:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000f84:	4b41      	ldr	r3, [pc, #260]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2204      	movs	r2, #4
 8000f8a:	75da      	strb	r2, [r3, #23]
		}
		break;
 8000f8c:	e074      	b.n	8001078 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8000f96:	f113 0f02 	cmn.w	r3, #2
 8000f9a:	d150      	bne.n	800103e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000fa4:	4b39      	ldr	r3, [pc, #228]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000fac:	4b37      	ldr	r3, [pc, #220]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000fb4:	3b02      	subs	r3, #2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4610      	mov	r0, r2
 8000fba:	f7ff ff31 	bl	8000e20 <CRC16>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000fc2:	793a      	ldrb	r2, [r7, #4]
 8000fc4:	4b31      	ldr	r3, [pc, #196]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	4b30      	ldr	r3, [pc, #192]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000fd0:	3b02      	subs	r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d10c      	bne.n	8000ff6 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000fdc:	797a      	ldrb	r2, [r7, #5]
 8000fde:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fe0:	6819      	ldr	r1, [r3, #0]
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000fea:	3b01      	subs	r3, #1
 8000fec:	440b      	add	r3, r1
 8000fee:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d004      	beq.n	8001000 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000ff6:	4b25      	ldr	r3, [pc, #148]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	22ff      	movs	r2, #255	@ 0xff
 8000ffc:	759a      	strb	r2, [r3, #22]
				break;
 8000ffe:	e040      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001008:	4b20      	ldr	r3, [pc, #128]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d113      	bne.n	800103a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001022:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800102c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800102e:	461a      	mov	r2, r3
 8001030:	f007 f83a 	bl	80080a8 <memcpy>

			//execute command
			Modbus_frame_response();
 8001034:	f000 f904 	bl	8001240 <Modbus_frame_response>
 8001038:	e001      	b.n	800103e <Modbus_Protocal_Worker+0x1b2>
				break;
 800103a:	bf00      	nop
					}
		break;


	}
}
 800103c:	e021      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	7d5b      	ldrb	r3, [r3, #21]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d019      	beq.n	800107c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2201      	movs	r2, #1
 800104e:	75da      	strb	r2, [r3, #23]
		break;
 8001050:	e014      	b.n	800107c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105c:	2b20      	cmp	r3, #32
 800105e:	d10f      	bne.n	8001080 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2201      	movs	r2, #1
 8001070:	75da      	strb	r2, [r3, #23]
		break;
 8001072:	e005      	b.n	8001080 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001074:	bf00      	nop
 8001076:	e004      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001078:	bf00      	nop
 800107a:	e002      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
		break;
 800107c:	bf00      	nop
 800107e:	e000      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001080:	bf00      	nop
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000254 	.word	0x20000254

08001090 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <modbusWrite1Register+0x7c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	7e5b      	ldrb	r3, [r3, #25]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4a1a      	ldr	r2, [pc, #104]	@ (800110c <modbusWrite1Register+0x7c>)
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	7e92      	ldrb	r2, [r2, #26]
 80010a6:	4413      	add	r3, r2
 80010a8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80010aa:	88fa      	ldrh	r2, [r7, #6]
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <modbusWrite1Register+0x7c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d903      	bls.n	80010be <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80010b6:	2002      	movs	r0, #2
 80010b8:	f000 f8a0 	bl	80011fc <ModbusErrorReply>
			 return;
 80010bc:	e023      	b.n	8001106 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <modbusWrite1Register+0x7c>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <modbusWrite1Register+0x7c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6859      	ldr	r1, [r3, #4]
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	440b      	add	r3, r1
 80010ce:	7ed2      	ldrb	r2, [r2, #27]
 80010d0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <modbusWrite1Register+0x7c>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <modbusWrite1Register+0x7c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	440b      	add	r3, r1
 80010e2:	7f12      	ldrb	r2, [r2, #28]
 80010e4:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <modbusWrite1Register+0x7c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <modbusWrite1Register+0x7c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80010f4:	2208      	movs	r2, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	f006 ffd6 	bl	80080a8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <modbusWrite1Register+0x7c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2205      	movs	r2, #5
 8001102:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000254 	.word	0x20000254

08001110 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001116:	4b38      	ldr	r3, [pc, #224]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	7edb      	ldrb	r3, [r3, #27]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b29b      	uxth	r3, r3
 8001120:	4a35      	ldr	r2, [pc, #212]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	7f12      	ldrb	r2, [r2, #28]
 8001126:	4413      	add	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800112a:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <modbusRead1Register+0xe8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	7e5b      	ldrb	r3, [r3, #25]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b29b      	uxth	r3, r3
 8001134:	4a30      	ldr	r2, [pc, #192]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	7e92      	ldrb	r2, [r2, #26]
 800113a:	4413      	add	r3, r2
 800113c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <modbusRead1Register+0x3a>
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	2b7d      	cmp	r3, #125	@ 0x7d
 8001148:	d903      	bls.n	8001152 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800114a:	2003      	movs	r0, #3
 800114c:	f000 f856 	bl	80011fc <ModbusErrorReply>
		 return;
 8001150:	e04e      	b.n	80011f0 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001152:	88ba      	ldrh	r2, [r7, #4]
 8001154:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	429a      	cmp	r2, r3
 800115c:	d808      	bhi.n	8001170 <modbusRead1Register+0x60>
 800115e:	88ba      	ldrh	r2, [r7, #4]
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4413      	add	r3, r2
 8001164:	461a      	mov	r2, r3
 8001166:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	429a      	cmp	r2, r3
 800116e:	d903      	bls.n	8001178 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001170:	2002      	movs	r0, #2
 8001172:	f000 f843 	bl	80011fc <ModbusErrorReply>
		 return;
 8001176:	e03b      	b.n	80011f0 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001178:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <modbusRead1Register+0xe8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2203      	movs	r2, #3
 800117e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	0052      	lsls	r2, r2, #1
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001192:	2400      	movs	r4, #0
 8001194:	e020      	b.n	80011d8 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	88bb      	ldrh	r3, [r7, #4]
 800119e:	4423      	add	r3, r4
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	18d1      	adds	r1, r2, r3
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <modbusRead1Register+0xe8>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	1c63      	adds	r3, r4, #1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	7849      	ldrb	r1, [r1, #1]
 80011ae:	4413      	add	r3, r2
 80011b0:	460a      	mov	r2, r1
 80011b2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <modbusRead1Register+0xe8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	88bb      	ldrh	r3, [r7, #4]
 80011be:	4423      	add	r3, r4
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	18d1      	adds	r1, r2, r3
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <modbusRead1Register+0xe8>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	0063      	lsls	r3, r4, #1
 80011ca:	3303      	adds	r3, #3
 80011cc:	7809      	ldrb	r1, [r1, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	460a      	mov	r2, r1
 80011d2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80011d6:	3401      	adds	r4, #1
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	429c      	cmp	r4, r3
 80011dc:	dbdb      	blt.n	8001196 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	3301      	adds	r3, #1
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <modbusRead1Register+0xe8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	0052      	lsls	r2, r2, #1
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000254 	.word	0x20000254

080011fc <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <ModbusErrorReply+0x40>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	7e1a      	ldrb	r2, [r3, #24]
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <ModbusErrorReply+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <ModbusErrorReply+0x40>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <ModbusErrorReply+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2202      	movs	r2, #2
 800122a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000254 	.word	0x20000254

08001240 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001244:	4b09      	ldr	r3, [pc, #36]	@ (800126c <Modbus_frame_response+0x2c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	7e1b      	ldrb	r3, [r3, #24]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d004      	beq.n	8001258 <Modbus_frame_response+0x18>
 800124e:	2b06      	cmp	r3, #6
 8001250:	d105      	bne.n	800125e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001252:	f7ff ff1d 	bl	8001090 <modbusWrite1Register>
		break;
 8001256:	e006      	b.n	8001266 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001258:	f7ff ff5a 	bl	8001110 <modbusRead1Register>
		break;
 800125c:	e003      	b.n	8001266 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff ffcc 	bl	80011fc <ModbusErrorReply>
		break;
 8001264:	bf00      	nop

	}
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000254 	.word	0x20000254

08001270 <Modbus_Emission>:

void Modbus_Emission()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001276:	4b38      	ldr	r3, [pc, #224]	@ (8001358 <Modbus_Emission+0xe8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001280:	2b20      	cmp	r3, #32
 8001282:	d15d      	bne.n	8001340 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001284:	4b34      	ldr	r3, [pc, #208]	@ (8001358 <Modbus_Emission+0xe8>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b33      	ldr	r3, [pc, #204]	@ (8001358 <Modbus_Emission+0xe8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	7812      	ldrb	r2, [r2, #0]
 800128e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001292:	4b31      	ldr	r3, [pc, #196]	@ (8001358 <Modbus_Emission+0xe8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800129a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800129c:	4b2e      	ldr	r3, [pc, #184]	@ (8001358 <Modbus_Emission+0xe8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80012a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <Modbus_Emission+0xe8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80012ac:	461a      	mov	r2, r3
 80012ae:	f006 fefb 	bl	80080a8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80012b2:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <Modbus_Emission+0xe8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <Modbus_Emission+0xe8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3203      	adds	r2, #3
 80012c2:	b292      	uxth	r2, r2
 80012c4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80012c8:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <Modbus_Emission+0xe8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80012d0:	4b21      	ldr	r3, [pc, #132]	@ (8001358 <Modbus_Emission+0xe8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80012d8:	3b02      	subs	r3, #2
 80012da:	4619      	mov	r1, r3
 80012dc:	4610      	mov	r0, r2
 80012de:	f7ff fd9f 	bl	8000e20 <CRC16>
 80012e2:	4603      	mov	r3, r0
 80012e4:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <Modbus_Emission+0xe8>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <Modbus_Emission+0xe8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80012f2:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80012f4:	7939      	ldrb	r1, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	460a      	mov	r2, r1
 80012fa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80012fe:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <Modbus_Emission+0xe8>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <Modbus_Emission+0xe8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800130a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800130c:	7979      	ldrb	r1, [r7, #5]
 800130e:	4413      	add	r3, r2
 8001310:	460a      	mov	r2, r1
 8001312:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <Modbus_Emission+0xe8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001320:	2b20      	cmp	r3, #32
 8001322:	d10d      	bne.n	8001340 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <Modbus_Emission+0xe8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <Modbus_Emission+0xe8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <Modbus_Emission+0xe8>)
 8001334:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001336:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800133a:	461a      	mov	r2, r3
 800133c:	f005 f8ae 	bl	800649c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <Modbus_Emission+0xe8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2200      	movs	r2, #0
 8001346:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <Modbus_Emission+0xe8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	755a      	strb	r2, [r3, #21]

}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000254 	.word	0x20000254

0800135c <easyCase>:
//------------ Function ------------//
void Reset(){
	registerFrame[0x01].U16 = 0;
	registerFrame[0x10].U16 = 0;
}
void easyCase(){
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	base.bS = registerFrame[0x01].U16;
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <easyCase+0x30>)
 8001362:	885a      	ldrh	r2, [r3, #2]
 8001364:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <easyCase+0x34>)
 8001366:	871a      	strh	r2, [r3, #56]	@ 0x38
	base.vS = registerFrame[0x02].U16;
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <easyCase+0x30>)
 800136a:	889a      	ldrh	r2, [r3, #4]
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <easyCase+0x34>)
 800136e:	875a      	strh	r2, [r3, #58]	@ 0x3a
	base.gmS = registerFrame[0x03].U16;
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <easyCase+0x30>)
 8001372:	88da      	ldrh	r2, [r3, #6]
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <easyCase+0x34>)
 8001376:	879a      	strh	r2, [r3, #60]	@ 0x3c
//	base.gmaS = registerFrame[0x04].U16;
	base.zmS = registerFrame[0x10].U16;
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <easyCase+0x30>)
 800137a:	8c1a      	ldrh	r2, [r3, #32]
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <easyCase+0x34>)
 800137e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	20000730 	.word	0x20000730
 8001390:	200008c0 	.word	0x200008c0

08001394 <Heartbeat>:
void Heartbeat(){
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <Heartbeat+0x18>)
 800139a:	f645 1261 	movw	r2, #22881	@ 0x5961
 800139e:	801a      	strh	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000730 	.word	0x20000730

080013b0 <Routine>:

void Routine(){
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	if(registerFrame[0x00].U16 == 18537)
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <Routine+0x74>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	f644 0269 	movw	r2, #18537	@ 0x4869
 80013bc:	4293      	cmp	r3, r2
 80013be:	d12c      	bne.n	800141a <Routine+0x6a>
	{
		//Gripper 0x04 not sure!?!?
//		  registerFrame[0x04].U16 = 0b0000;
//		  registerFrame[0x04].U16 = 0b0001;   //Gripper status 0b0010 = 0000 0000 0000 0010
		registerFrame[0x10].U16 = base.bStatus;	//Z-axis status 0010 = 1
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <Routine+0x78>)
 80013c2:	881a      	ldrh	r2, [r3, #0]
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <Routine+0x74>)
 80013c6:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = base.PositionZ	*10;	//Z-axis position
 80013c8:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <Routine+0x78>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	0092      	lsls	r2, r2, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <Routine+0x74>)
 80013da:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = base.Speed		*10;		//Z-axis speed
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <Routine+0x78>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	0092      	lsls	r2, r2, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <Routine+0x74>)
 80013ee:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = base.Acc			*10;		//Z-axis acceleration
 80013f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <Routine+0x78>)
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <Routine+0x74>)
 8001402:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = base.PositionX	*10;	//X-axis position
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <Routine+0x78>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	b29b      	uxth	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4413      	add	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <Routine+0x74>)
 8001416:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	20000730 	.word	0x20000730
 8001428:	200008c0 	.word	0x200008c0

0800142c <SetShelves>:
	else if(registerFrame[0x03].U16 == 0b0001){
		base.Gripper = 1;			//Gripper Movement: Forward
	}
}

void SetShelves(){
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 1; 		//Z-axis update z-xis moving status to "Set Shelves"
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <SetShelves+0x68>)
 8001432:	2201      	movs	r2, #1
 8001434:	841a      	strh	r2, [r3, #32]
	// save Position = floor[0] for moving to that position
	// set shelves 1 = 100 mm shelves 2 = 250 mm
	registerFrame[0x23].U16 = 10 *10; 	//0 = Position Shelve 1
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <SetShelves+0x68>)
 8001438:	2264      	movs	r2, #100	@ 0x64
 800143a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	registerFrame[0x24].U16 = 20 *10;
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <SetShelves+0x68>)
 8001440:	22c8      	movs	r2, #200	@ 0xc8
 8001442:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	registerFrame[0x25].U16 = 30 *10;
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <SetShelves+0x68>)
 8001448:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800144c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	registerFrame[0x26].U16 = 40 *10;
 8001450:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <SetShelves+0x68>)
 8001452:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001456:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	registerFrame[0x27].U16 = 50 *10;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <SetShelves+0x68>)
 800145c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001460:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	//finish
	if (base.sw == 1){
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <SetShelves+0x6c>)
 8001466:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800146a:	2b01      	cmp	r3, #1
 800146c:	d10d      	bne.n	800148a <SetShelves+0x5e>
		base.bStatus = 0;
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <SetShelves+0x6c>)
 8001470:	2200      	movs	r2, #0
 8001472:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <SetShelves+0x6c>)
 8001476:	881a      	ldrh	r2, [r3, #0]
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <SetShelves+0x68>)
 800147a:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <SetShelves+0x68>)
 800147e:	2200      	movs	r2, #0
 8001480:	841a      	strh	r2, [r3, #32]
		base.sw = 0;
 8001482:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <SetShelves+0x6c>)
 8001484:	2200      	movs	r2, #0
 8001486:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	}
//	base.ShelveMode = 1;				//Floor selection by ps2
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	20000730 	.word	0x20000730
 8001498:	200008c0 	.word	0x200008c0

0800149c <RunPoint>:

void RunPoint(){
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	base.GoalPoint = (registerFrame[0x30].U16)/10; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <RunPoint+0x50>)
 80014a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80014a6:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <RunPoint+0x54>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <RunPoint+0x58>)
 80014b2:	865a      	strh	r2, [r3, #50]	@ 0x32
	registerFrame[0x10].U16 = 16;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <RunPoint+0x50>)
 80014b6:	2210      	movs	r2, #16
 80014b8:	841a      	strh	r2, [r3, #32]
	//finish
	if(base.swp == 1){
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <RunPoint+0x58>)
 80014bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d10d      	bne.n	80014e0 <RunPoint+0x44>
		base.bStatus = 0;
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <RunPoint+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <RunPoint+0x58>)
 80014cc:	881a      	ldrh	r2, [r3, #0]
 80014ce:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <RunPoint+0x50>)
 80014d0:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <RunPoint+0x50>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	841a      	strh	r2, [r3, #32]
		base.swp = 0;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <RunPoint+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	}
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000730 	.word	0x20000730
 80014f0:	cccccccd 	.word	0xcccccccd
 80014f4:	200008c0 	.word	0x200008c0

080014f8 <SetHome>:

void SetHome(){
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 2;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <SetHome+0x3c>)
 80014fe:	2202      	movs	r2, #2
 8001500:	841a      	strh	r2, [r3, #32]
	if(base.sh == 1){
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <SetHome+0x40>)
 8001504:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10d      	bne.n	8001528 <SetHome+0x30>
		base.bStatus = 0;
 800150c:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <SetHome+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <SetHome+0x40>)
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <SetHome+0x3c>)
 8001518:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <SetHome+0x3c>)
 800151c:	2200      	movs	r2, #0
 800151e:	841a      	strh	r2, [r3, #32]
		base.sh = 0;
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <SetHome+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	}
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000730 	.word	0x20000730
 8001538:	200008c0 	.word	0x200008c0

0800153c <RunJog>:

void RunJog(){
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	base.Pick = registerFrame[0x21].U16 ; 	//Get Pick from BaseSystem
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <RunJog+0x54>)
 8001542:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001546:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <RunJog+0x58>)
 8001548:	869a      	strh	r2, [r3, #52]	@ 0x34
	base.Place = registerFrame[0x22].U16 ;	//Get Place from BaseSystem
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <RunJog+0x54>)
 800154c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001550:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <RunJog+0x58>)
 8001552:	86da      	strh	r2, [r3, #54]	@ 0x36
	registerFrame[0x10].U16 = 4;
 8001554:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <RunJog+0x54>)
 8001556:	2204      	movs	r2, #4
 8001558:	841a      	strh	r2, [r3, #32]
	registerFrame[0x10].U16 = 8;
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <RunJog+0x54>)
 800155c:	2208      	movs	r2, #8
 800155e:	841a      	strh	r2, [r3, #32]
	//pick place 5 time
	if(base.sp == 1){
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <RunJog+0x58>)
 8001562:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001566:	2b01      	cmp	r3, #1
 8001568:	d10d      	bne.n	8001586 <RunJog+0x4a>
		base.bStatus = 0;
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <RunJog+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <RunJog+0x58>)
 8001572:	881a      	ldrh	r2, [r3, #0]
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <RunJog+0x54>)
 8001576:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <RunJog+0x54>)
 800157a:	2200      	movs	r2, #0
 800157c:	841a      	strh	r2, [r3, #32]
		base.sp = 0;
 800157e:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <RunJog+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	}
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000730 	.word	0x20000730
 8001594:	200008c0 	.word	0x200008c0

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159c:	f001 f8ad 	bl	80026fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a0:	f000 f8cc 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a4:	f000 fb88 	bl	8001cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a8:	f000 fb54 	bl	8001c54 <MX_DMA_Init>
  MX_TIM2_Init();
 80015ac:	f000 f912 	bl	80017d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015b0:	f000 f964 	bl	800187c <MX_TIM3_Init>
  MX_TIM5_Init();
 80015b4:	f000 fa34 	bl	8001a20 <MX_TIM5_Init>
  MX_UART4_Init();
 80015b8:	f000 fab0 	bl	8001b1c <MX_UART4_Init>
  MX_TIM4_Init();
 80015bc:	f000 f9e0 	bl	8001980 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80015c0:	f000 fafa 	bl	8001bb8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80015c4:	f000 fa7a 	bl	8001abc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80015c8:	4852      	ldr	r0, [pc, #328]	@ (8001714 <main+0x17c>)
 80015ca:	f002 ff9b 	bl	8004504 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80015ce:	4852      	ldr	r0, [pc, #328]	@ (8001718 <main+0x180>)
 80015d0:	f002 ff98 	bl	8004504 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 80015d4:	4b51      	ldr	r3, [pc, #324]	@ (800171c <main+0x184>)
 80015d6:	4a52      	ldr	r2, [pc, #328]	@ (8001720 <main+0x188>)
 80015d8:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80015da:	4b50      	ldr	r3, [pc, #320]	@ (800171c <main+0x184>)
 80015dc:	4a51      	ldr	r2, [pc, #324]	@ (8001724 <main+0x18c>)
 80015de:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80015e0:	4b4e      	ldr	r3, [pc, #312]	@ (800171c <main+0x184>)
 80015e2:	2215      	movs	r2, #21
 80015e4:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80015e6:	4b4d      	ldr	r3, [pc, #308]	@ (800171c <main+0x184>)
 80015e8:	22c8      	movs	r2, #200	@ 0xc8
 80015ea:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80015ec:	494e      	ldr	r1, [pc, #312]	@ (8001728 <main+0x190>)
 80015ee:	484b      	ldr	r0, [pc, #300]	@ (800171c <main+0x184>)
 80015f0:	f7ff fbc0 	bl	8000d74 <Modbus_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Modbus
	  easyCase();
 80015f4:	f7ff feb2 	bl	800135c <easyCase>
	  switch(base.bS){
 80015f8:	4b4c      	ldr	r3, [pc, #304]	@ (800172c <main+0x194>)
 80015fa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80015fc:	3b01      	subs	r3, #1
 80015fe:	2b07      	cmp	r3, #7
 8001600:	d836      	bhi.n	8001670 <main+0xd8>
 8001602:	a201      	add	r2, pc, #4	@ (adr r2, 8001608 <main+0x70>)
 8001604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001608:	08001629 	.word	0x08001629
 800160c:	0800163b 	.word	0x0800163b
 8001610:	08001671 	.word	0x08001671
 8001614:	0800164d 	.word	0x0800164d
 8001618:	08001671 	.word	0x08001671
 800161c:	08001671 	.word	0x08001671
 8001620:	08001671 	.word	0x08001671
 8001624:	0800165f 	.word	0x0800165f
	  case 1:
		  base.bStatus = 4;
 8001628:	4b40      	ldr	r3, [pc, #256]	@ (800172c <main+0x194>)
 800162a:	2204      	movs	r2, #4
 800162c:	801a      	strh	r2, [r3, #0]
		  SetShelves();
 800162e:	f7ff fefd 	bl	800142c <SetShelves>
		  base.bS = 0;
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <main+0x194>)
 8001634:	2200      	movs	r2, #0
 8001636:	871a      	strh	r2, [r3, #56]	@ 0x38
		  break;
 8001638:	e01d      	b.n	8001676 <main+0xde>
	  case 2:
		  base.bStatus = 4;
 800163a:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <main+0x194>)
 800163c:	2204      	movs	r2, #4
 800163e:	801a      	strh	r2, [r3, #0]
		  SetHome();
 8001640:	f7ff ff5a 	bl	80014f8 <SetHome>
		  base.bS = 0;
 8001644:	4b39      	ldr	r3, [pc, #228]	@ (800172c <main+0x194>)
 8001646:	2200      	movs	r2, #0
 8001648:	871a      	strh	r2, [r3, #56]	@ 0x38
		  break;
 800164a:	e014      	b.n	8001676 <main+0xde>
	  case 4:
		  base.bStatus = 4;
 800164c:	4b37      	ldr	r3, [pc, #220]	@ (800172c <main+0x194>)
 800164e:	2204      	movs	r2, #4
 8001650:	801a      	strh	r2, [r3, #0]
		  RunJog();
 8001652:	f7ff ff73 	bl	800153c <RunJog>
		  base.bS = 0;
 8001656:	4b35      	ldr	r3, [pc, #212]	@ (800172c <main+0x194>)
 8001658:	2200      	movs	r2, #0
 800165a:	871a      	strh	r2, [r3, #56]	@ 0x38
		  break;
 800165c:	e00b      	b.n	8001676 <main+0xde>
	  case 8:
		  base.bStatus = 8;
 800165e:	4b33      	ldr	r3, [pc, #204]	@ (800172c <main+0x194>)
 8001660:	2208      	movs	r2, #8
 8001662:	801a      	strh	r2, [r3, #0]
		  RunPoint();
 8001664:	f7ff ff1a 	bl	800149c <RunPoint>
		  base.bS = 0;
 8001668:	4b30      	ldr	r3, [pc, #192]	@ (800172c <main+0x194>)
 800166a:	2200      	movs	r2, #0
 800166c:	871a      	strh	r2, [r3, #56]	@ 0x38
		  break;
 800166e:	e002      	b.n	8001676 <main+0xde>
	  default:
		  registerFrame[0x01].U16 = 0;;
 8001670:	4b2d      	ldr	r3, [pc, #180]	@ (8001728 <main+0x190>)
 8001672:	2200      	movs	r2, #0
 8001674:	805a      	strh	r2, [r3, #2]
	  }

	  switch(base.vS){
 8001676:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <main+0x194>)
 8001678:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <main+0xec>
 800167e:	2b01      	cmp	r3, #1
 8001680:	d004      	beq.n	800168c <main+0xf4>
 8001682:	e007      	b.n	8001694 <main+0xfc>
	  case 0:
		  base.Vacuum = 0;
 8001684:	4b29      	ldr	r3, [pc, #164]	@ (800172c <main+0x194>)
 8001686:	2200      	movs	r2, #0
 8001688:	829a      	strh	r2, [r3, #20]
		  break;
 800168a:	e003      	b.n	8001694 <main+0xfc>
	  case 1:
		  base.Vacuum = 1;
 800168c:	4b27      	ldr	r3, [pc, #156]	@ (800172c <main+0x194>)
 800168e:	2201      	movs	r2, #1
 8001690:	829a      	strh	r2, [r3, #20]
		  break;
 8001692:	bf00      	nop
	  }

	  switch(base.gmS){
 8001694:	4b25      	ldr	r3, [pc, #148]	@ (800172c <main+0x194>)
 8001696:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <main+0x10a>
 800169c:	2b01      	cmp	r3, #1
 800169e:	d004      	beq.n	80016aa <main+0x112>
 80016a0:	e007      	b.n	80016b2 <main+0x11a>
	  case 0:
		  base.Gripper = 0;
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <main+0x194>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	82da      	strh	r2, [r3, #22]
		  break;
 80016a8:	e003      	b.n	80016b2 <main+0x11a>
	  case 1:
		  base.Gripper = 1;
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <main+0x194>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	82da      	strh	r2, [r3, #22]
		  break;
 80016b0:	bf00      	nop
	  }


	  Modbus_Protocal_Worker();
 80016b2:	f7ff fbeb 	bl	8000e8c <Modbus_Protocal_Worker>
	  Routine();
 80016b6:	f7ff fe7b 	bl	80013b0 <Routine>
	  //--

	  //Ps2
	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 80016ba:	230a      	movs	r3, #10
 80016bc:	220a      	movs	r2, #10
 80016be:	491c      	ldr	r1, [pc, #112]	@ (8001730 <main+0x198>)
 80016c0:	481c      	ldr	r0, [pc, #112]	@ (8001734 <main+0x19c>)
 80016c2:	f004 fe23 	bl	800630c <HAL_UART_Receive>
	  if(ps2.ps2RX[0] == 74){
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <main+0x198>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b4a      	cmp	r3, #74	@ 0x4a
 80016cc:	d102      	bne.n	80016d4 <main+0x13c>
		  ps2.stop = 1;
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <main+0x198>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	671a      	str	r2, [r3, #112]	@ 0x70
	  }
	  if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 80016d4:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <main+0x198>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d112      	bne.n	8001702 <main+0x16a>
 80016dc:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <main+0x198>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b4b      	cmp	r3, #75	@ 0x4b
 80016e2:	d10e      	bne.n	8001702 <main+0x16a>
		  ps2.stop = 0;
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <main+0x198>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	671a      	str	r2, [r3, #112]	@ 0x70
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);		//Stop
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <main+0x1a0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <main+0x1a0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	639a      	str	r2, [r3, #56]	@ 0x38
		  ps2.pwmOut = 0;
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <main+0x198>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	669a      	str	r2, [r3, #104]	@ 0x68
 8001700:	e006      	b.n	8001710 <main+0x178>
	  }
	  else if(ps2.stop == 0){
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <main+0x198>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001706:	2b00      	cmp	r3, #0
 8001708:	f47f af74 	bne.w	80015f4 <main+0x5c>
		  PS2X_Reader();
 800170c:	f000 fb64 	bl	8001dd8 <PS2X_Reader>
	  easyCase();
 8001710:	e770      	b.n	80015f4 <main+0x5c>
 8001712:	bf00      	nop
 8001714:	20000aa4 	.word	0x20000aa4
 8001718:	20000b70 	.word	0x20000b70
 800171c:	20000258 	.word	0x20000258
 8001720:	20000dd4 	.word	0x20000dd4
 8001724:	20000c3c 	.word	0x20000c3c
 8001728:	20000730 	.word	0x20000730
 800172c:	200008c0 	.word	0x200008c0
 8001730:	20000f60 	.word	0x20000f60
 8001734:	20000d08 	.word	0x20000d08
 8001738:	200009d8 	.word	0x200009d8

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	@ 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0318 	add.w	r3, r7, #24
 8001746:	2238      	movs	r2, #56	@ 0x38
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f006 fc80 	bl	8008050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800175e:	2000      	movs	r0, #0
 8001760:	f001 fe3c 	bl	80033dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001764:	2302      	movs	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176e:	2340      	movs	r3, #64	@ 0x40
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001772:	2302      	movs	r3, #2
 8001774:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001776:	2302      	movs	r3, #2
 8001778:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800177a:	2304      	movs	r3, #4
 800177c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800177e:	2355      	movs	r3, #85	@ 0x55
 8001780:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001782:	2302      	movs	r3, #2
 8001784:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001786:	2302      	movs	r3, #2
 8001788:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800178a:	2302      	movs	r3, #2
 800178c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178e:	f107 0318 	add.w	r3, r7, #24
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fed6 	bl	8003544 <HAL_RCC_OscConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800179e:	f000 fced 	bl	800217c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a2:	230f      	movs	r3, #15
 80017a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a6:	2303      	movs	r3, #3
 80017a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2104      	movs	r1, #4
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 f9d4 	bl	8003b68 <HAL_RCC_ClockConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80017c6:	f000 fcd9 	bl	800217c <Error_Handler>
  }
}
 80017ca:	bf00      	nop
 80017cc:	3750      	adds	r7, #80	@ 0x50
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	@ 0x30
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2224      	movs	r2, #36	@ 0x24
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f006 fc34 	bl	8008050 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017f2:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <MX_TIM2_Init+0xa4>)
 80017f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <MX_TIM2_Init+0xa4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <MX_TIM2_Init+0xa4>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001806:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <MX_TIM2_Init+0xa4>)
 8001808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800180c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180e:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <MX_TIM2_Init+0xa4>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001814:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <MX_TIM2_Init+0xa4>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800181a:	2303      	movs	r3, #3
 800181c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001822:	2301      	movs	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001832:	2301      	movs	r3, #1
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4619      	mov	r1, r3
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <MX_TIM2_Init+0xa4>)
 8001846:	f003 f839 	bl	80048bc <HAL_TIM_Encoder_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001850:	f000 fc94 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	@ (8001878 <MX_TIM2_Init+0xa4>)
 8001862:	f004 fb53 	bl	8005f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800186c:	f000 fc86 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3730      	adds	r7, #48	@ 0x30
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000090c 	.word	0x2000090c

0800187c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08e      	sub	sp, #56	@ 0x38
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018ae:	4b32      	ldr	r3, [pc, #200]	@ (8001978 <MX_TIM3_Init+0xfc>)
 80018b0:	4a32      	ldr	r2, [pc, #200]	@ (800197c <MX_TIM3_Init+0x100>)
 80018b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 80018b4:	4b30      	ldr	r3, [pc, #192]	@ (8001978 <MX_TIM3_Init+0xfc>)
 80018b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001978 <MX_TIM3_Init+0xfc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 169;
 80018c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001978 <MX_TIM3_Init+0xfc>)
 80018c4:	22a9      	movs	r2, #169	@ 0xa9
 80018c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001978 <MX_TIM3_Init+0xfc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <MX_TIM3_Init+0xfc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018d4:	4828      	ldr	r0, [pc, #160]	@ (8001978 <MX_TIM3_Init+0xfc>)
 80018d6:	f002 fdb1 	bl	800443c <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018e0:	f000 fc4c 	bl	800217c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4821      	ldr	r0, [pc, #132]	@ (8001978 <MX_TIM3_Init+0xfc>)
 80018f2:	f003 fb25 	bl	8004f40 <HAL_TIM_ConfigClockSource>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80018fc:	f000 fc3e 	bl	800217c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001900:	481d      	ldr	r0, [pc, #116]	@ (8001978 <MX_TIM3_Init+0xfc>)
 8001902:	f002 fe77 	bl	80045f4 <HAL_TIM_PWM_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800190c:	f000 fc36 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4816      	ldr	r0, [pc, #88]	@ (8001978 <MX_TIM3_Init+0xfc>)
 8001920:	f004 faf4 	bl	8005f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800192a:	f000 fc27 	bl	800217c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800192e:	2360      	movs	r3, #96	@ 0x60
 8001930:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	2200      	movs	r2, #0
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <MX_TIM3_Init+0xfc>)
 8001946:	f003 f9e7 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001950:	f000 fc14 	bl	800217c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	2204      	movs	r2, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4807      	ldr	r0, [pc, #28]	@ (8001978 <MX_TIM3_Init+0xfc>)
 800195c:	f003 f9dc 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001966:	f000 fc09 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800196a:	4803      	ldr	r0, [pc, #12]	@ (8001978 <MX_TIM3_Init+0xfc>)
 800196c:	f000 fce2 	bl	8002334 <HAL_TIM_MspPostInit>

}
 8001970:	bf00      	nop
 8001972:	3738      	adds	r7, #56	@ 0x38
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200009d8 	.word	0x200009d8
 800197c:	40000400 	.word	0x40000400

08001980 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800199e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <MX_TIM4_Init+0x98>)
 80019a0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a1c <MX_TIM4_Init+0x9c>)
 80019a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 80019a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <MX_TIM4_Init+0x98>)
 80019a6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80019aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <MX_TIM4_Init+0x98>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80019b2:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <MX_TIM4_Init+0x98>)
 80019b4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <MX_TIM4_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c0:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <MX_TIM4_Init+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019c6:	4814      	ldr	r0, [pc, #80]	@ (8001a18 <MX_TIM4_Init+0x98>)
 80019c8:	f002 fd38 	bl	800443c <HAL_TIM_Base_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80019d2:	f000 fbd3 	bl	800217c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4619      	mov	r1, r3
 80019e2:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <MX_TIM4_Init+0x98>)
 80019e4:	f003 faac 	bl	8004f40 <HAL_TIM_ConfigClockSource>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80019ee:	f000 fbc5 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <MX_TIM4_Init+0x98>)
 8001a00:	f004 fa84 	bl	8005f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001a0a:	f000 fbb7 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	3720      	adds	r7, #32
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000aa4 	.word	0x20000aa4
 8001a1c:	40000800 	.word	0x40000800

08001a20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <MX_TIM5_Init+0x94>)
 8001a40:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab8 <MX_TIM5_Init+0x98>)
 8001a42:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <MX_TIM5_Init+0x94>)
 8001a46:	22a9      	movs	r2, #169	@ 0xa9
 8001a48:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <MX_TIM5_Init+0x94>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a50:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <MX_TIM5_Init+0x94>)
 8001a52:	f04f 32ff 	mov.w	r2, #4294967295
 8001a56:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <MX_TIM5_Init+0x94>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <MX_TIM5_Init+0x94>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a64:	4813      	ldr	r0, [pc, #76]	@ (8001ab4 <MX_TIM5_Init+0x94>)
 8001a66:	f002 fce9 	bl	800443c <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001a70:	f000 fb84 	bl	800217c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480c      	ldr	r0, [pc, #48]	@ (8001ab4 <MX_TIM5_Init+0x94>)
 8001a82:	f003 fa5d 	bl	8004f40 <HAL_TIM_ConfigClockSource>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001a8c:	f000 fb76 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_TIM5_Init+0x94>)
 8001a9e:	f004 fa35 	bl	8005f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001aa8:	f000 fb68 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000b70 	.word	0x20000b70
 8001ab8:	40000c00 	.word	0x40000c00

08001abc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <MX_TIM16_Init+0x58>)
 8001ac2:	4a15      	ldr	r2, [pc, #84]	@ (8001b18 <MX_TIM16_Init+0x5c>)
 8001ac4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001ac6:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <MX_TIM16_Init+0x58>)
 8001ac8:	22a9      	movs	r2, #169	@ 0xa9
 8001aca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <MX_TIM16_Init+0x58>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <MX_TIM16_Init+0x58>)
 8001ad4:	f240 4279 	movw	r2, #1145	@ 0x479
 8001ad8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <MX_TIM16_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <MX_TIM16_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <MX_TIM16_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001aec:	4809      	ldr	r0, [pc, #36]	@ (8001b14 <MX_TIM16_Init+0x58>)
 8001aee:	f002 fca5 	bl	800443c <HAL_TIM_Base_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001af8:	f000 fb40 	bl	800217c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001afc:	2108      	movs	r1, #8
 8001afe:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <MX_TIM16_Init+0x58>)
 8001b00:	f002 fde6 	bl	80046d0 <HAL_TIM_OnePulse_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001b0a:	f000 fb37 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000c3c 	.word	0x20000c3c
 8001b18:	40014400 	.word	0x40014400

08001b1c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b20:	4b23      	ldr	r3, [pc, #140]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b22:	4a24      	ldr	r2, [pc, #144]	@ (8001bb4 <MX_UART4_Init+0x98>)
 8001b24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9700;
 8001b26:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b28:	f242 52e4 	movw	r2, #9700	@ 0x25e4
 8001b2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2e:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b34:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b42:	220c      	movs	r2, #12
 8001b44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b52:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b58:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5e:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b64:	4812      	ldr	r0, [pc, #72]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b66:	f004 fab7 	bl	80060d8 <HAL_UART_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001b70:	f000 fb04 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b74:	2100      	movs	r1, #0
 8001b76:	480e      	ldr	r0, [pc, #56]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b78:	f006 f99f 	bl	8007eba <HAL_UARTEx_SetTxFifoThreshold>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001b82:	f000 fafb 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001b86:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8001b8a:	4809      	ldr	r0, [pc, #36]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b8c:	f006 f9d3 	bl	8007f36 <HAL_UARTEx_SetRxFifoThreshold>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8001b96:	f000 faf1 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <MX_UART4_Init+0x94>)
 8001b9c:	f006 f954 	bl	8007e48 <HAL_UARTEx_DisableFifoMode>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8001ba6:	f000 fae9 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000d08 	.word	0x20000d08
 8001bb4:	40004c00 	.word	0x40004c00

08001bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bbc:	4b23      	ldr	r3, [pc, #140]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001bbe:	4a24      	ldr	r2, [pc, #144]	@ (8001c50 <MX_USART2_UART_Init+0x98>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001bc2:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001bc4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001bca:	4b20      	ldr	r3, [pc, #128]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001bcc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bd0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001bda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b19      	ldr	r3, [pc, #100]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf2:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c04:	4811      	ldr	r0, [pc, #68]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001c06:	f004 fa67 	bl	80060d8 <HAL_UART_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001c10:	f000 fab4 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c14:	2100      	movs	r1, #0
 8001c16:	480d      	ldr	r0, [pc, #52]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001c18:	f006 f94f 	bl	8007eba <HAL_UARTEx_SetTxFifoThreshold>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001c22:	f000 faab 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c26:	2100      	movs	r1, #0
 8001c28:	4808      	ldr	r0, [pc, #32]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001c2a:	f006 f984 	bl	8007f36 <HAL_UARTEx_SetRxFifoThreshold>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001c34:	f000 faa2 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c38:	4804      	ldr	r0, [pc, #16]	@ (8001c4c <MX_USART2_UART_Init+0x94>)
 8001c3a:	f006 f905 	bl	8007e48 <HAL_UARTEx_DisableFifoMode>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001c44:	f000 fa9a 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000dd4 	.word	0x20000dd4
 8001c50:	40004400 	.word	0x40004400

08001c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c5a:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <MX_DMA_Init+0x60>)
 8001c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5e:	4a15      	ldr	r2, [pc, #84]	@ (8001cb4 <MX_DMA_Init+0x60>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c66:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <MX_DMA_Init+0x60>)
 8001c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <MX_DMA_Init+0x60>)
 8001c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c76:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb4 <MX_DMA_Init+0x60>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <MX_DMA_Init+0x60>)
 8001c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	200b      	movs	r0, #11
 8001c90:	f000 fe7f 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c94:	200b      	movs	r0, #11
 8001c96:	f000 fe96 	bl	80029c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	200c      	movs	r0, #12
 8001ca0:	f000 fe77 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ca4:	200c      	movs	r0, #12
 8001ca6:	f000 fe8e 	bl	80029c6 <HAL_NVIC_EnableIRQ>

}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	@ 0x28
 8001cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b2f      	ldr	r3, [pc, #188]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	4a2e      	ldr	r2, [pc, #184]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cda:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ce6:	4b29      	ldr	r3, [pc, #164]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	4a28      	ldr	r2, [pc, #160]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001cec:	f043 0320 	orr.w	r3, r3, #32
 8001cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf2:	4b26      	ldr	r3, [pc, #152]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	4a22      	ldr	r2, [pc, #136]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d0a:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d22:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <MX_GPIO_Init+0xd4>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2120      	movs	r1, #32
 8001d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d36:	f001 fb15 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d40:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480f      	ldr	r0, [pc, #60]	@ (8001d90 <MX_GPIO_Init+0xd8>)
 8001d52:	f001 f985 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d56:	2320      	movs	r3, #32
 8001d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d70:	f001 f976 	bl	8003060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2028      	movs	r0, #40	@ 0x28
 8001d7a:	f000 fe0a 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d7e:	2028      	movs	r0, #40	@ 0x28
 8001d80:	f000 fe21 	bl	80029c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	@ 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	48000800 	.word	0x48000800

08001d94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
		if(htim == &htim5)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d108      	bne.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x22>
			{
			_micros += UINT32_MAX;
 8001da4:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	1e54      	subs	r4, r2, #1
 8001dac:	f143 0500 	adc.w	r5, r3, #0
 8001db0:	4b07      	ldr	r3, [pc, #28]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001db2:	e9c3 4500 	strd	r4, r5, [r3]
			}
		if(htim == &htim4)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a06      	ldr	r2, [pc, #24]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d101      	bne.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			 Heartbeat();
 8001dbe:	f7ff fae9 	bl	8001394 <Heartbeat>
		}
	}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000b70 	.word	0x20000b70
 8001dd0:	20000fd8 	.word	0x20000fd8
 8001dd4:	20000aa4 	.word	0x20000aa4

08001dd8 <PS2X_Reader>:
		//store value for next loop
		QEIdata.Position[OLD] = QEIdata.Position[NEW];
		QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
}
void PS2X_Reader()
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
//	ps2.ps2Y = 0;
//	ps2.ps2X = 0;
	if (ps2.ps2RX[0] == 69) 		//Press L4 to switch to use Joy stick
 8001dde:	4b92      	ldr	r3, [pc, #584]	@ (8002028 <PS2X_Reader+0x250>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b45      	cmp	r3, #69	@ 0x45
 8001de4:	d102      	bne.n	8001dec <PS2X_Reader+0x14>
	{
		ps2.mode = 1;
 8001de6:	4b90      	ldr	r3, [pc, #576]	@ (8002028 <PS2X_Reader+0x250>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	66da      	str	r2, [r3, #108]	@ 0x6c
//		ps2.ps2YPos = 132;
	}
	if (ps2.ps2RX[0] == 70)		//Press L5 to switch to use Button
 8001dec:	4b8e      	ldr	r3, [pc, #568]	@ (8002028 <PS2X_Reader+0x250>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b46      	cmp	r3, #70	@ 0x46
 8001df2:	d102      	bne.n	8001dfa <PS2X_Reader+0x22>
	{
		ps2.mode = 2;
 8001df4:	4b8c      	ldr	r3, [pc, #560]	@ (8002028 <PS2X_Reader+0x250>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	66da      	str	r2, [r3, #108]	@ 0x6c
	}
	//Mode Joy stick
	if (ps2.mode == 1)
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8002028 <PS2X_Reader+0x250>)
 8001dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	f040 80bd 	bne.w	8001f7e <PS2X_Reader+0x1a6>
	{
		//Read Ps2 Joy stick in VERTICAL
		if(ps2.ps2RX[0] == 81){
 8001e04:	4b88      	ldr	r3, [pc, #544]	@ (8002028 <PS2X_Reader+0x250>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b51      	cmp	r3, #81	@ 0x51
 8001e0a:	d169      	bne.n	8001ee0 <PS2X_Reader+0x108>
			if (ps2.ps2RX[2] == 83){
 8001e0c:	4b86      	ldr	r3, [pc, #536]	@ (8002028 <PS2X_Reader+0x250>)
 8001e0e:	789b      	ldrb	r3, [r3, #2]
 8001e10:	2b53      	cmp	r3, #83	@ 0x53
 8001e12:	d103      	bne.n	8001e1c <PS2X_Reader+0x44>
				ps2.digit = 1;
 8001e14:	4b84      	ldr	r3, [pc, #528]	@ (8002028 <PS2X_Reader+0x250>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	e00e      	b.n	8001e3a <PS2X_Reader+0x62>
			}
			else if (ps2.ps2RX[3] == 83){
 8001e1c:	4b82      	ldr	r3, [pc, #520]	@ (8002028 <PS2X_Reader+0x250>)
 8001e1e:	78db      	ldrb	r3, [r3, #3]
 8001e20:	2b53      	cmp	r3, #83	@ 0x53
 8001e22:	d103      	bne.n	8001e2c <PS2X_Reader+0x54>
				ps2.digit = 2;
 8001e24:	4b80      	ldr	r3, [pc, #512]	@ (8002028 <PS2X_Reader+0x250>)
 8001e26:	2202      	movs	r2, #2
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	e006      	b.n	8001e3a <PS2X_Reader+0x62>
			}
			else if (ps2.ps2RX[4] == 83){
 8001e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002028 <PS2X_Reader+0x250>)
 8001e2e:	791b      	ldrb	r3, [r3, #4]
 8001e30:	2b53      	cmp	r3, #83	@ 0x53
 8001e32:	d102      	bne.n	8001e3a <PS2X_Reader+0x62>
				ps2.digit = 3;
 8001e34:	4b7c      	ldr	r3, [pc, #496]	@ (8002028 <PS2X_Reader+0x250>)
 8001e36:	2203      	movs	r2, #3
 8001e38:	60da      	str	r2, [r3, #12]
			}
			for(int k=1 ; k<5 ; k++){
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e01d      	b.n	8001e7c <PS2X_Reader+0xa4>
				for (int l=0; l<10 ; l++){
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	e014      	b.n	8001e70 <PS2X_Reader+0x98>
					if (ps2.ps2RX[k] == num[l]){
 8001e46:	4a78      	ldr	r2, [pc, #480]	@ (8002028 <PS2X_Reader+0x250>)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4a76      	ldr	r2, [pc, #472]	@ (800202c <PS2X_Reader+0x254>)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e58:	4299      	cmp	r1, r3
 8001e5a:	d106      	bne.n	8001e6a <PS2X_Reader+0x92>
						ps2.gain[k-1] = l;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	4971      	ldr	r1, [pc, #452]	@ (8002028 <PS2X_Reader+0x250>)
 8001e62:	3304      	adds	r3, #4
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int l=0; l<10 ; l++){
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	dde7      	ble.n	8001e46 <PS2X_Reader+0x6e>
			for(int k=1 ; k<5 ; k++){
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	ddde      	ble.n	8001e40 <PS2X_Reader+0x68>
					}
				}
			}
			if (ps2.digit == 1){
 8001e82:	4b69      	ldr	r3, [pc, #420]	@ (8002028 <PS2X_Reader+0x250>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d104      	bne.n	8001e94 <PS2X_Reader+0xbc>
				ps2.ps2YPos = ps2.gain[0];
 8001e8a:	4b67      	ldr	r3, [pc, #412]	@ (8002028 <PS2X_Reader+0x250>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4a66      	ldr	r2, [pc, #408]	@ (8002028 <PS2X_Reader+0x250>)
 8001e90:	6213      	str	r3, [r2, #32]
 8001e92:	e025      	b.n	8001ee0 <PS2X_Reader+0x108>
			}
			else if (ps2.digit == 2){
 8001e94:	4b64      	ldr	r3, [pc, #400]	@ (8002028 <PS2X_Reader+0x250>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d10c      	bne.n	8001eb6 <PS2X_Reader+0xde>
				ps2.ps2YPos = (ps2.gain[0]*10)+ps2.gain[1];
 8001e9c:	4b62      	ldr	r3, [pc, #392]	@ (8002028 <PS2X_Reader+0x250>)
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002028 <PS2X_Reader+0x250>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8002028 <PS2X_Reader+0x250>)
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	e014      	b.n	8001ee0 <PS2X_Reader+0x108>
			}
			else if (ps2.digit == 3){
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002028 <PS2X_Reader+0x250>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d110      	bne.n	8001ee0 <PS2X_Reader+0x108>
				ps2.ps2YPos = (ps2.gain[0]*100)+(ps2.gain[1]*10)+ps2.gain[2];
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8002028 <PS2X_Reader+0x250>)
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2264      	movs	r2, #100	@ 0x64
 8001ec4:	fb02 f103 	mul.w	r1, r2, r3
 8001ec8:	4b57      	ldr	r3, [pc, #348]	@ (8002028 <PS2X_Reader+0x250>)
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	18ca      	adds	r2, r1, r3
 8001ed6:	4b54      	ldr	r3, [pc, #336]	@ (8002028 <PS2X_Reader+0x250>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a52      	ldr	r2, [pc, #328]	@ (8002028 <PS2X_Reader+0x250>)
 8001ede:	6213      	str	r3, [r2, #32]
//				  ps2.ps2XPos = (ps2.H[0]*100)+(ps2.H[1]*10)+ps2.H[2];
//			  }
		}

		//Convert from 0 - 255 to -128 - 128
		ps2.ps2Y = ps2.ps2YPos - 132;
 8001ee0:	4b51      	ldr	r3, [pc, #324]	@ (8002028 <PS2X_Reader+0x250>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	3b84      	subs	r3, #132	@ 0x84
 8001ee6:	4a50      	ldr	r2, [pc, #320]	@ (8002028 <PS2X_Reader+0x250>)
 8001ee8:	61d3      	str	r3, [r2, #28]
//		ps2.ps2X = ps2.ps2XPos - 132;

		//Generate PWM
		ps2.pwmOut = (ps2.ps2Y/ 128.0)*300;
 8001eea:	4b4f      	ldr	r3, [pc, #316]	@ (8002028 <PS2X_Reader+0x250>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fae4 	bl	80004bc <__aeabi_i2d>
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8002030 <PS2X_Reader+0x258>)
 8001efa:	f7fe fc73 	bl	80007e4 <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	a346      	add	r3, pc, #280	@ (adr r3, 8002020 <PS2X_Reader+0x248>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb40 	bl	8000590 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fd4c 	bl	80009b4 <__aeabi_d2iz>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4a42      	ldr	r2, [pc, #264]	@ (8002028 <PS2X_Reader+0x250>)
 8001f20:	6693      	str	r3, [r2, #104]	@ 0x68
		if (ps2.pwmOut > 300)
 8001f22:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <PS2X_Reader+0x250>)
 8001f24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f26:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001f2a:	dd03      	ble.n	8001f34 <PS2X_Reader+0x15c>
		{
			ps2.pwmOut = 300;
 8001f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002028 <PS2X_Reader+0x250>)
 8001f2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f32:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < -300)
 8001f34:	4b3c      	ldr	r3, [pc, #240]	@ (8002028 <PS2X_Reader+0x250>)
 8001f36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f38:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8001f3c:	da02      	bge.n	8001f44 <PS2X_Reader+0x16c>
		{
			ps2.pwmOut = -300;
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002028 <PS2X_Reader+0x250>)
 8001f40:	4a3c      	ldr	r2, [pc, #240]	@ (8002034 <PS2X_Reader+0x25c>)
 8001f42:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < 0)
 8001f44:	4b38      	ldr	r3, [pc, #224]	@ (8002028 <PS2X_Reader+0x250>)
 8001f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da09      	bge.n	8001f60 <PS2X_Reader+0x188>
		{
			ps2.pwmOut = ps2.pwmOut * -1;
 8001f4c:	4b36      	ldr	r3, [pc, #216]	@ (8002028 <PS2X_Reader+0x250>)
 8001f4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f50:	425b      	negs	r3, r3
 8001f52:	4a35      	ldr	r2, [pc, #212]	@ (8002028 <PS2X_Reader+0x250>)
 8001f54:	6693      	str	r3, [r2, #104]	@ 0x68
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);		//PWM out Backward
 8001f56:	4b38      	ldr	r3, [pc, #224]	@ (8002038 <PS2X_Reader+0x260>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f5e:	e008      	b.n	8001f72 <PS2X_Reader+0x19a>
		}
		else if (ps2.pwmOut > 0)
 8001f60:	4b31      	ldr	r3, [pc, #196]	@ (8002028 <PS2X_Reader+0x250>)
 8001f62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	dd04      	ble.n	8001f72 <PS2X_Reader+0x19a>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);		//PWM out forward
 8001f68:	4b33      	ldr	r3, [pc, #204]	@ (8002038 <PS2X_Reader+0x260>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f70:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
 8001f72:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <PS2X_Reader+0x250>)
 8001f74:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001f76:	4b30      	ldr	r3, [pc, #192]	@ (8002038 <PS2X_Reader+0x260>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f7c:	e0ba      	b.n	80020f4 <PS2X_Reader+0x31c>
	}

	//--- Mode Button ---//
	else if (ps2.mode == 2)
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002028 <PS2X_Reader+0x250>)
 8001f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	f040 80b6 	bne.w	80020f4 <PS2X_Reader+0x31c>
	{
		ps2.ps2Y = 0;
 8001f88:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <PS2X_Reader+0x250>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
//		ps2.ps2X = 0;
		//Keys Map
		static uint32_t timestamp =0;
		if(timestamp < HAL_GetTick())
 8001f8e:	f000 fc19 	bl	80027c4 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b29      	ldr	r3, [pc, #164]	@ (800203c <PS2X_Reader+0x264>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d908      	bls.n	8001fae <PS2X_Reader+0x1d6>
		{
			timestamp = HAL_GetTick()+100;
 8001f9c:	f000 fc12 	bl	80027c4 <HAL_GetTick>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	3364      	adds	r3, #100	@ 0x64
 8001fa4:	4a25      	ldr	r2, [pc, #148]	@ (800203c <PS2X_Reader+0x264>)
 8001fa6:	6013      	str	r3, [r2, #0]
			ps2.ps2RX[0] = 0;
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <PS2X_Reader+0x250>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
		}
		for (int i =0;i<6;i++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	e054      	b.n	800205e <PS2X_Reader+0x286>
		{
			if (ps2.ps2RX[0] == 0)
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002028 <PS2X_Reader+0x250>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d123      	bne.n	8002004 <PS2X_Reader+0x22c>
			{
				//Left
				ps2.l[0] = 0; //w
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <PS2X_Reader+0x250>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	651a      	str	r2, [r3, #80]	@ 0x50
				ps2.l[1] = 0;	//a
 8001fc2:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <PS2X_Reader+0x250>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
				ps2.l[2] = 0;	//s
 8001fc8:	4b17      	ldr	r3, [pc, #92]	@ (8002028 <PS2X_Reader+0x250>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	659a      	str	r2, [r3, #88]	@ 0x58
				ps2.l[3] = 0;	//d
 8001fce:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <PS2X_Reader+0x250>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
				ps2.l[4] = 0;	//l1
 8001fd4:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <PS2X_Reader+0x250>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	661a      	str	r2, [r3, #96]	@ 0x60
				ps2.l[5] = 0;	//l2
 8001fda:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <PS2X_Reader+0x250>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	665a      	str	r2, [r3, #100]	@ 0x64
				//Right
				ps2.r[0] = 0;	//w
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <PS2X_Reader+0x250>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	639a      	str	r2, [r3, #56]	@ 0x38
				ps2.r[1] = 0;	//a
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <PS2X_Reader+0x250>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	63da      	str	r2, [r3, #60]	@ 0x3c
				ps2.r[2] = 0;	//s
 8001fec:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <PS2X_Reader+0x250>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	641a      	str	r2, [r3, #64]	@ 0x40
				ps2.r[3] = 0;	//d
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <PS2X_Reader+0x250>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	645a      	str	r2, [r3, #68]	@ 0x44
				ps2.r[4] = 0;	//r1
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <PS2X_Reader+0x250>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	649a      	str	r2, [r3, #72]	@ 0x48
				ps2.r[5] = 0;	//r2
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <PS2X_Reader+0x250>)
 8002000:	2200      	movs	r2, #0
 8002002:	64da      	str	r2, [r3, #76]	@ 0x4c
			}

			if (ps2.ps2RX[0] - 65 == i)
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <PS2X_Reader+0x250>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3b41      	subs	r3, #65	@ 0x41
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	d117      	bne.n	8002040 <PS2X_Reader+0x268>
			{
				ps2.l[i] = 1;
 8002010:	4a05      	ldr	r2, [pc, #20]	@ (8002028 <PS2X_Reader+0x250>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3314      	adds	r3, #20
 8002016:	2101      	movs	r1, #1
 8002018:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800201c:	e01c      	b.n	8002058 <PS2X_Reader+0x280>
 800201e:	bf00      	nop
 8002020:	00000000 	.word	0x00000000
 8002024:	4072c000 	.word	0x4072c000
 8002028:	20000f60 	.word	0x20000f60
 800202c:	20000200 	.word	0x20000200
 8002030:	40600000 	.word	0x40600000
 8002034:	fffffed4 	.word	0xfffffed4
 8002038:	200009d8 	.word	0x200009d8
 800203c:	20000fe0 	.word	0x20000fe0
			}

			else if (ps2.ps2RX[0] - 73 == i)
 8002040:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <PS2X_Reader+0x390>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	3b49      	subs	r3, #73	@ 0x49
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	d105      	bne.n	8002058 <PS2X_Reader+0x280>
			{
				ps2.r[i] = 1;
 800204c:	4a46      	ldr	r2, [pc, #280]	@ (8002168 <PS2X_Reader+0x390>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	330e      	adds	r3, #14
 8002052:	2101      	movs	r1, #1
 8002054:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i =0;i<6;i++)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3301      	adds	r3, #1
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b05      	cmp	r3, #5
 8002062:	dda7      	ble.n	8001fb4 <PS2X_Reader+0x1dc>
			}
		}

		//Generate PWM
		if (ps2.l[2] == 1)
 8002064:	4b40      	ldr	r3, [pc, #256]	@ (8002168 <PS2X_Reader+0x390>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	2b01      	cmp	r3, #1
 800206a:	d10e      	bne.n	800208a <PS2X_Reader+0x2b2>
		{
			ps2.pwmOut = ps2.pwmOut - count;	// - PWM with x
 800206c:	4b3e      	ldr	r3, [pc, #248]	@ (8002168 <PS2X_Reader+0x390>)
 800206e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002070:	4b3e      	ldr	r3, [pc, #248]	@ (800216c <PS2X_Reader+0x394>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	4a3c      	ldr	r2, [pc, #240]	@ (8002168 <PS2X_Reader+0x390>)
 8002078:	6693      	str	r3, [r2, #104]	@ 0x68
			if (ps2.pwmOut < 0)
 800207a:	4b3b      	ldr	r3, [pc, #236]	@ (8002168 <PS2X_Reader+0x390>)
 800207c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800207e:	2b00      	cmp	r3, #0
 8002080:	da38      	bge.n	80020f4 <PS2X_Reader+0x31c>
			{
				ps2.pwmOut = 0;		// to make pwm1 >= 0
 8002082:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <PS2X_Reader+0x390>)
 8002084:	2200      	movs	r2, #0
 8002086:	669a      	str	r2, [r3, #104]	@ 0x68
 8002088:	e034      	b.n	80020f4 <PS2X_Reader+0x31c>
			}
		}
		else if (ps2.l[3] == 1)
 800208a:	4b37      	ldr	r3, [pc, #220]	@ (8002168 <PS2X_Reader+0x390>)
 800208c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <PS2X_Reader+0x2ca>
		{
			ps2.pwmOut = ps2.pwmOut + count;	// + PWM with count
 8002092:	4b35      	ldr	r3, [pc, #212]	@ (8002168 <PS2X_Reader+0x390>)
 8002094:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002096:	4b35      	ldr	r3, [pc, #212]	@ (800216c <PS2X_Reader+0x394>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	4a32      	ldr	r2, [pc, #200]	@ (8002168 <PS2X_Reader+0x390>)
 800209e:	6693      	str	r3, [r2, #104]	@ 0x68
 80020a0:	e028      	b.n	80020f4 <PS2X_Reader+0x31c>
		}
		else if (ps2.l[0] == 1)		//Press down button(l1) to PWM out forward
 80020a2:	4b31      	ldr	r3, [pc, #196]	@ (8002168 <PS2X_Reader+0x390>)
 80020a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d109      	bne.n	80020be <PS2X_Reader+0x2e6>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
 80020aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002168 <PS2X_Reader+0x390>)
 80020ac:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80020ae:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <PS2X_Reader+0x398>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80020b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <PS2X_Reader+0x398>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2200      	movs	r2, #0
 80020ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80020bc:	e01a      	b.n	80020f4 <PS2X_Reader+0x31c>
		}
		else if (ps2.l[1] == 1)		//Press down button(l1) to PWM out backward
 80020be:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <PS2X_Reader+0x390>)
 80020c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d10a      	bne.n	80020dc <PS2X_Reader+0x304>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
 80020c6:	4b28      	ldr	r3, [pc, #160]	@ (8002168 <PS2X_Reader+0x390>)
 80020c8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80020ca:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <PS2X_Reader+0x398>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
 80020d0:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <PS2X_Reader+0x398>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80020da:	e00b      	b.n	80020f4 <PS2X_Reader+0x31c>
		}
		else if (ps2.r[1] == 1)		//Press X(r1) to stop
 80020dc:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <PS2X_Reader+0x390>)
 80020de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d107      	bne.n	80020f4 <PS2X_Reader+0x31c>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);		//Stop
 80020e4:	4b22      	ldr	r3, [pc, #136]	@ (8002170 <PS2X_Reader+0x398>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80020ec:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <PS2X_Reader+0x398>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2200      	movs	r2, #0
 80020f2:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	//Floor Seclection
	if(base.ShelveMode == 1){
 80020f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <PS2X_Reader+0x39c>)
 80020f6:	8b1b      	ldrh	r3, [r3, #24]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d131      	bne.n	8002160 <PS2X_Reader+0x388>
		if (ps2.ps2RX[0] == 71){
 80020fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <PS2X_Reader+0x390>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b47      	cmp	r3, #71	@ 0x47
 8002102:	d10d      	bne.n	8002120 <PS2X_Reader+0x348>
			base.Shelve[ps2.counts] = 1+ps2.counts;
 8002104:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <PS2X_Reader+0x390>)
 8002106:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <PS2X_Reader+0x390>)
 800210a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800210c:	3201      	adds	r2, #1
 800210e:	4919      	ldr	r1, [pc, #100]	@ (8002174 <PS2X_Reader+0x39c>)
 8002110:	3306      	adds	r3, #6
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	605a      	str	r2, [r3, #4]
			ps2.counts=  +1;
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <PS2X_Reader+0x390>)
 800211a:	2201      	movs	r2, #1
 800211c:	675a      	str	r2, [r3, #116]	@ 0x74
 800211e:	e011      	b.n	8002144 <PS2X_Reader+0x36c>
		}
		else if (ps2.ps2RX[0] == 73){
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <PS2X_Reader+0x390>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b49      	cmp	r3, #73	@ 0x49
 8002126:	d10d      	bne.n	8002144 <PS2X_Reader+0x36c>
			base.Shelve[ps2.counts-1] = 0;
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <PS2X_Reader+0x390>)
 800212a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800212c:	3b01      	subs	r3, #1
 800212e:	4a11      	ldr	r2, [pc, #68]	@ (8002174 <PS2X_Reader+0x39c>)
 8002130:	3306      	adds	r3, #6
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	2200      	movs	r2, #0
 8002138:	605a      	str	r2, [r3, #4]
			ps2.counts = ps2.counts -1;
 800213a:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <PS2X_Reader+0x390>)
 800213c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800213e:	3b01      	subs	r3, #1
 8002140:	4a09      	ldr	r2, [pc, #36]	@ (8002168 <PS2X_Reader+0x390>)
 8002142:	6753      	str	r3, [r2, #116]	@ 0x74
		}

		if (ps2.ps2RX[0] == 72 && base.ShelveMode == 1){
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <PS2X_Reader+0x390>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b48      	cmp	r3, #72	@ 0x48
 800214a:	d109      	bne.n	8002160 <PS2X_Reader+0x388>
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <PS2X_Reader+0x39c>)
 800214e:	8b1b      	ldrh	r3, [r3, #24]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <PS2X_Reader+0x388>
			base.ShelveMode = 0;
 8002154:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <PS2X_Reader+0x39c>)
 8002156:	2200      	movs	r2, #0
 8002158:	831a      	strh	r2, [r3, #24]
			registerFrame[0x10].U16 = 0b0000;
 800215a:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <PS2X_Reader+0x3a0>)
 800215c:	2200      	movs	r2, #0
 800215e:	841a      	strh	r2, [r3, #32]
		}
	}

}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000f60 	.word	0x20000f60
 800216c:	20000228 	.word	0x20000228
 8002170:	200009d8 	.word	0x200009d8
 8002174:	200008c0 	.word	0x200008c0
 8002178:	20000730 	.word	0x20000730

0800217c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002180:	b672      	cpsid	i
}
 8002182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <Error_Handler+0x8>

08002188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <HAL_MspInit+0x44>)
 8002190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002192:	4a0e      	ldr	r2, [pc, #56]	@ (80021cc <HAL_MspInit+0x44>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6613      	str	r3, [r2, #96]	@ 0x60
 800219a:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <HAL_MspInit+0x44>)
 800219c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <HAL_MspInit+0x44>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	4a08      	ldr	r2, [pc, #32]	@ (80021cc <HAL_MspInit+0x44>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_MspInit+0x44>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021be:	f001 f9b1 	bl	8003524 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000

080021d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	@ 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f0:	d128      	bne.n	8002244 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021f2:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_TIM_Encoder_MspInit+0x7c>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f6:	4a15      	ldr	r2, [pc, #84]	@ (800224c <HAL_TIM_Encoder_MspInit+0x7c>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <HAL_TIM_Encoder_MspInit+0x7c>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <HAL_TIM_Encoder_MspInit+0x7c>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	4a0f      	ldr	r2, [pc, #60]	@ (800224c <HAL_TIM_Encoder_MspInit+0x7c>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <HAL_TIM_Encoder_MspInit+0x7c>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002222:	2303      	movs	r3, #3
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002232:	2301      	movs	r3, #1
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002240:	f000 ff0e 	bl	8003060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	@ 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000

08002250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a30      	ldr	r2, [pc, #192]	@ (8002320 <HAL_TIM_Base_MspInit+0xd0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10c      	bne.n	800227c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002262:	4b30      	ldr	r3, [pc, #192]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002266:	4a2f      	ldr	r2, [pc, #188]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	6593      	str	r3, [r2, #88]	@ 0x58
 800226e:	4b2d      	ldr	r3, [pc, #180]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800227a:	e04c      	b.n	8002316 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a29      	ldr	r2, [pc, #164]	@ (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d114      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002286:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228a:	4a26      	ldr	r2, [pc, #152]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	6593      	str	r3, [r2, #88]	@ 0x58
 8002292:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	201e      	movs	r0, #30
 80022a4:	f000 fb75 	bl	8002992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022a8:	201e      	movs	r0, #30
 80022aa:	f000 fb8c 	bl	80029c6 <HAL_NVIC_EnableIRQ>
}
 80022ae:	e032      	b.n	8002316 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1d      	ldr	r2, [pc, #116]	@ (800232c <HAL_TIM_Base_MspInit+0xdc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d114      	bne.n	80022e4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022be:	4a19      	ldr	r2, [pc, #100]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 80022c0:	f043 0308 	orr.w	r3, r3, #8
 80022c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c6:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	2032      	movs	r0, #50	@ 0x32
 80022d8:	f000 fb5b 	bl	8002992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80022dc:	2032      	movs	r0, #50	@ 0x32
 80022de:	f000 fb72 	bl	80029c6 <HAL_NVIC_EnableIRQ>
}
 80022e2:	e018      	b.n	8002316 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a11      	ldr	r2, [pc, #68]	@ (8002330 <HAL_TIM_Base_MspInit+0xe0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d113      	bne.n	8002316 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 80022fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2019      	movs	r0, #25
 800230c:	f000 fb41 	bl	8002992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002310:	2019      	movs	r0, #25
 8002312:	f000 fb58 	bl	80029c6 <HAL_NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40000400 	.word	0x40000400
 8002324:	40021000 	.word	0x40021000
 8002328:	40000800 	.word	0x40000800
 800232c:	40000c00 	.word	0x40000c00
 8002330:	40014400 	.word	0x40014400

08002334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a11      	ldr	r2, [pc, #68]	@ (8002398 <HAL_TIM_MspPostInit+0x64>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d11b      	bne.n	800238e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	4b11      	ldr	r3, [pc, #68]	@ (800239c <HAL_TIM_MspPostInit+0x68>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235a:	4a10      	ldr	r2, [pc, #64]	@ (800239c <HAL_TIM_MspPostInit+0x68>)
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002362:	4b0e      	ldr	r3, [pc, #56]	@ (800239c <HAL_TIM_MspPostInit+0x68>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800236e:	2330      	movs	r3, #48	@ 0x30
 8002370:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800237e:	2302      	movs	r3, #2
 8002380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	4619      	mov	r1, r3
 8002388:	4805      	ldr	r0, [pc, #20]	@ (80023a0 <HAL_TIM_MspPostInit+0x6c>)
 800238a:	f000 fe69 	bl	8003060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800238e:	bf00      	nop
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40000400 	.word	0x40000400
 800239c:	40021000 	.word	0x40021000
 80023a0:	48000400 	.word	0x48000400

080023a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b0a0      	sub	sp, #128	@ 0x80
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023bc:	f107 0318 	add.w	r3, r7, #24
 80023c0:	2254      	movs	r2, #84	@ 0x54
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f005 fe43 	bl	8008050 <memset>
  if(huart->Instance==UART4)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a6b      	ldr	r2, [pc, #428]	@ (800257c <HAL_UART_MspInit+0x1d8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d137      	bne.n	8002444 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80023d4:	2308      	movs	r3, #8
 80023d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023dc:	f107 0318 	add.w	r3, r7, #24
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 fddd 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023ec:	f7ff fec6 	bl	800217c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80023f0:	4b63      	ldr	r3, [pc, #396]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 80023f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f4:	4a62      	ldr	r2, [pc, #392]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 80023f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80023fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80023fc:	4b60      	ldr	r3, [pc, #384]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002400:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002408:	4b5d      	ldr	r3, [pc, #372]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 800240a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240c:	4a5c      	ldr	r2, [pc, #368]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002414:	4b5a      	ldr	r3, [pc, #360]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 8002416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002420:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002424:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002432:	2305      	movs	r3, #5
 8002434:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002436:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800243a:	4619      	mov	r1, r3
 800243c:	4851      	ldr	r0, [pc, #324]	@ (8002584 <HAL_UART_MspInit+0x1e0>)
 800243e:	f000 fe0f 	bl	8003060 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002442:	e097      	b.n	8002574 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a4f      	ldr	r2, [pc, #316]	@ (8002588 <HAL_UART_MspInit+0x1e4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	f040 8092 	bne.w	8002574 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002450:	2302      	movs	r3, #2
 8002452:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002458:	f107 0318 	add.w	r3, r7, #24
 800245c:	4618      	mov	r0, r3
 800245e:	f001 fd9f 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002468:	f7ff fe88 	bl	800217c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800246c:	4b44      	ldr	r3, [pc, #272]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002470:	4a43      	ldr	r2, [pc, #268]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 8002472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002476:	6593      	str	r3, [r2, #88]	@ 0x58
 8002478:	4b41      	ldr	r3, [pc, #260]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002484:	4b3e      	ldr	r3, [pc, #248]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 8002486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002488:	4a3d      	ldr	r2, [pc, #244]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002490:	4b3b      	ldr	r3, [pc, #236]	@ (8002580 <HAL_UART_MspInit+0x1dc>)
 8002492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800249c:	230c      	movs	r3, #12
 800249e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ac:	2307      	movs	r3, #7
 80024ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80024b4:	4619      	mov	r1, r3
 80024b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ba:	f000 fdd1 	bl	8003060 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80024be:	4b33      	ldr	r3, [pc, #204]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 80024c0:	4a33      	ldr	r2, [pc, #204]	@ (8002590 <HAL_UART_MspInit+0x1ec>)
 80024c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80024c4:	4b31      	ldr	r3, [pc, #196]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 80024c6:	221b      	movs	r2, #27
 80024c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ca:	4b30      	ldr	r3, [pc, #192]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 80024cc:	2210      	movs	r2, #16
 80024ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d0:	4b2e      	ldr	r3, [pc, #184]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024d6:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 80024d8:	2280      	movs	r2, #128	@ 0x80
 80024da:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024dc:	4b2b      	ldr	r3, [pc, #172]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e2:	4b2a      	ldr	r3, [pc, #168]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024e8:	4b28      	ldr	r3, [pc, #160]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024ee:	4b27      	ldr	r3, [pc, #156]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024f4:	4825      	ldr	r0, [pc, #148]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 80024f6:	f000 fa81 	bl	80029fc <HAL_DMA_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_MspInit+0x160>
      Error_Handler();
 8002500:	f7ff fe3c 	bl	800217c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a21      	ldr	r2, [pc, #132]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 8002508:	67da      	str	r2, [r3, #124]	@ 0x7c
 800250a:	4a20      	ldr	r2, [pc, #128]	@ (800258c <HAL_UART_MspInit+0x1e8>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8002510:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 8002512:	4a21      	ldr	r2, [pc, #132]	@ (8002598 <HAL_UART_MspInit+0x1f4>)
 8002514:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002516:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 8002518:	221a      	movs	r2, #26
 800251a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800251c:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002522:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002528:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 800252a:	2280      	movs	r2, #128	@ 0x80
 800252c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800252e:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 8002530:	2200      	movs	r2, #0
 8002532:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 8002536:	2200      	movs	r2, #0
 8002538:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800253a:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 800253c:	2200      	movs	r2, #0
 800253e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 8002542:	2200      	movs	r2, #0
 8002544:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002546:	4813      	ldr	r0, [pc, #76]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 8002548:	f000 fa58 	bl	80029fc <HAL_DMA_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8002552:	f7ff fe13 	bl	800217c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a0e      	ldr	r2, [pc, #56]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 800255a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800255e:	4a0d      	ldr	r2, [pc, #52]	@ (8002594 <HAL_UART_MspInit+0x1f0>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002564:	2200      	movs	r2, #0
 8002566:	2100      	movs	r1, #0
 8002568:	2026      	movs	r0, #38	@ 0x26
 800256a:	f000 fa12 	bl	8002992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800256e:	2026      	movs	r0, #38	@ 0x26
 8002570:	f000 fa29 	bl	80029c6 <HAL_NVIC_EnableIRQ>
}
 8002574:	bf00      	nop
 8002576:	3780      	adds	r7, #128	@ 0x80
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40004c00 	.word	0x40004c00
 8002580:	40021000 	.word	0x40021000
 8002584:	48000800 	.word	0x48000800
 8002588:	40004400 	.word	0x40004400
 800258c:	20000ea0 	.word	0x20000ea0
 8002590:	40020008 	.word	0x40020008
 8002594:	20000f00 	.word	0x20000f00
 8002598:	4002001c 	.word	0x4002001c

0800259c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a0:	bf00      	nop
 80025a2:	e7fd      	b.n	80025a0 <NMI_Handler+0x4>

080025a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <HardFault_Handler+0x4>

080025ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <MemManage_Handler+0x4>

080025b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <BusFault_Handler+0x4>

080025bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <UsageFault_Handler+0x4>

080025c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f2:	f000 f8d5 	bl	80027a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002600:	4802      	ldr	r0, [pc, #8]	@ (800260c <DMA1_Channel1_IRQHandler+0x10>)
 8002602:	f000 fbde 	bl	8002dc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000ea0 	.word	0x20000ea0

08002610 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002614:	4802      	ldr	r0, [pc, #8]	@ (8002620 <DMA1_Channel2_IRQHandler+0x10>)
 8002616:	f000 fbd4 	bl	8002dc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000f00 	.word	0x20000f00

08002624 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002628:	4802      	ldr	r0, [pc, #8]	@ (8002634 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800262a:	f002 f9fb 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000c3c 	.word	0x20000c3c

08002638 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800263c:	4802      	ldr	r0, [pc, #8]	@ (8002648 <TIM4_IRQHandler+0x10>)
 800263e:	f002 f9f1 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000aa4 	.word	0x20000aa4

0800264c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002650:	4802      	ldr	r0, [pc, #8]	@ (800265c <USART2_IRQHandler+0x10>)
 8002652:	f003 ffef 	bl	8006634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000dd4 	.word	0x20000dd4

08002660 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002664:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002668:	f000 fe94 	bl	8003394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}

08002670 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <TIM5_IRQHandler+0x10>)
 8002676:	f002 f9d5 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000b70 	.word	0x20000b70

08002684 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <SystemInit+0x20>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	4a05      	ldr	r2, [pc, #20]	@ (80026a4 <SystemInit+0x20>)
 8002690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026a8:	480d      	ldr	r0, [pc, #52]	@ (80026e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026ac:	f7ff ffea 	bl	8002684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b0:	480c      	ldr	r0, [pc, #48]	@ (80026e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80026b2:	490d      	ldr	r1, [pc, #52]	@ (80026e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026b4:	4a0d      	ldr	r2, [pc, #52]	@ (80026ec <LoopForever+0xe>)
  movs r3, #0
 80026b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80026b8:	e002      	b.n	80026c0 <LoopCopyDataInit>

080026ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026be:	3304      	adds	r3, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c4:	d3f9      	bcc.n	80026ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026c8:	4c0a      	ldr	r4, [pc, #40]	@ (80026f4 <LoopForever+0x16>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026cc:	e001      	b.n	80026d2 <LoopFillZerobss>

080026ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d0:	3204      	adds	r2, #4

080026d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d4:	d3fb      	bcc.n	80026ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026d6:	f005 fcc3 	bl	8008060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026da:	f7fe ff5d 	bl	8001598 <main>

080026de <LoopForever>:

LoopForever:
    b LoopForever
 80026de:	e7fe      	b.n	80026de <LoopForever>
  ldr   r0, =_estack
 80026e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e8:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 80026ec:	0800812c 	.word	0x0800812c
  ldr r2, =_sbss
 80026f0:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80026f4:	20000fe8 	.word	0x20000fe8

080026f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026f8:	e7fe      	b.n	80026f8 <ADC1_2_IRQHandler>

080026fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002704:	2003      	movs	r0, #3
 8002706:	f000 f939 	bl	800297c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800270a:	2000      	movs	r0, #0
 800270c:	f000 f80e 	bl	800272c <HAL_InitTick>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	71fb      	strb	r3, [r7, #7]
 800271a:	e001      	b.n	8002720 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800271c:	f7ff fd34 	bl	8002188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002720:	79fb      	ldrb	r3, [r7, #7]

}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <HAL_InitTick+0x68>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d022      	beq.n	8002786 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002740:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <HAL_InitTick+0x6c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <HAL_InitTick+0x68>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800274c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f944 	bl	80029e2 <HAL_SYSTICK_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10f      	bne.n	8002780 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b0f      	cmp	r3, #15
 8002764:	d809      	bhi.n	800277a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002766:	2200      	movs	r2, #0
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	f04f 30ff 	mov.w	r0, #4294967295
 800276e:	f000 f910 	bl	8002992 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002772:	4a0a      	ldr	r2, [pc, #40]	@ (800279c <HAL_InitTick+0x70>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e007      	b.n	800278a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e004      	b.n	800278a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e001      	b.n	800278a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000234 	.word	0x20000234
 8002798:	2000022c 	.word	0x2000022c
 800279c:	20000230 	.word	0x20000230

080027a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <HAL_IncTick+0x1c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_IncTick+0x20>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4413      	add	r3, r2
 80027ae:	4a03      	ldr	r2, [pc, #12]	@ (80027bc <HAL_IncTick+0x1c>)
 80027b0:	6013      	str	r3, [r2, #0]
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	20000fe4 	.word	0x20000fe4
 80027c0:	20000234 	.word	0x20000234

080027c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return uwTick;
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_GetTick+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000fe4 	.word	0x20000fe4

080027dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280e:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60d3      	str	r3, [r2, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	@ (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4907      	ldr	r1, [pc, #28]	@ (8002878 <__NVIC_EnableIRQ+0x38>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db0a      	blt.n	80028a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	490c      	ldr	r1, [pc, #48]	@ (80028c8 <__NVIC_SetPriority+0x4c>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	440b      	add	r3, r1
 80028a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a4:	e00a      	b.n	80028bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4908      	ldr	r1, [pc, #32]	@ (80028cc <__NVIC_SetPriority+0x50>)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3b04      	subs	r3, #4
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	440b      	add	r3, r1
 80028ba:	761a      	strb	r2, [r3, #24]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	@ 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f1c3 0307 	rsb	r3, r3, #7
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	bf28      	it	cs
 80028ee:	2304      	movcs	r3, #4
 80028f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d902      	bls.n	8002900 <NVIC_EncodePriority+0x30>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3b03      	subs	r3, #3
 80028fe:	e000      	b.n	8002902 <NVIC_EncodePriority+0x32>
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	f04f 32ff 	mov.w	r2, #4294967295
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	401a      	ands	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002918:	f04f 31ff 	mov.w	r1, #4294967295
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	43d9      	mvns	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	4313      	orrs	r3, r2
         );
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	@ 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002948:	d301      	bcc.n	800294e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294a:	2301      	movs	r3, #1
 800294c:	e00f      	b.n	800296e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294e:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <SysTick_Config+0x40>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002956:	210f      	movs	r1, #15
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	f7ff ff8e 	bl	800287c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <SysTick_Config+0x40>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002966:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <SysTick_Config+0x40>)
 8002968:	2207      	movs	r2, #7
 800296a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000e010 	.word	0xe000e010

0800297c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff29 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029a0:	f7ff ff40 	bl	8002824 <__NVIC_GetPriorityGrouping>
 80029a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	6978      	ldr	r0, [r7, #20]
 80029ac:	f7ff ff90 	bl	80028d0 <NVIC_EncodePriority>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff5f 	bl	800287c <__NVIC_SetPriority>
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff33 	bl	8002840 <__NVIC_EnableIRQ>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff ffa4 	bl	8002938 <SysTick_Config>
 80029f0:	4603      	mov	r3, r0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e08d      	b.n	8002b2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b47      	ldr	r3, [pc, #284]	@ (8002b34 <HAL_DMA_Init+0x138>)
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d80f      	bhi.n	8002a3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4b45      	ldr	r3, [pc, #276]	@ (8002b38 <HAL_DMA_Init+0x13c>)
 8002a22:	4413      	add	r3, r2
 8002a24:	4a45      	ldr	r2, [pc, #276]	@ (8002b3c <HAL_DMA_Init+0x140>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	009a      	lsls	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a42      	ldr	r2, [pc, #264]	@ (8002b40 <HAL_DMA_Init+0x144>)
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a38:	e00e      	b.n	8002a58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b40      	ldr	r3, [pc, #256]	@ (8002b44 <HAL_DMA_Init+0x148>)
 8002a42:	4413      	add	r3, r2
 8002a44:	4a3d      	ldr	r2, [pc, #244]	@ (8002b3c <HAL_DMA_Init+0x140>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	009a      	lsls	r2, r3, #2
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a3c      	ldr	r2, [pc, #240]	@ (8002b48 <HAL_DMA_Init+0x14c>)
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa76 	bl	8002f9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ab8:	d102      	bne.n	8002ac0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ad4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_DMA_Init+0x104>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d80c      	bhi.n	8002b00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa96 	bl	8003018 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	e008      	b.n	8002b12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40020407 	.word	0x40020407
 8002b38:	bffdfff8 	.word	0xbffdfff8
 8002b3c:	cccccccd 	.word	0xcccccccd
 8002b40:	40020000 	.word	0x40020000
 8002b44:	bffdfbf8 	.word	0xbffdfbf8
 8002b48:	40020400 	.word	0x40020400

08002b4c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_DMA_Start_IT+0x20>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e066      	b.n	8002c3a <HAL_DMA_Start_IT+0xee>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d155      	bne.n	8002c2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0201 	bic.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f9bb 	bl	8002f20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 020e 	orr.w	r2, r2, #14
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e00f      	b.n	8002be4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0204 	bic.w	r2, r2, #4
 8002bd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 020a 	orr.w	r2, r2, #10
 8002be2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e005      	b.n	8002c38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d005      	beq.n	8002c66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e037      	b.n	8002cd6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 020e 	bic.w	r2, r2, #14
 8002c74:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c84:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f003 021f 	and.w	r2, r3, #31
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002cb2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00c      	beq.n	8002cd6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002cd4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d00d      	beq.n	8002d28 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	e047      	b.n	8002db8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 020e 	bic.w	r2, r2, #14
 8002d36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0201 	bic.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00c      	beq.n	8002d98 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
    }
  }
  return status;
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2204      	movs	r2, #4
 8002de4:	409a      	lsls	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d026      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x7a>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d021      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d107      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0204 	bic.w	r2, r2, #4
 8002e14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	f003 021f 	and.w	r2, r3, #31
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	2104      	movs	r1, #4
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d071      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e3a:	e06c      	b.n	8002f16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2202      	movs	r2, #2
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d02e      	beq.n	8002eae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d029      	beq.n	8002eae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 020a 	bic.w	r2, r2, #10
 8002e76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d038      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002eac:	e033      	b.n	8002f16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d02a      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d025      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 020e 	bic.w	r2, r2, #14
 8002eda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
}
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f36:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d004      	beq.n	8002f4a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f48:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	f003 021f 	and.w	r2, r3, #31
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d108      	bne.n	8002f80 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f7e:	e007      	b.n	8002f90 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	60da      	str	r2, [r3, #12]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b16      	ldr	r3, [pc, #88]	@ (8003004 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d802      	bhi.n	8002fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002fb0:	4b15      	ldr	r3, [pc, #84]	@ (8003008 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e001      	b.n	8002fba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002fb6:	4b15      	ldr	r3, [pc, #84]	@ (800300c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002fb8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3b08      	subs	r3, #8
 8002fc6:	4a12      	ldr	r2, [pc, #72]	@ (8003010 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	009a      	lsls	r2, r3, #2
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4413      	add	r3, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8003014 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002fe6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2201      	movs	r2, #1
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40020407 	.word	0x40020407
 8003008:	40020800 	.word	0x40020800
 800300c:	40020820 	.word	0x40020820
 8003010:	cccccccd 	.word	0xcccccccd
 8003014:	40020880 	.word	0x40020880

08003018 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	461a      	mov	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a08      	ldr	r2, [pc, #32]	@ (800305c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800303a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3b01      	subs	r3, #1
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2201      	movs	r2, #1
 8003046:	409a      	lsls	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	1000823f 	.word	0x1000823f
 800305c:	40020940 	.word	0x40020940

08003060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800306e:	e15a      	b.n	8003326 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2101      	movs	r1, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 814c 	beq.w	8003320 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d005      	beq.n	80030a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800309c:	2b02      	cmp	r3, #2
 800309e:	d130      	bne.n	8003102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030d6:	2201      	movs	r2, #1
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	f003 0201 	and.w	r2, r3, #1
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b03      	cmp	r3, #3
 800310c:	d017      	beq.n	800313e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	2203      	movs	r2, #3
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d123      	bne.n	8003192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	08da      	lsrs	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3208      	adds	r2, #8
 800318c:	6939      	ldr	r1, [r7, #16]
 800318e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0203 	and.w	r2, r3, #3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80a6 	beq.w	8003320 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003344 <HAL_GPIO_Init+0x2e4>)
 80031d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003344 <HAL_GPIO_Init+0x2e4>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6613      	str	r3, [r2, #96]	@ 0x60
 80031e0:	4b58      	ldr	r3, [pc, #352]	@ (8003344 <HAL_GPIO_Init+0x2e4>)
 80031e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ec:	4a56      	ldr	r2, [pc, #344]	@ (8003348 <HAL_GPIO_Init+0x2e8>)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003216:	d01f      	beq.n	8003258 <HAL_GPIO_Init+0x1f8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a4c      	ldr	r2, [pc, #304]	@ (800334c <HAL_GPIO_Init+0x2ec>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d019      	beq.n	8003254 <HAL_GPIO_Init+0x1f4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a4b      	ldr	r2, [pc, #300]	@ (8003350 <HAL_GPIO_Init+0x2f0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_GPIO_Init+0x1f0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a4a      	ldr	r2, [pc, #296]	@ (8003354 <HAL_GPIO_Init+0x2f4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00d      	beq.n	800324c <HAL_GPIO_Init+0x1ec>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a49      	ldr	r2, [pc, #292]	@ (8003358 <HAL_GPIO_Init+0x2f8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <HAL_GPIO_Init+0x1e8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a48      	ldr	r2, [pc, #288]	@ (800335c <HAL_GPIO_Init+0x2fc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d101      	bne.n	8003244 <HAL_GPIO_Init+0x1e4>
 8003240:	2305      	movs	r3, #5
 8003242:	e00a      	b.n	800325a <HAL_GPIO_Init+0x1fa>
 8003244:	2306      	movs	r3, #6
 8003246:	e008      	b.n	800325a <HAL_GPIO_Init+0x1fa>
 8003248:	2304      	movs	r3, #4
 800324a:	e006      	b.n	800325a <HAL_GPIO_Init+0x1fa>
 800324c:	2303      	movs	r3, #3
 800324e:	e004      	b.n	800325a <HAL_GPIO_Init+0x1fa>
 8003250:	2302      	movs	r3, #2
 8003252:	e002      	b.n	800325a <HAL_GPIO_Init+0x1fa>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_GPIO_Init+0x1fa>
 8003258:	2300      	movs	r3, #0
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	f002 0203 	and.w	r2, r2, #3
 8003260:	0092      	lsls	r2, r2, #2
 8003262:	4093      	lsls	r3, r2
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800326a:	4937      	ldr	r1, [pc, #220]	@ (8003348 <HAL_GPIO_Init+0x2e8>)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	3302      	adds	r3, #2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003278:	4b39      	ldr	r3, [pc, #228]	@ (8003360 <HAL_GPIO_Init+0x300>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800329c:	4a30      	ldr	r2, [pc, #192]	@ (8003360 <HAL_GPIO_Init+0x300>)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003360 <HAL_GPIO_Init+0x300>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032c6:	4a26      	ldr	r2, [pc, #152]	@ (8003360 <HAL_GPIO_Init+0x300>)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80032cc:	4b24      	ldr	r3, [pc, #144]	@ (8003360 <HAL_GPIO_Init+0x300>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003360 <HAL_GPIO_Init+0x300>)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <HAL_GPIO_Init+0x300>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800331a:	4a11      	ldr	r2, [pc, #68]	@ (8003360 <HAL_GPIO_Init+0x300>)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3301      	adds	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f ae9d 	bne.w	8003070 <HAL_GPIO_Init+0x10>
  }
}
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40021000 	.word	0x40021000
 8003348:	40010000 	.word	0x40010000
 800334c:	48000400 	.word	0x48000400
 8003350:	48000800 	.word	0x48000800
 8003354:	48000c00 	.word	0x48000c00
 8003358:	48001000 	.word	0x48001000
 800335c:	48001400 	.word	0x48001400
 8003360:	40010400 	.word	0x40010400

08003364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
 8003370:	4613      	mov	r3, r2
 8003372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003374:	787b      	ldrb	r3, [r7, #1]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003380:	e002      	b.n	8003388 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003382:	887a      	ldrh	r2, [r7, #2]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800339e:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d006      	beq.n	80033b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033aa:	4a05      	ldr	r2, [pc, #20]	@ (80033c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f806 	bl	80033c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40010400 	.word	0x40010400

080033c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d141      	bne.n	800346e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f6:	d131      	bne.n	800345c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f8:	4b47      	ldr	r3, [pc, #284]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033fe:	4a46      	ldr	r2, [pc, #280]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003404:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003408:	4b43      	ldr	r3, [pc, #268]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003410:	4a41      	ldr	r2, [pc, #260]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003412:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003416:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003418:	4b40      	ldr	r3, [pc, #256]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2232      	movs	r2, #50	@ 0x32
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	4a3f      	ldr	r2, [pc, #252]	@ (8003520 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	0c9b      	lsrs	r3, r3, #18
 800342a:	3301      	adds	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800342e:	e002      	b.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3b01      	subs	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003436:	4b38      	ldr	r3, [pc, #224]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003442:	d102      	bne.n	800344a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f2      	bne.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800344a:	4b33      	ldr	r3, [pc, #204]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003456:	d158      	bne.n	800350a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e057      	b.n	800350c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800345c:	4b2e      	ldr	r3, [pc, #184]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003462:	4a2d      	ldr	r2, [pc, #180]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800346c:	e04d      	b.n	800350a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003474:	d141      	bne.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003476:	4b28      	ldr	r3, [pc, #160]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003482:	d131      	bne.n	80034e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003484:	4b24      	ldr	r3, [pc, #144]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800348a:	4a23      	ldr	r2, [pc, #140]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003490:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003494:	4b20      	ldr	r3, [pc, #128]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800349c:	4a1e      	ldr	r2, [pc, #120]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034a4:	4b1d      	ldr	r3, [pc, #116]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2232      	movs	r2, #50	@ 0x32
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003520 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	0c9b      	lsrs	r3, r3, #18
 80034b6:	3301      	adds	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034ba:	e002      	b.n	80034c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3b01      	subs	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c2:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ce:	d102      	bne.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f2      	bne.n	80034bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034d6:	4b10      	ldr	r3, [pc, #64]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e2:	d112      	bne.n	800350a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e011      	b.n	800350c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034f8:	e007      	b.n	800350a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034fa:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003502:	4a05      	ldr	r2, [pc, #20]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003504:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003508:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40007000 	.word	0x40007000
 800351c:	2000022c 	.word	0x2000022c
 8003520:	431bde83 	.word	0x431bde83

08003524 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a04      	ldr	r2, [pc, #16]	@ (8003540 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800352e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003532:	6093      	str	r3, [r2, #8]
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40007000 	.word	0x40007000

08003544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e2fe      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d075      	beq.n	800364e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003562:	4b97      	ldr	r3, [pc, #604]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800356c:	4b94      	ldr	r3, [pc, #592]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b0c      	cmp	r3, #12
 800357a:	d102      	bne.n	8003582 <HAL_RCC_OscConfig+0x3e>
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2b03      	cmp	r3, #3
 8003580:	d002      	beq.n	8003588 <HAL_RCC_OscConfig+0x44>
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b08      	cmp	r3, #8
 8003586:	d10b      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	4b8d      	ldr	r3, [pc, #564]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d05b      	beq.n	800364c <HAL_RCC_OscConfig+0x108>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d157      	bne.n	800364c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e2d9      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x74>
 80035aa:	4b85      	ldr	r3, [pc, #532]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a84      	ldr	r2, [pc, #528]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e01d      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x98>
 80035c2:	4b7f      	ldr	r3, [pc, #508]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a7e      	ldr	r2, [pc, #504]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b7c      	ldr	r3, [pc, #496]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7b      	ldr	r2, [pc, #492]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035dc:	4b78      	ldr	r3, [pc, #480]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a77      	ldr	r2, [pc, #476]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b75      	ldr	r3, [pc, #468]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a74      	ldr	r2, [pc, #464]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7ff f8e2 	bl	80027c4 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7ff f8de 	bl	80027c4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	@ 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e29e      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003616:	4b6a      	ldr	r3, [pc, #424]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0xc0>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7ff f8ce 	bl	80027c4 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7ff f8ca 	bl	80027c4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	@ 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e28a      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363e:	4b60      	ldr	r3, [pc, #384]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0xe8>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d075      	beq.n	8003746 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365a:	4b59      	ldr	r3, [pc, #356]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003664:	4b56      	ldr	r3, [pc, #344]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b0c      	cmp	r3, #12
 8003672:	d102      	bne.n	800367a <HAL_RCC_OscConfig+0x136>
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d002      	beq.n	8003680 <HAL_RCC_OscConfig+0x13c>
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d11f      	bne.n	80036c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003680:	4b4f      	ldr	r3, [pc, #316]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_OscConfig+0x154>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e25d      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003698:	4b49      	ldr	r3, [pc, #292]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	4946      	ldr	r1, [pc, #280]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036ac:	4b45      	ldr	r3, [pc, #276]	@ (80037c4 <HAL_RCC_OscConfig+0x280>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff f83b 	bl	800272c <HAL_InitTick>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d043      	beq.n	8003744 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e249      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d023      	beq.n	8003710 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c8:	4b3d      	ldr	r3, [pc, #244]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3c      	ldr	r2, [pc, #240]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80036ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7ff f876 	bl	80027c4 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036dc:	f7ff f872 	bl	80027c4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e232      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ee:	4b34      	ldr	r3, [pc, #208]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fa:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	492d      	ldr	r1, [pc, #180]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
 800370e:	e01a      	b.n	8003746 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003710:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2a      	ldr	r2, [pc, #168]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 8003716:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800371a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7ff f852 	bl	80027c4 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003724:	f7ff f84e 	bl	80027c4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e20e      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003736:	4b22      	ldr	r3, [pc, #136]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x1e0>
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003744:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d041      	beq.n	80037d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01c      	beq.n	8003794 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375a:	4b19      	ldr	r3, [pc, #100]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 800375c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003760:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7ff f82b 	bl	80027c4 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003772:	f7ff f827 	bl	80027c4 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e1e7      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003784:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 8003786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0ef      	beq.n	8003772 <HAL_RCC_OscConfig+0x22e>
 8003792:	e020      	b.n	80037d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003794:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 8003796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800379a:	4a09      	ldr	r2, [pc, #36]	@ (80037c0 <HAL_RCC_OscConfig+0x27c>)
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7ff f80e 	bl	80027c4 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037aa:	e00d      	b.n	80037c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ac:	f7ff f80a 	bl	80027c4 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d906      	bls.n	80037c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e1ca      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	20000230 	.word	0x20000230
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c8:	4b8c      	ldr	r3, [pc, #560]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 80037ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1ea      	bne.n	80037ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80a6 	beq.w	8003930 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e4:	2300      	movs	r3, #0
 80037e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037e8:	4b84      	ldr	r3, [pc, #528]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_OscConfig+0x2b4>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x2b6>
 80037f8:	2300      	movs	r3, #0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fe:	4b7f      	ldr	r3, [pc, #508]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003802:	4a7e      	ldr	r2, [pc, #504]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003808:	6593      	str	r3, [r2, #88]	@ 0x58
 800380a:	4b7c      	ldr	r3, [pc, #496]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003816:	2301      	movs	r3, #1
 8003818:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381a:	4b79      	ldr	r3, [pc, #484]	@ (8003a00 <HAL_RCC_OscConfig+0x4bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d118      	bne.n	8003858 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003826:	4b76      	ldr	r3, [pc, #472]	@ (8003a00 <HAL_RCC_OscConfig+0x4bc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a75      	ldr	r2, [pc, #468]	@ (8003a00 <HAL_RCC_OscConfig+0x4bc>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003832:	f7fe ffc7 	bl	80027c4 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383a:	f7fe ffc3 	bl	80027c4 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e183      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800384c:	4b6c      	ldr	r3, [pc, #432]	@ (8003a00 <HAL_RCC_OscConfig+0x4bc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d108      	bne.n	8003872 <HAL_RCC_OscConfig+0x32e>
 8003860:	4b66      	ldr	r3, [pc, #408]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	4a65      	ldr	r2, [pc, #404]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003870:	e024      	b.n	80038bc <HAL_RCC_OscConfig+0x378>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b05      	cmp	r3, #5
 8003878:	d110      	bne.n	800389c <HAL_RCC_OscConfig+0x358>
 800387a:	4b60      	ldr	r3, [pc, #384]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003880:	4a5e      	ldr	r2, [pc, #376]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003882:	f043 0304 	orr.w	r3, r3, #4
 8003886:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800388a:	4b5c      	ldr	r3, [pc, #368]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003890:	4a5a      	ldr	r2, [pc, #360]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800389a:	e00f      	b.n	80038bc <HAL_RCC_OscConfig+0x378>
 800389c:	4b57      	ldr	r3, [pc, #348]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a2:	4a56      	ldr	r2, [pc, #344]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038ac:	4b53      	ldr	r3, [pc, #332]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	4a52      	ldr	r2, [pc, #328]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d016      	beq.n	80038f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe ff7e 	bl	80027c4 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fe ff7a 	bl	80027c4 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e138      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e2:	4b46      	ldr	r3, [pc, #280]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ed      	beq.n	80038cc <HAL_RCC_OscConfig+0x388>
 80038f0:	e015      	b.n	800391e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fe ff67 	bl	80027c4 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fe ff63 	bl	80027c4 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e121      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003910:	4b3a      	ldr	r3, [pc, #232]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1ed      	bne.n	80038fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800391e:	7ffb      	ldrb	r3, [r7, #31]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003924:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003928:	4a34      	ldr	r2, [pc, #208]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800392e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d03c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01c      	beq.n	800397e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003944:	4b2d      	ldr	r3, [pc, #180]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800394a:	4a2c      	ldr	r2, [pc, #176]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fe ff36 	bl	80027c4 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800395c:	f7fe ff32 	bl	80027c4 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e0f2      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800396e:	4b23      	ldr	r3, [pc, #140]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003970:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ef      	beq.n	800395c <HAL_RCC_OscConfig+0x418>
 800397c:	e01b      	b.n	80039b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800397e:	4b1f      	ldr	r3, [pc, #124]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003980:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003984:	4a1d      	ldr	r2, [pc, #116]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe ff19 	bl	80027c4 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003996:	f7fe ff15 	bl	80027c4 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0d5      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039a8:	4b14      	ldr	r3, [pc, #80]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 80039aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1ef      	bne.n	8003996 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80c9 	beq.w	8003b52 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039c0:	4b0e      	ldr	r3, [pc, #56]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b0c      	cmp	r3, #12
 80039ca:	f000 8083 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d15e      	bne.n	8003a94 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a08      	ldr	r2, [pc, #32]	@ (80039fc <HAL_RCC_OscConfig+0x4b8>)
 80039dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fe feef 	bl	80027c4 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e8:	e00c      	b.n	8003a04 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fe feeb 	bl	80027c4 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d905      	bls.n	8003a04 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e0ab      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a04:	4b55      	ldr	r3, [pc, #340]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ec      	bne.n	80039ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a10:	4b52      	ldr	r3, [pc, #328]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	4b52      	ldr	r3, [pc, #328]	@ (8003b60 <HAL_RCC_OscConfig+0x61c>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6a11      	ldr	r1, [r2, #32]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a20:	3a01      	subs	r2, #1
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	4311      	orrs	r1, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a2a:	0212      	lsls	r2, r2, #8
 8003a2c:	4311      	orrs	r1, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a32:	0852      	lsrs	r2, r2, #1
 8003a34:	3a01      	subs	r2, #1
 8003a36:	0552      	lsls	r2, r2, #21
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a3e:	0852      	lsrs	r2, r2, #1
 8003a40:	3a01      	subs	r2, #1
 8003a42:	0652      	lsls	r2, r2, #25
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a4a:	06d2      	lsls	r2, r2, #27
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	4943      	ldr	r1, [pc, #268]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b41      	ldr	r3, [pc, #260]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a40      	ldr	r2, [pc, #256]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a60:	4b3e      	ldr	r3, [pc, #248]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a3d      	ldr	r2, [pc, #244]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fe feaa 	bl	80027c4 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fe fea6 	bl	80027c4 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e066      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a86:	4b35      	ldr	r3, [pc, #212]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x530>
 8003a92:	e05e      	b.n	8003b52 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a94:	4b31      	ldr	r3, [pc, #196]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a30      	ldr	r2, [pc, #192]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003a9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fe90 	bl	80027c4 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fe fe8c 	bl	80027c4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e04c      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aba:	4b28      	ldr	r3, [pc, #160]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ac6:	4b25      	ldr	r3, [pc, #148]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	4924      	ldr	r1, [pc, #144]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003acc:	4b25      	ldr	r3, [pc, #148]	@ (8003b64 <HAL_RCC_OscConfig+0x620>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]
 8003ad2:	e03e      	b.n	8003b52 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e039      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b5c <HAL_RCC_OscConfig+0x618>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f003 0203 	and.w	r2, r3, #3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d12c      	bne.n	8003b4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	3b01      	subs	r3, #1
 8003b00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d123      	bne.n	8003b4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d11b      	bne.n	8003b4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d113      	bne.n	8003b4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	3b01      	subs	r3, #1
 8003b34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	3b01      	subs	r3, #1
 8003b48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d001      	beq.n	8003b52 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	019f800c 	.word	0x019f800c
 8003b64:	feeefffc 	.word	0xfeeefffc

08003b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e11e      	b.n	8003dbe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b80:	4b91      	ldr	r3, [pc, #580]	@ (8003dc8 <HAL_RCC_ClockConfig+0x260>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d910      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b8e      	ldr	r3, [pc, #568]	@ (8003dc8 <HAL_RCC_ClockConfig+0x260>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 020f 	bic.w	r2, r3, #15
 8003b96:	498c      	ldr	r1, [pc, #560]	@ (8003dc8 <HAL_RCC_ClockConfig+0x260>)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b8a      	ldr	r3, [pc, #552]	@ (8003dc8 <HAL_RCC_ClockConfig+0x260>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e106      	b.n	8003dbe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d073      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d129      	bne.n	8003c18 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc4:	4b81      	ldr	r3, [pc, #516]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0f4      	b.n	8003dbe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003bd4:	f000 f99e 	bl	8003f14 <RCC_GetSysClockFreqFromPLLSource>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4a7c      	ldr	r2, [pc, #496]	@ (8003dd0 <HAL_RCC_ClockConfig+0x268>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d93f      	bls.n	8003c62 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003be2:	4b7a      	ldr	r3, [pc, #488]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d033      	beq.n	8003c62 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d12f      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c02:	4b72      	ldr	r3, [pc, #456]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c0a:	4a70      	ldr	r2, [pc, #448]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c12:	2380      	movs	r3, #128	@ 0x80
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e024      	b.n	8003c62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d107      	bne.n	8003c30 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c20:	4b6a      	ldr	r3, [pc, #424]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d109      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0c6      	b.n	8003dbe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c30:	4b66      	ldr	r3, [pc, #408]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0be      	b.n	8003dbe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c40:	f000 f8ce 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4a61      	ldr	r2, [pc, #388]	@ (8003dd0 <HAL_RCC_ClockConfig+0x268>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d909      	bls.n	8003c62 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c56:	4a5d      	ldr	r2, [pc, #372]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c5e:	2380      	movs	r3, #128	@ 0x80
 8003c60:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c62:	4b5a      	ldr	r3, [pc, #360]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 0203 	bic.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4957      	ldr	r1, [pc, #348]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c74:	f7fe fda6 	bl	80027c4 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7fe fda2 	bl	80027c4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e095      	b.n	8003dbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b4e      	ldr	r3, [pc, #312]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 020c 	and.w	r2, r3, #12
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1eb      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d023      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cbc:	4b43      	ldr	r3, [pc, #268]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a42      	ldr	r2, [pc, #264]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003cc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cc6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003cdc:	4a3b      	ldr	r2, [pc, #236]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003cde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ce2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce4:	4b39      	ldr	r3, [pc, #228]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4936      	ldr	r1, [pc, #216]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b80      	cmp	r3, #128	@ 0x80
 8003cfc:	d105      	bne.n	8003d0a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cfe:	4b33      	ldr	r3, [pc, #204]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	4a32      	ldr	r2, [pc, #200]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003d04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d08:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc8 <HAL_RCC_ClockConfig+0x260>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d21d      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d18:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc8 <HAL_RCC_ClockConfig+0x260>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 020f 	bic.w	r2, r3, #15
 8003d20:	4929      	ldr	r1, [pc, #164]	@ (8003dc8 <HAL_RCC_ClockConfig+0x260>)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d28:	f7fe fd4c 	bl	80027c4 <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d30:	f7fe fd48 	bl	80027c4 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e03b      	b.n	8003dbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b20      	ldr	r3, [pc, #128]	@ (8003dc8 <HAL_RCC_ClockConfig+0x260>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d1ed      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d60:	4b1a      	ldr	r3, [pc, #104]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4917      	ldr	r1, [pc, #92]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7e:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	490f      	ldr	r1, [pc, #60]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d92:	f000 f825 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003d96:	4602      	mov	r2, r0
 8003d98:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <HAL_RCC_ClockConfig+0x264>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	490c      	ldr	r1, [pc, #48]	@ (8003dd4 <HAL_RCC_ClockConfig+0x26c>)
 8003da4:	5ccb      	ldrb	r3, [r1, r3]
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dae:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd8 <HAL_RCC_ClockConfig+0x270>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003db2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ddc <HAL_RCC_ClockConfig+0x274>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe fcb8 	bl	800272c <HAL_InitTick>
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40022000 	.word	0x40022000
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	04c4b400 	.word	0x04c4b400
 8003dd4:	080080dc 	.word	0x080080dc
 8003dd8:	2000022c 	.word	0x2000022c
 8003ddc:	20000230 	.word	0x20000230

08003de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003de6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d102      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003df2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	e047      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003df8:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d102      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e04:	4b26      	ldr	r3, [pc, #152]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	e03e      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e0a:	4b23      	ldr	r3, [pc, #140]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d136      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e16:	4b20      	ldr	r3, [pc, #128]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e20:	4b1d      	ldr	r3, [pc, #116]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e34:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	4a16      	ldr	r2, [pc, #88]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e3e:	68d2      	ldr	r2, [r2, #12]
 8003e40:	0a12      	lsrs	r2, r2, #8
 8003e42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	617b      	str	r3, [r7, #20]
      break;
 8003e4c:	e00c      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e4e:	4a13      	ldr	r2, [pc, #76]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	4a10      	ldr	r2, [pc, #64]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e58:	68d2      	ldr	r2, [r2, #12]
 8003e5a:	0a12      	lsrs	r2, r2, #8
 8003e5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e60:	fb02 f303 	mul.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]
      break;
 8003e66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e68:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	0e5b      	lsrs	r3, r3, #25
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	3301      	adds	r3, #1
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	e001      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e88:	693b      	ldr	r3, [r7, #16]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	00f42400 	.word	0x00f42400
 8003ea0:	016e3600 	.word	0x016e3600

08003ea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea8:	4b03      	ldr	r3, [pc, #12]	@ (8003eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	2000022c 	.word	0x2000022c

08003ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ec0:	f7ff fff0 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4904      	ldr	r1, [pc, #16]	@ (8003ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	080080ec 	.word	0x080080ec

08003ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eec:	f7ff ffda 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0adb      	lsrs	r3, r3, #11
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4904      	ldr	r1, [pc, #16]	@ (8003f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	080080ec 	.word	0x080080ec

08003f14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f24:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	3301      	adds	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d10c      	bne.n	8003f52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f38:	4a17      	ldr	r2, [pc, #92]	@ (8003f98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	4a14      	ldr	r2, [pc, #80]	@ (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f42:	68d2      	ldr	r2, [r2, #12]
 8003f44:	0a12      	lsrs	r2, r2, #8
 8003f46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	617b      	str	r3, [r7, #20]
    break;
 8003f50:	e00c      	b.n	8003f6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f52:	4a12      	ldr	r2, [pc, #72]	@ (8003f9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	0a12      	lsrs	r2, r2, #8
 8003f60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
 8003f68:	617b      	str	r3, [r7, #20]
    break;
 8003f6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f6c:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0e5b      	lsrs	r3, r3, #25
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	3301      	adds	r3, #1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f86:	687b      	ldr	r3, [r7, #4]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	40021000 	.word	0x40021000
 8003f98:	016e3600 	.word	0x016e3600
 8003f9c:	00f42400 	.word	0x00f42400

08003fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fa8:	2300      	movs	r3, #0
 8003faa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fac:	2300      	movs	r3, #0
 8003fae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8098 	beq.w	80040ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc2:	4b43      	ldr	r3, [pc, #268]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10d      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fce:	4b40      	ldr	r3, [pc, #256]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fda:	4b3d      	ldr	r3, [pc, #244]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fea:	4b3a      	ldr	r3, [pc, #232]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a39      	ldr	r2, [pc, #228]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff6:	f7fe fbe5 	bl	80027c4 <HAL_GetTick>
 8003ffa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ffc:	e009      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffe:	f7fe fbe1 	bl	80027c4 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d902      	bls.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	74fb      	strb	r3, [r7, #19]
        break;
 8004010:	e005      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004012:	4b30      	ldr	r3, [pc, #192]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ef      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800401e:	7cfb      	ldrb	r3, [r7, #19]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d159      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004024:	4b2a      	ldr	r3, [pc, #168]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800402e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01e      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	429a      	cmp	r2, r3
 800403e:	d019      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004040:	4b23      	ldr	r3, [pc, #140]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800404c:	4b20      	ldr	r3, [pc, #128]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004052:	4a1f      	ldr	r2, [pc, #124]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800405c:	4b1c      	ldr	r3, [pc, #112]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004062:	4a1b      	ldr	r2, [pc, #108]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800406c:	4a18      	ldr	r2, [pc, #96]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d016      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7fe fba1 	bl	80027c4 <HAL_GetTick>
 8004082:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004084:	e00b      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004086:	f7fe fb9d 	bl	80027c4 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004094:	4293      	cmp	r3, r2
 8004096:	d902      	bls.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	74fb      	strb	r3, [r7, #19]
            break;
 800409c:	e006      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409e:	4b0c      	ldr	r3, [pc, #48]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0ec      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10b      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040b2:	4b07      	ldr	r3, [pc, #28]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c0:	4903      	ldr	r1, [pc, #12]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040c8:	e008      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	74bb      	strb	r3, [r7, #18]
 80040ce:	e005      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040dc:	7c7b      	ldrb	r3, [r7, #17]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d105      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e2:	4ba7      	ldr	r3, [pc, #668]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	4aa6      	ldr	r2, [pc, #664]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040fa:	4ba1      	ldr	r3, [pc, #644]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004100:	f023 0203 	bic.w	r2, r3, #3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	499d      	ldr	r1, [pc, #628]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800411c:	4b98      	ldr	r3, [pc, #608]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004122:	f023 020c 	bic.w	r2, r3, #12
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	4995      	ldr	r1, [pc, #596]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800413e:	4b90      	ldr	r3, [pc, #576]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004144:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	498c      	ldr	r1, [pc, #560]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004160:	4b87      	ldr	r3, [pc, #540]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004166:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	4984      	ldr	r1, [pc, #528]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004182:	4b7f      	ldr	r3, [pc, #508]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004188:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	497b      	ldr	r1, [pc, #492]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041a4:	4b76      	ldr	r3, [pc, #472]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	4973      	ldr	r1, [pc, #460]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	496a      	ldr	r1, [pc, #424]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041e8:	4b65      	ldr	r3, [pc, #404]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4962      	ldr	r1, [pc, #392]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800420a:	4b5d      	ldr	r3, [pc, #372]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004210:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	4959      	ldr	r1, [pc, #356]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800422c:	4b54      	ldr	r3, [pc, #336]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004232:	f023 0203 	bic.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423a:	4951      	ldr	r1, [pc, #324]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800424e:	4b4c      	ldr	r3, [pc, #304]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004254:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	4948      	ldr	r1, [pc, #288]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426c:	2b00      	cmp	r3, #0
 800426e:	d015      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004270:	4b43      	ldr	r3, [pc, #268]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	4940      	ldr	r1, [pc, #256]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800428e:	d105      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004290:	4b3b      	ldr	r3, [pc, #236]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a3a      	ldr	r2, [pc, #232]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800429a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042a8:	4b35      	ldr	r3, [pc, #212]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b6:	4932      	ldr	r1, [pc, #200]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c6:	d105      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d015      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042e0:	4b27      	ldr	r3, [pc, #156]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ee:	4924      	ldr	r1, [pc, #144]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042fe:	d105      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004300:	4b1f      	ldr	r3, [pc, #124]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a1e      	ldr	r2, [pc, #120]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800430a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d015      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004318:	4b19      	ldr	r3, [pc, #100]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004326:	4916      	ldr	r1, [pc, #88]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004336:	d105      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004338:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4a10      	ldr	r2, [pc, #64]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004342:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d019      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004350:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	4908      	ldr	r1, [pc, #32]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800436e:	d109      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004370:	4b03      	ldr	r3, [pc, #12]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a02      	ldr	r2, [pc, #8]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800437a:	60d3      	str	r3, [r2, #12]
 800437c:	e002      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d015      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004390:	4b29      	ldr	r3, [pc, #164]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	4926      	ldr	r1, [pc, #152]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ae:	d105      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043b0:	4b21      	ldr	r3, [pc, #132]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a20      	ldr	r2, [pc, #128]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d015      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80043c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d6:	4918      	ldr	r1, [pc, #96]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e6:	d105      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043e8:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4a12      	ldr	r2, [pc, #72]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d015      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004400:	4b0d      	ldr	r3, [pc, #52]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004402:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004406:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440e:	490a      	ldr	r1, [pc, #40]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800441e:	d105      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4a04      	ldr	r2, [pc, #16]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800442a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800442c:	7cbb      	ldrb	r3, [r7, #18]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000

0800443c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e054      	b.n	80044f8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d111      	bne.n	800447e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f001 fcdc 	bl	8005e20 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a23      	ldr	r2, [pc, #140]	@ (8004500 <HAL_TIM_Base_Init+0xc4>)
 8004474:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f001 f825 	bl	80054e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	08002251 	.word	0x08002251

08004504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	d001      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e054      	b.n	80045c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a26      	ldr	r2, [pc, #152]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d022      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x80>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004546:	d01d      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x80>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a22      	ldr	r2, [pc, #136]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d018      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x80>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a21      	ldr	r2, [pc, #132]	@ (80045dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d013      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x80>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1f      	ldr	r2, [pc, #124]	@ (80045e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00e      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x80>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1e      	ldr	r2, [pc, #120]	@ (80045e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d009      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x80>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1c      	ldr	r2, [pc, #112]	@ (80045e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x80>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1b      	ldr	r2, [pc, #108]	@ (80045ec <HAL_TIM_Base_Start_IT+0xe8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d115      	bne.n	80045b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	4b19      	ldr	r3, [pc, #100]	@ (80045f0 <HAL_TIM_Base_Start_IT+0xec>)
 800458c:	4013      	ands	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b06      	cmp	r3, #6
 8004594:	d015      	beq.n	80045c2 <HAL_TIM_Base_Start_IT+0xbe>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800459c:	d011      	beq.n	80045c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0201 	orr.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ae:	e008      	b.n	80045c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e000      	b.n	80045c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800
 80045e0:	40000c00 	.word	0x40000c00
 80045e4:	40013400 	.word	0x40013400
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40015000 	.word	0x40015000
 80045f0:	00010007 	.word	0x00010007

080045f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e054      	b.n	80046b0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d111      	bne.n	8004636 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f001 fc00 	bl	8005e20 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a23      	ldr	r2, [pc, #140]	@ (80046b8 <HAL_TIM_PWM_Init+0xc4>)
 800462c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3304      	adds	r3, #4
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f000 ff49 	bl	80054e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	080046bd 	.word	0x080046bd

080046bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e04c      	b.n	800477e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d111      	bne.n	8004714 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f001 fb91 	bl	8005e20 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1f      	ldr	r2, [pc, #124]	@ (8004788 <HAL_TIM_OnePulse_Init+0xb8>)
 800470a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f000 feda 	bl	80054e0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0208 	bic.w	r2, r2, #8
 800473a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	0800478d 	.word	0x0800478d

0800478c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047c8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d108      	bne.n	80047e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047d0:	7bbb      	ldrb	r3, [r7, #14]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047d6:	7b7b      	ldrb	r3, [r7, #13]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d102      	bne.n	80047e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047dc:	7b3b      	ldrb	r3, [r7, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d001      	beq.n	80047e6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e059      	b.n	800489a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0202 	orr.w	r2, r2, #2
 8004814:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0204 	orr.w	r2, r2, #4
 8004824:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2201      	movs	r2, #1
 800482c:	2100      	movs	r1, #0
 800482e:	4618      	mov	r0, r3
 8004830:	f001 fad0 	bl	8005dd4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2201      	movs	r2, #1
 800483a:	2104      	movs	r1, #4
 800483c:	4618      	mov	r0, r3
 800483e:	f001 fac9 	bl	8005dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a17      	ldr	r2, [pc, #92]	@ (80048a4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d018      	beq.n	800487e <HAL_TIM_OnePulse_Start_IT+0xde>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a15      	ldr	r2, [pc, #84]	@ (80048a8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <HAL_TIM_OnePulse_Start_IT+0xde>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a14      	ldr	r2, [pc, #80]	@ (80048ac <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <HAL_TIM_OnePulse_Start_IT+0xde>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a12      	ldr	r2, [pc, #72]	@ (80048b0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d009      	beq.n	800487e <HAL_TIM_OnePulse_Start_IT+0xde>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a11      	ldr	r2, [pc, #68]	@ (80048b4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_TIM_OnePulse_Start_IT+0xde>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a0f      	ldr	r2, [pc, #60]	@ (80048b8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d101      	bne.n	8004882 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004896:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40013400 	.word	0x40013400
 80048ac:	40014000 	.word	0x40014000
 80048b0:	40014400 	.word	0x40014400
 80048b4:	40014800 	.word	0x40014800
 80048b8:	40015000 	.word	0x40015000

080048bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0a2      	b.n	8004a16 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d111      	bne.n	8004900 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f001 fa9b 	bl	8005e20 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d102      	bne.n	80048f8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004a20 <HAL_TIM_Encoder_Init+0x164>)
 80048f6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004916:	f023 0307 	bic.w	r3, r3, #7
 800491a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f000 fdda 	bl	80054e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	4313      	orrs	r3, r2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004972:	f023 030c 	bic.w	r3, r3, #12
 8004976:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800497e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	4313      	orrs	r3, r2
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	011a      	lsls	r2, r3, #4
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	031b      	lsls	r3, r3, #12
 80049a2:	4313      	orrs	r3, r2
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80049b0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80049b8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	4313      	orrs	r3, r2
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	080021d1 	.word	0x080021d1

08004a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d026      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d021      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0202 	mvn.w	r2, #2
 8004a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
 8004a78:	e009      	b.n	8004a8e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d026      	beq.n	8004aec <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d021      	beq.n	8004aec <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0204 	mvn.w	r2, #4
 8004ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4798      	blx	r3
 8004ad0:	e009      	b.n	8004ae6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d026      	beq.n	8004b44 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d021      	beq.n	8004b44 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0208 	mvn.w	r2, #8
 8004b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
 8004b28:	e009      	b.n	8004b3e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0310 	and.w	r3, r3, #16
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d026      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d021      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0210 	mvn.w	r2, #16
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2208      	movs	r2, #8
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
 8004b80:	e009      	b.n	8004b96 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0201 	mvn.w	r2, #1
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d104      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00e      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00e      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00e      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f06f 0220 	mvn.w	r2, #32
 8004c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00e      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00e      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00e      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e0ff      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b14      	cmp	r3, #20
 8004d42:	f200 80f0 	bhi.w	8004f26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004da1 	.word	0x08004da1
 8004d50:	08004f27 	.word	0x08004f27
 8004d54:	08004f27 	.word	0x08004f27
 8004d58:	08004f27 	.word	0x08004f27
 8004d5c:	08004de1 	.word	0x08004de1
 8004d60:	08004f27 	.word	0x08004f27
 8004d64:	08004f27 	.word	0x08004f27
 8004d68:	08004f27 	.word	0x08004f27
 8004d6c:	08004e23 	.word	0x08004e23
 8004d70:	08004f27 	.word	0x08004f27
 8004d74:	08004f27 	.word	0x08004f27
 8004d78:	08004f27 	.word	0x08004f27
 8004d7c:	08004e63 	.word	0x08004e63
 8004d80:	08004f27 	.word	0x08004f27
 8004d84:	08004f27 	.word	0x08004f27
 8004d88:	08004f27 	.word	0x08004f27
 8004d8c:	08004ea5 	.word	0x08004ea5
 8004d90:	08004f27 	.word	0x08004f27
 8004d94:	08004f27 	.word	0x08004f27
 8004d98:	08004f27 	.word	0x08004f27
 8004d9c:	08004ee5 	.word	0x08004ee5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fc4e 	bl	8005648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0208 	orr.w	r2, r2, #8
 8004dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0204 	bic.w	r2, r2, #4
 8004dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6999      	ldr	r1, [r3, #24]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	619a      	str	r2, [r3, #24]
      break;
 8004dde:	e0a5      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fcc8 	bl	800577c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6999      	ldr	r1, [r3, #24]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	021a      	lsls	r2, r3, #8
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	619a      	str	r2, [r3, #24]
      break;
 8004e20:	e084      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fd3b 	bl	80058a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0208 	orr.w	r2, r2, #8
 8004e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0204 	bic.w	r2, r2, #4
 8004e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69d9      	ldr	r1, [r3, #28]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	61da      	str	r2, [r3, #28]
      break;
 8004e60:	e064      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fdad 	bl	80059c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69d9      	ldr	r1, [r3, #28]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	021a      	lsls	r2, r3, #8
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	61da      	str	r2, [r3, #28]
      break;
 8004ea2:	e043      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fe20 	bl	8005af0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0208 	orr.w	r2, r2, #8
 8004ebe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0204 	bic.w	r2, r2, #4
 8004ece:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ee2:	e023      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fe6a 	bl	8005bc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004efe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	021a      	lsls	r2, r3, #8
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004f24:	e002      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop

08004f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIM_ConfigClockSource+0x1c>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e0f6      	b.n	800514a <HAL_TIM_ConfigClockSource+0x20a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004f7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a6f      	ldr	r2, [pc, #444]	@ (8005154 <HAL_TIM_ConfigClockSource+0x214>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	f000 80c1 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004f9c:	4a6d      	ldr	r2, [pc, #436]	@ (8005154 <HAL_TIM_ConfigClockSource+0x214>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f200 80c6 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fa4:	4a6c      	ldr	r2, [pc, #432]	@ (8005158 <HAL_TIM_ConfigClockSource+0x218>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	f000 80b9 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004fac:	4a6a      	ldr	r2, [pc, #424]	@ (8005158 <HAL_TIM_ConfigClockSource+0x218>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	f200 80be 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fb4:	4a69      	ldr	r2, [pc, #420]	@ (800515c <HAL_TIM_ConfigClockSource+0x21c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	f000 80b1 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004fbc:	4a67      	ldr	r2, [pc, #412]	@ (800515c <HAL_TIM_ConfigClockSource+0x21c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	f200 80b6 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fc4:	4a66      	ldr	r2, [pc, #408]	@ (8005160 <HAL_TIM_ConfigClockSource+0x220>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	f000 80a9 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004fcc:	4a64      	ldr	r2, [pc, #400]	@ (8005160 <HAL_TIM_ConfigClockSource+0x220>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	f200 80ae 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fd4:	4a63      	ldr	r2, [pc, #396]	@ (8005164 <HAL_TIM_ConfigClockSource+0x224>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	f000 80a1 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004fdc:	4a61      	ldr	r2, [pc, #388]	@ (8005164 <HAL_TIM_ConfigClockSource+0x224>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	f200 80a6 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fe4:	4a60      	ldr	r2, [pc, #384]	@ (8005168 <HAL_TIM_ConfigClockSource+0x228>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	f000 8099 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004fec:	4a5e      	ldr	r2, [pc, #376]	@ (8005168 <HAL_TIM_ConfigClockSource+0x228>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	f200 809e 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ff4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ff8:	f000 8091 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004ffc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005000:	f200 8096 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005004:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005008:	f000 8089 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 800500c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005010:	f200 808e 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005018:	d03e      	beq.n	8005098 <HAL_TIM_ConfigClockSource+0x158>
 800501a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800501e:	f200 8087 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005026:	f000 8086 	beq.w	8005136 <HAL_TIM_ConfigClockSource+0x1f6>
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800502e:	d87f      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005030:	2b70      	cmp	r3, #112	@ 0x70
 8005032:	d01a      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x12a>
 8005034:	2b70      	cmp	r3, #112	@ 0x70
 8005036:	d87b      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005038:	2b60      	cmp	r3, #96	@ 0x60
 800503a:	d050      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x19e>
 800503c:	2b60      	cmp	r3, #96	@ 0x60
 800503e:	d877      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005040:	2b50      	cmp	r3, #80	@ 0x50
 8005042:	d03c      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x17e>
 8005044:	2b50      	cmp	r3, #80	@ 0x50
 8005046:	d873      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005048:	2b40      	cmp	r3, #64	@ 0x40
 800504a:	d058      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x1be>
 800504c:	2b40      	cmp	r3, #64	@ 0x40
 800504e:	d86f      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005050:	2b30      	cmp	r3, #48	@ 0x30
 8005052:	d064      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8005054:	2b30      	cmp	r3, #48	@ 0x30
 8005056:	d86b      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d060      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1de>
 800505c:	2b20      	cmp	r3, #32
 800505e:	d867      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05c      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8005064:	2b10      	cmp	r3, #16
 8005066:	d05a      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8005068:	e062      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800507a:	f000 fe8b 	bl	8005d94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800508c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	609a      	str	r2, [r3, #8]
      break;
 8005096:	e04f      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a8:	f000 fe74 	bl	8005d94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ba:	609a      	str	r2, [r3, #8]
      break;
 80050bc:	e03c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 fde6 	bl	8005c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2150      	movs	r1, #80	@ 0x50
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fe3f 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 80050dc:	e02c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ea:	461a      	mov	r2, r3
 80050ec:	f000 fe05 	bl	8005cfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2160      	movs	r1, #96	@ 0x60
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fe2f 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 80050fc:	e01c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800510a:	461a      	mov	r2, r3
 800510c:	f000 fdc6 	bl	8005c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2140      	movs	r1, #64	@ 0x40
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fe1f 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 800511c:	e00c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4619      	mov	r1, r3
 8005128:	4610      	mov	r0, r2
 800512a:	f000 fe16 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 800512e:	e003      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
      break;
 8005134:	e000      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	00100070 	.word	0x00100070
 8005158:	00100060 	.word	0x00100060
 800515c:	00100050 	.word	0x00100050
 8005160:	00100040 	.word	0x00100040
 8005164:	00100030 	.word	0x00100030
 8005168:	00100020 	.word	0x00100020

0800516c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	460b      	mov	r3, r1
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e14a      	b.n	80054d2 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b01      	cmp	r3, #1
 8005246:	f040 80dd 	bne.w	8005404 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800524a:	7afb      	ldrb	r3, [r7, #11]
 800524c:	2b1f      	cmp	r3, #31
 800524e:	f200 80d6 	bhi.w	80053fe <HAL_TIM_RegisterCallback+0x1de>
 8005252:	a201      	add	r2, pc, #4	@ (adr r2, 8005258 <HAL_TIM_RegisterCallback+0x38>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	080052d9 	.word	0x080052d9
 800525c:	080052e1 	.word	0x080052e1
 8005260:	080052e9 	.word	0x080052e9
 8005264:	080052f1 	.word	0x080052f1
 8005268:	080052f9 	.word	0x080052f9
 800526c:	08005301 	.word	0x08005301
 8005270:	08005309 	.word	0x08005309
 8005274:	08005311 	.word	0x08005311
 8005278:	08005319 	.word	0x08005319
 800527c:	08005321 	.word	0x08005321
 8005280:	08005329 	.word	0x08005329
 8005284:	08005331 	.word	0x08005331
 8005288:	08005339 	.word	0x08005339
 800528c:	08005341 	.word	0x08005341
 8005290:	0800534b 	.word	0x0800534b
 8005294:	08005355 	.word	0x08005355
 8005298:	0800535f 	.word	0x0800535f
 800529c:	08005369 	.word	0x08005369
 80052a0:	08005373 	.word	0x08005373
 80052a4:	0800537d 	.word	0x0800537d
 80052a8:	08005387 	.word	0x08005387
 80052ac:	08005391 	.word	0x08005391
 80052b0:	0800539b 	.word	0x0800539b
 80052b4:	080053a5 	.word	0x080053a5
 80052b8:	080053af 	.word	0x080053af
 80052bc:	080053b9 	.word	0x080053b9
 80052c0:	080053c3 	.word	0x080053c3
 80052c4:	080053cd 	.word	0x080053cd
 80052c8:	080053d7 	.word	0x080053d7
 80052cc:	080053e1 	.word	0x080053e1
 80052d0:	080053eb 	.word	0x080053eb
 80052d4:	080053f5 	.word	0x080053f5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80052de:	e0f7      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80052e6:	e0f3      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80052ee:	e0ef      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80052f6:	e0eb      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80052fe:	e0e7      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8005306:	e0e3      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800530e:	e0df      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8005316:	e0db      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800531e:	e0d7      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8005326:	e0d3      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800532e:	e0cf      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8005336:	e0cb      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800533e:	e0c7      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8005348:	e0c2      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8005352:	e0bd      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800535c:	e0b8      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8005366:	e0b3      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8005370:	e0ae      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800537a:	e0a9      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8005384:	e0a4      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800538e:	e09f      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8005398:	e09a      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80053a2:	e095      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80053ac:	e090      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80053b6:	e08b      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80053c0:	e086      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80053ca:	e081      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80053d4:	e07c      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80053de:	e077      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80053e8:	e072      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80053f2:	e06d      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80053fc:	e068      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	75fb      	strb	r3, [r7, #23]
        break;
 8005402:	e065      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d15d      	bne.n	80054cc <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8005410:	7afb      	ldrb	r3, [r7, #11]
 8005412:	2b0d      	cmp	r3, #13
 8005414:	d857      	bhi.n	80054c6 <HAL_TIM_RegisterCallback+0x2a6>
 8005416:	a201      	add	r2, pc, #4	@ (adr r2, 800541c <HAL_TIM_RegisterCallback+0x1fc>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005455 	.word	0x08005455
 8005420:	0800545d 	.word	0x0800545d
 8005424:	08005465 	.word	0x08005465
 8005428:	0800546d 	.word	0x0800546d
 800542c:	08005475 	.word	0x08005475
 8005430:	0800547d 	.word	0x0800547d
 8005434:	08005485 	.word	0x08005485
 8005438:	0800548d 	.word	0x0800548d
 800543c:	08005495 	.word	0x08005495
 8005440:	0800549d 	.word	0x0800549d
 8005444:	080054a5 	.word	0x080054a5
 8005448:	080054ad 	.word	0x080054ad
 800544c:	080054b5 	.word	0x080054b5
 8005450:	080054bd 	.word	0x080054bd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800545a:	e039      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8005462:	e035      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800546a:	e031      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8005472:	e02d      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800547a:	e029      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8005482:	e025      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800548a:	e021      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8005492:	e01d      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800549a:	e019      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80054a2:	e015      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80054aa:	e011      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80054b2:	e00d      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80054ba:	e009      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80054c4:	e004      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	75fb      	strb	r3, [r7, #23]
        break;
 80054ca:	e001      	b.n	80054d0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop

080054e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a4c      	ldr	r2, [pc, #304]	@ (8005624 <TIM_Base_SetConfig+0x144>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d017      	beq.n	8005528 <TIM_Base_SetConfig+0x48>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fe:	d013      	beq.n	8005528 <TIM_Base_SetConfig+0x48>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a49      	ldr	r2, [pc, #292]	@ (8005628 <TIM_Base_SetConfig+0x148>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00f      	beq.n	8005528 <TIM_Base_SetConfig+0x48>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a48      	ldr	r2, [pc, #288]	@ (800562c <TIM_Base_SetConfig+0x14c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00b      	beq.n	8005528 <TIM_Base_SetConfig+0x48>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a47      	ldr	r2, [pc, #284]	@ (8005630 <TIM_Base_SetConfig+0x150>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d007      	beq.n	8005528 <TIM_Base_SetConfig+0x48>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a46      	ldr	r2, [pc, #280]	@ (8005634 <TIM_Base_SetConfig+0x154>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_Base_SetConfig+0x48>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a45      	ldr	r2, [pc, #276]	@ (8005638 <TIM_Base_SetConfig+0x158>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d108      	bne.n	800553a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a39      	ldr	r2, [pc, #228]	@ (8005624 <TIM_Base_SetConfig+0x144>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d023      	beq.n	800558a <TIM_Base_SetConfig+0xaa>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005548:	d01f      	beq.n	800558a <TIM_Base_SetConfig+0xaa>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a36      	ldr	r2, [pc, #216]	@ (8005628 <TIM_Base_SetConfig+0x148>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01b      	beq.n	800558a <TIM_Base_SetConfig+0xaa>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a35      	ldr	r2, [pc, #212]	@ (800562c <TIM_Base_SetConfig+0x14c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d017      	beq.n	800558a <TIM_Base_SetConfig+0xaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a34      	ldr	r2, [pc, #208]	@ (8005630 <TIM_Base_SetConfig+0x150>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <TIM_Base_SetConfig+0xaa>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a33      	ldr	r2, [pc, #204]	@ (8005634 <TIM_Base_SetConfig+0x154>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00f      	beq.n	800558a <TIM_Base_SetConfig+0xaa>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a33      	ldr	r2, [pc, #204]	@ (800563c <TIM_Base_SetConfig+0x15c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00b      	beq.n	800558a <TIM_Base_SetConfig+0xaa>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a32      	ldr	r2, [pc, #200]	@ (8005640 <TIM_Base_SetConfig+0x160>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d007      	beq.n	800558a <TIM_Base_SetConfig+0xaa>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a31      	ldr	r2, [pc, #196]	@ (8005644 <TIM_Base_SetConfig+0x164>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_Base_SetConfig+0xaa>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2c      	ldr	r2, [pc, #176]	@ (8005638 <TIM_Base_SetConfig+0x158>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d108      	bne.n	800559c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a18      	ldr	r2, [pc, #96]	@ (8005624 <TIM_Base_SetConfig+0x144>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <TIM_Base_SetConfig+0x110>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005634 <TIM_Base_SetConfig+0x154>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00f      	beq.n	80055f0 <TIM_Base_SetConfig+0x110>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a1a      	ldr	r2, [pc, #104]	@ (800563c <TIM_Base_SetConfig+0x15c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00b      	beq.n	80055f0 <TIM_Base_SetConfig+0x110>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a19      	ldr	r2, [pc, #100]	@ (8005640 <TIM_Base_SetConfig+0x160>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d007      	beq.n	80055f0 <TIM_Base_SetConfig+0x110>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a18      	ldr	r2, [pc, #96]	@ (8005644 <TIM_Base_SetConfig+0x164>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_Base_SetConfig+0x110>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a13      	ldr	r2, [pc, #76]	@ (8005638 <TIM_Base_SetConfig+0x158>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d103      	bne.n	80055f8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d105      	bne.n	8005616 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f023 0201 	bic.w	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	611a      	str	r2, [r3, #16]
  }
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40000400 	.word	0x40000400
 800562c:	40000800 	.word	0x40000800
 8005630:	40000c00 	.word	0x40000c00
 8005634:	40013400 	.word	0x40013400
 8005638:	40015000 	.word	0x40015000
 800563c:	40014000 	.word	0x40014000
 8005640:	40014400 	.word	0x40014400
 8005644:	40014800 	.word	0x40014800

08005648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	f023 0201 	bic.w	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f023 0302 	bic.w	r3, r3, #2
 8005694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a30      	ldr	r2, [pc, #192]	@ (8005764 <TIM_OC1_SetConfig+0x11c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <TIM_OC1_SetConfig+0x88>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a2f      	ldr	r2, [pc, #188]	@ (8005768 <TIM_OC1_SetConfig+0x120>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00f      	beq.n	80056d0 <TIM_OC1_SetConfig+0x88>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a2e      	ldr	r2, [pc, #184]	@ (800576c <TIM_OC1_SetConfig+0x124>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <TIM_OC1_SetConfig+0x88>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005770 <TIM_OC1_SetConfig+0x128>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <TIM_OC1_SetConfig+0x88>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005774 <TIM_OC1_SetConfig+0x12c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_OC1_SetConfig+0x88>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005778 <TIM_OC1_SetConfig+0x130>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10c      	bne.n	80056ea <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 0308 	bic.w	r3, r3, #8
 80056d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f023 0304 	bic.w	r3, r3, #4
 80056e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005764 <TIM_OC1_SetConfig+0x11c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <TIM_OC1_SetConfig+0xd2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005768 <TIM_OC1_SetConfig+0x120>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00f      	beq.n	800571a <TIM_OC1_SetConfig+0xd2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1b      	ldr	r2, [pc, #108]	@ (800576c <TIM_OC1_SetConfig+0x124>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00b      	beq.n	800571a <TIM_OC1_SetConfig+0xd2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1a      	ldr	r2, [pc, #104]	@ (8005770 <TIM_OC1_SetConfig+0x128>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d007      	beq.n	800571a <TIM_OC1_SetConfig+0xd2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a19      	ldr	r2, [pc, #100]	@ (8005774 <TIM_OC1_SetConfig+0x12c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d003      	beq.n	800571a <TIM_OC1_SetConfig+0xd2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a18      	ldr	r2, [pc, #96]	@ (8005778 <TIM_OC1_SetConfig+0x130>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d111      	bne.n	800573e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	621a      	str	r2, [r3, #32]
}
 8005758:	bf00      	nop
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40013400 	.word	0x40013400
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800
 8005778:	40015000 	.word	0x40015000

0800577c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f023 0210 	bic.w	r2, r3, #16
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0320 	bic.w	r3, r3, #32
 80057ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a2c      	ldr	r2, [pc, #176]	@ (800588c <TIM_OC2_SetConfig+0x110>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d007      	beq.n	80057f0 <TIM_OC2_SetConfig+0x74>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005890 <TIM_OC2_SetConfig+0x114>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_OC2_SetConfig+0x74>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005894 <TIM_OC2_SetConfig+0x118>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d10d      	bne.n	800580c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800580a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a1f      	ldr	r2, [pc, #124]	@ (800588c <TIM_OC2_SetConfig+0x110>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <TIM_OC2_SetConfig+0xc0>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a1e      	ldr	r2, [pc, #120]	@ (8005890 <TIM_OC2_SetConfig+0x114>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00f      	beq.n	800583c <TIM_OC2_SetConfig+0xc0>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a1e      	ldr	r2, [pc, #120]	@ (8005898 <TIM_OC2_SetConfig+0x11c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00b      	beq.n	800583c <TIM_OC2_SetConfig+0xc0>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a1d      	ldr	r2, [pc, #116]	@ (800589c <TIM_OC2_SetConfig+0x120>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d007      	beq.n	800583c <TIM_OC2_SetConfig+0xc0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a1c      	ldr	r2, [pc, #112]	@ (80058a0 <TIM_OC2_SetConfig+0x124>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC2_SetConfig+0xc0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a17      	ldr	r2, [pc, #92]	@ (8005894 <TIM_OC2_SetConfig+0x118>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d113      	bne.n	8005864 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800584a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40013400 	.word	0x40013400
 8005894:	40015000 	.word	0x40015000
 8005898:	40014000 	.word	0x40014000
 800589c:	40014400 	.word	0x40014400
 80058a0:	40014800 	.word	0x40014800

080058a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2b      	ldr	r2, [pc, #172]	@ (80059b0 <TIM_OC3_SetConfig+0x10c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d007      	beq.n	8005916 <TIM_OC3_SetConfig+0x72>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2a      	ldr	r2, [pc, #168]	@ (80059b4 <TIM_OC3_SetConfig+0x110>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d003      	beq.n	8005916 <TIM_OC3_SetConfig+0x72>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a29      	ldr	r2, [pc, #164]	@ (80059b8 <TIM_OC3_SetConfig+0x114>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d10d      	bne.n	8005932 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800591c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1e      	ldr	r2, [pc, #120]	@ (80059b0 <TIM_OC3_SetConfig+0x10c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <TIM_OC3_SetConfig+0xbe>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1d      	ldr	r2, [pc, #116]	@ (80059b4 <TIM_OC3_SetConfig+0x110>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00f      	beq.n	8005962 <TIM_OC3_SetConfig+0xbe>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a1d      	ldr	r2, [pc, #116]	@ (80059bc <TIM_OC3_SetConfig+0x118>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00b      	beq.n	8005962 <TIM_OC3_SetConfig+0xbe>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a1c      	ldr	r2, [pc, #112]	@ (80059c0 <TIM_OC3_SetConfig+0x11c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <TIM_OC3_SetConfig+0xbe>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a1b      	ldr	r2, [pc, #108]	@ (80059c4 <TIM_OC3_SetConfig+0x120>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_OC3_SetConfig+0xbe>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a16      	ldr	r2, [pc, #88]	@ (80059b8 <TIM_OC3_SetConfig+0x114>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d113      	bne.n	800598a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	621a      	str	r2, [r3, #32]
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40013400 	.word	0x40013400
 80059b8:	40015000 	.word	0x40015000
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40014400 	.word	0x40014400
 80059c4:	40014800 	.word	0x40014800

080059c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	031b      	lsls	r3, r3, #12
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a2c      	ldr	r2, [pc, #176]	@ (8005ad8 <TIM_OC4_SetConfig+0x110>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d007      	beq.n	8005a3c <TIM_OC4_SetConfig+0x74>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005adc <TIM_OC4_SetConfig+0x114>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_OC4_SetConfig+0x74>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae0 <TIM_OC4_SetConfig+0x118>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d10d      	bne.n	8005a58 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	031b      	lsls	r3, r3, #12
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad8 <TIM_OC4_SetConfig+0x110>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d013      	beq.n	8005a88 <TIM_OC4_SetConfig+0xc0>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a1e      	ldr	r2, [pc, #120]	@ (8005adc <TIM_OC4_SetConfig+0x114>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00f      	beq.n	8005a88 <TIM_OC4_SetConfig+0xc0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ae4 <TIM_OC4_SetConfig+0x11c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <TIM_OC4_SetConfig+0xc0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae8 <TIM_OC4_SetConfig+0x120>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_OC4_SetConfig+0xc0>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005aec <TIM_OC4_SetConfig+0x124>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_OC4_SetConfig+0xc0>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a17      	ldr	r2, [pc, #92]	@ (8005ae0 <TIM_OC4_SetConfig+0x118>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d113      	bne.n	8005ab0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a8e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a96:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	019b      	lsls	r3, r3, #6
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	621a      	str	r2, [r3, #32]
}
 8005aca:	bf00      	nop
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	40013400 	.word	0x40013400
 8005ae0:	40015000 	.word	0x40015000
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800

08005af0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	041b      	lsls	r3, r3, #16
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a19      	ldr	r2, [pc, #100]	@ (8005bac <TIM_OC5_SetConfig+0xbc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <TIM_OC5_SetConfig+0x82>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a18      	ldr	r2, [pc, #96]	@ (8005bb0 <TIM_OC5_SetConfig+0xc0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00f      	beq.n	8005b72 <TIM_OC5_SetConfig+0x82>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a17      	ldr	r2, [pc, #92]	@ (8005bb4 <TIM_OC5_SetConfig+0xc4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <TIM_OC5_SetConfig+0x82>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a16      	ldr	r2, [pc, #88]	@ (8005bb8 <TIM_OC5_SetConfig+0xc8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <TIM_OC5_SetConfig+0x82>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a15      	ldr	r2, [pc, #84]	@ (8005bbc <TIM_OC5_SetConfig+0xcc>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC5_SetConfig+0x82>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a14      	ldr	r2, [pc, #80]	@ (8005bc0 <TIM_OC5_SetConfig+0xd0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d109      	bne.n	8005b86 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	621a      	str	r2, [r3, #32]
}
 8005ba0:	bf00      	nop
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	40012c00 	.word	0x40012c00
 8005bb0:	40013400 	.word	0x40013400
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800
 8005bc0:	40015000 	.word	0x40015000

08005bc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	051b      	lsls	r3, r3, #20
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8005c84 <TIM_OC6_SetConfig+0xc0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <TIM_OC6_SetConfig+0x84>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a19      	ldr	r2, [pc, #100]	@ (8005c88 <TIM_OC6_SetConfig+0xc4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00f      	beq.n	8005c48 <TIM_OC6_SetConfig+0x84>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a18      	ldr	r2, [pc, #96]	@ (8005c8c <TIM_OC6_SetConfig+0xc8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00b      	beq.n	8005c48 <TIM_OC6_SetConfig+0x84>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a17      	ldr	r2, [pc, #92]	@ (8005c90 <TIM_OC6_SetConfig+0xcc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d007      	beq.n	8005c48 <TIM_OC6_SetConfig+0x84>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a16      	ldr	r2, [pc, #88]	@ (8005c94 <TIM_OC6_SetConfig+0xd0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_OC6_SetConfig+0x84>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a15      	ldr	r2, [pc, #84]	@ (8005c98 <TIM_OC6_SetConfig+0xd4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d109      	bne.n	8005c5c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	029b      	lsls	r3, r3, #10
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40013400 	.word	0x40013400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800
 8005c98:	40015000 	.word	0x40015000

08005c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0201 	bic.w	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f023 030a 	bic.w	r3, r3, #10
 8005cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b087      	sub	sp, #28
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	f023 0210 	bic.w	r2, r3, #16
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	031b      	lsls	r3, r3, #12
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f043 0307 	orr.w	r3, r3, #7
 8005d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	609a      	str	r2, [r3, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2201      	movs	r2, #1
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1a      	ldr	r2, [r3, #32]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	43db      	mvns	r3, r3
 8005df6:	401a      	ands	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a26      	ldr	r2, [pc, #152]	@ (8005ec4 <TIM_ResetCallback+0xa4>)
 8005e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a25      	ldr	r2, [pc, #148]	@ (8005ec8 <TIM_ResetCallback+0xa8>)
 8005e34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a24      	ldr	r2, [pc, #144]	@ (8005ecc <TIM_ResetCallback+0xac>)
 8005e3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a23      	ldr	r2, [pc, #140]	@ (8005ed0 <TIM_ResetCallback+0xb0>)
 8005e44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a22      	ldr	r2, [pc, #136]	@ (8005ed4 <TIM_ResetCallback+0xb4>)
 8005e4c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a21      	ldr	r2, [pc, #132]	@ (8005ed8 <TIM_ResetCallback+0xb8>)
 8005e54:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a20      	ldr	r2, [pc, #128]	@ (8005edc <TIM_ResetCallback+0xbc>)
 8005e5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee0 <TIM_ResetCallback+0xc0>)
 8005e64:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ee4 <TIM_ResetCallback+0xc4>)
 8005e6c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee8 <TIM_ResetCallback+0xc8>)
 8005e74:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005eec <TIM_ResetCallback+0xcc>)
 8005e7c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef0 <TIM_ResetCallback+0xd0>)
 8005e84:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef4 <TIM_ResetCallback+0xd4>)
 8005e8c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a19      	ldr	r2, [pc, #100]	@ (8005ef8 <TIM_ResetCallback+0xd8>)
 8005e94:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a18      	ldr	r2, [pc, #96]	@ (8005efc <TIM_ResetCallback+0xdc>)
 8005e9c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a17      	ldr	r2, [pc, #92]	@ (8005f00 <TIM_ResetCallback+0xe0>)
 8005ea4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a16      	ldr	r2, [pc, #88]	@ (8005f04 <TIM_ResetCallback+0xe4>)
 8005eac:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a15      	ldr	r2, [pc, #84]	@ (8005f08 <TIM_ResetCallback+0xe8>)
 8005eb4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	08001d95 	.word	0x08001d95
 8005ec8:	0800516d 	.word	0x0800516d
 8005ecc:	080051e5 	.word	0x080051e5
 8005ed0:	080051f9 	.word	0x080051f9
 8005ed4:	08005195 	.word	0x08005195
 8005ed8:	080051a9 	.word	0x080051a9
 8005edc:	08005181 	.word	0x08005181
 8005ee0:	080051bd 	.word	0x080051bd
 8005ee4:	080051d1 	.word	0x080051d1
 8005ee8:	0800520d 	.word	0x0800520d
 8005eec:	08006039 	.word	0x08006039
 8005ef0:	0800604d 	.word	0x0800604d
 8005ef4:	08006061 	.word	0x08006061
 8005ef8:	08006075 	.word	0x08006075
 8005efc:	08006089 	.word	0x08006089
 8005f00:	0800609d 	.word	0x0800609d
 8005f04:	080060b1 	.word	0x080060b1
 8005f08:	080060c5 	.word	0x080060c5

08005f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e074      	b.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a34      	ldr	r2, [pc, #208]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a33      	ldr	r2, [pc, #204]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a31      	ldr	r2, [pc, #196]	@ (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d108      	bne.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a21      	ldr	r2, [pc, #132]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d022      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa4:	d01d      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1f      	ldr	r2, [pc, #124]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d018      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800602c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00e      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a15      	ldr	r2, [pc, #84]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d009      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a18      	ldr	r2, [pc, #96]	@ (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d004      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a11      	ldr	r2, [pc, #68]	@ (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d10c      	bne.n	8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400
 8006024:	40015000 	.word	0x40015000
 8006028:	40000400 	.word	0x40000400
 800602c:	40000800 	.word	0x40000800
 8006030:	40000c00 	.word	0x40000c00
 8006034:	40014000 	.word	0x40014000

08006038 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e050      	b.n	800618c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d114      	bne.n	800611e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fe8d 	bl	8006e1c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a21      	ldr	r2, [pc, #132]	@ (8006194 <HAL_UART_Init+0xbc>)
 8006110:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2224      	movs	r2, #36	@ 0x24
 8006122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0201 	bic.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 f9ba 	bl	80074b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 febb 	bl	8006ec0 <UART_SetConfig>
 800614a:	4603      	mov	r3, r0
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e01b      	b.n	800618c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f001 fa39 	bl	80075fc <UART_CheckIdleState>
 800618a:	4603      	mov	r3, r0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	080023a5 	.word	0x080023a5

08006198 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	460b      	mov	r3, r1
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e09c      	b.n	80062fe <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d16c      	bne.n	80062a8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80061ce:	7afb      	ldrb	r3, [r7, #11]
 80061d0:	2b0c      	cmp	r3, #12
 80061d2:	d85e      	bhi.n	8006292 <HAL_UART_RegisterCallback+0xfa>
 80061d4:	a201      	add	r2, pc, #4	@ (adr r2, 80061dc <HAL_UART_RegisterCallback+0x44>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	08006211 	.word	0x08006211
 80061e0:	0800621b 	.word	0x0800621b
 80061e4:	08006225 	.word	0x08006225
 80061e8:	0800622f 	.word	0x0800622f
 80061ec:	08006239 	.word	0x08006239
 80061f0:	08006243 	.word	0x08006243
 80061f4:	0800624d 	.word	0x0800624d
 80061f8:	08006257 	.word	0x08006257
 80061fc:	08006261 	.word	0x08006261
 8006200:	0800626b 	.word	0x0800626b
 8006204:	08006275 	.word	0x08006275
 8006208:	0800627f 	.word	0x0800627f
 800620c:	08006289 	.word	0x08006289
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8006218:	e070      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8006222:	e06b      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800622c:	e066      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8006236:	e061      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8006240:	e05c      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800624a:	e057      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8006254:	e052      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800625e:	e04d      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8006268:	e048      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8006272:	e043      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800627c:	e03e      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8006286:	e039      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8006290:	e034      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006298:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	75fb      	strb	r3, [r7, #23]
        break;
 80062a6:	e029      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d11a      	bne.n	80062e8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80062b2:	7afb      	ldrb	r3, [r7, #11]
 80062b4:	2b0b      	cmp	r3, #11
 80062b6:	d002      	beq.n	80062be <HAL_UART_RegisterCallback+0x126>
 80062b8:	2b0c      	cmp	r3, #12
 80062ba:	d005      	beq.n	80062c8 <HAL_UART_RegisterCallback+0x130>
 80062bc:	e009      	b.n	80062d2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80062c6:	e019      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80062d0:	e014      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	75fb      	strb	r3, [r7, #23]
        break;
 80062e6:	e009      	b.n	80062fc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop

0800630c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	@ 0x28
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4613      	mov	r3, r2
 800631a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006322:	2b20      	cmp	r3, #32
 8006324:	f040 80b5 	bne.w	8006492 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_UART_Receive+0x28>
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0ad      	b.n	8006494 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2222      	movs	r2, #34	@ 0x22
 8006344:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800634e:	f7fc fa39 	bl	80027c4 <HAL_GetTick>
 8006352:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	88fa      	ldrh	r2, [r7, #6]
 8006360:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800636c:	d10e      	bne.n	800638c <HAL_UART_Receive+0x80>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d105      	bne.n	8006382 <HAL_UART_Receive+0x76>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800637c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006380:	e02d      	b.n	80063de <HAL_UART_Receive+0xd2>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	22ff      	movs	r2, #255	@ 0xff
 8006386:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800638a:	e028      	b.n	80063de <HAL_UART_Receive+0xd2>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10d      	bne.n	80063b0 <HAL_UART_Receive+0xa4>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d104      	bne.n	80063a6 <HAL_UART_Receive+0x9a>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	22ff      	movs	r2, #255	@ 0xff
 80063a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063a4:	e01b      	b.n	80063de <HAL_UART_Receive+0xd2>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	227f      	movs	r2, #127	@ 0x7f
 80063aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063ae:	e016      	b.n	80063de <HAL_UART_Receive+0xd2>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063b8:	d10d      	bne.n	80063d6 <HAL_UART_Receive+0xca>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <HAL_UART_Receive+0xc0>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	227f      	movs	r2, #127	@ 0x7f
 80063c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063ca:	e008      	b.n	80063de <HAL_UART_Receive+0xd2>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	223f      	movs	r2, #63	@ 0x3f
 80063d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063d4:	e003      	b.n	80063de <HAL_UART_Receive+0xd2>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80063e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ee:	d108      	bne.n	8006402 <HAL_UART_Receive+0xf6>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	61bb      	str	r3, [r7, #24]
 8006400:	e003      	b.n	800640a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800640a:	e036      	b.n	800647a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2200      	movs	r2, #0
 8006414:	2120      	movs	r1, #32
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f001 f99a 	bl	8007750 <UART_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e032      	b.n	8006494 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10c      	bne.n	800644e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	b29a      	uxth	r2, r3
 800643c:	8a7b      	ldrh	r3, [r7, #18]
 800643e:	4013      	ands	r3, r2
 8006440:	b29a      	uxth	r2, r3
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	3302      	adds	r3, #2
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e00c      	b.n	8006468 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006454:	b2da      	uxtb	r2, r3
 8006456:	8a7b      	ldrh	r3, [r7, #18]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	4013      	ands	r3, r2
 800645c:	b2da      	uxtb	r2, r3
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	3301      	adds	r3, #1
 8006466:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1c2      	bne.n	800640c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2220      	movs	r2, #32
 800648a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	e000      	b.n	8006494 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006492:	2302      	movs	r3, #2
  }
}
 8006494:	4618      	mov	r0, r3
 8006496:	3720      	adds	r7, #32
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	@ 0x28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d167      	bne.n	8006584 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_UART_Transmit_DMA+0x24>
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e060      	b.n	8006586 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	88fa      	ldrh	r2, [r7, #6]
 80064ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	88fa      	ldrh	r2, [r7, #6]
 80064d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2221      	movs	r2, #33	@ 0x21
 80064e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d028      	beq.n	8006544 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064f6:	4a26      	ldr	r2, [pc, #152]	@ (8006590 <HAL_UART_Transmit_DMA+0xf4>)
 80064f8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064fe:	4a25      	ldr	r2, [pc, #148]	@ (8006594 <HAL_UART_Transmit_DMA+0xf8>)
 8006500:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006506:	4a24      	ldr	r2, [pc, #144]	@ (8006598 <HAL_UART_Transmit_DMA+0xfc>)
 8006508:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800650e:	2200      	movs	r2, #0
 8006510:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800651a:	4619      	mov	r1, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3328      	adds	r3, #40	@ 0x28
 8006522:	461a      	mov	r2, r3
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	f7fc fb11 	bl	8002b4c <HAL_DMA_Start_IT>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2210      	movs	r2, #16
 8006534:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e020      	b.n	8006586 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2240      	movs	r2, #64	@ 0x40
 800654a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	613b      	str	r3, [r7, #16]
   return(result);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006562:	627b      	str	r3, [r7, #36]	@ 0x24
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3308      	adds	r3, #8
 800656a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800656c:	623a      	str	r2, [r7, #32]
 800656e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	69f9      	ldr	r1, [r7, #28]
 8006572:	6a3a      	ldr	r2, [r7, #32]
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	61bb      	str	r3, [r7, #24]
   return(result);
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e5      	bne.n	800654c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	e000      	b.n	8006586 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006584:	2302      	movs	r3, #2
  }
}
 8006586:	4618      	mov	r0, r3
 8006588:	3728      	adds	r7, #40	@ 0x28
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	08007ac7 	.word	0x08007ac7
 8006594:	08007b65 	.word	0x08007b65
 8006598:	08007cff 	.word	0x08007cff

0800659c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	@ 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d137      	bne.n	8006624 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_UART_Receive_DMA+0x24>
 80065ba:	88fb      	ldrh	r3, [r7, #6]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e030      	b.n	8006626 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a18      	ldr	r2, [pc, #96]	@ (8006630 <HAL_UART_Receive_DMA+0x94>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d01f      	beq.n	8006614 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d018      	beq.n	8006614 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	613b      	str	r3, [r7, #16]
   return(result);
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	69f9      	ldr	r1, [r7, #28]
 8006606:	6a3a      	ldr	r2, [r7, #32]
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	61bb      	str	r3, [r7, #24]
   return(result);
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e6      	bne.n	80065e2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	461a      	mov	r2, r3
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f001 f906 	bl	800782c <UART_Start_Receive_DMA>
 8006620:	4603      	mov	r3, r0
 8006622:	e000      	b.n	8006626 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006624:	2302      	movs	r3, #2
  }
}
 8006626:	4618      	mov	r0, r3
 8006628:	3728      	adds	r7, #40	@ 0x28
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	40008000 	.word	0x40008000

08006634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b0ba      	sub	sp, #232	@ 0xe8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800665a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800665e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006662:	4013      	ands	r3, r2
 8006664:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d11b      	bne.n	80066a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006674:	f003 0320 	and.w	r3, r3, #32
 8006678:	2b00      	cmp	r3, #0
 800667a:	d015      	beq.n	80066a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800667c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b00      	cmp	r3, #0
 8006686:	d105      	bne.n	8006694 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800668c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d009      	beq.n	80066a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 82f3 	beq.w	8006c84 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	4798      	blx	r3
      }
      return;
 80066a6:	e2ed      	b.n	8006c84 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8129 	beq.w	8006904 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80066b6:	4b90      	ldr	r3, [pc, #576]	@ (80068f8 <HAL_UART_IRQHandler+0x2c4>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80066c2:	4b8e      	ldr	r3, [pc, #568]	@ (80068fc <HAL_UART_IRQHandler+0x2c8>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 811c 	beq.w	8006904 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d011      	beq.n	80066fc <HAL_UART_IRQHandler+0xc8>
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2201      	movs	r2, #1
 80066ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f2:	f043 0201 	orr.w	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d011      	beq.n	800672c <HAL_UART_IRQHandler+0xf8>
 8006708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00b      	beq.n	800672c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2202      	movs	r2, #2
 800671a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006722:	f043 0204 	orr.w	r2, r3, #4
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800672c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d011      	beq.n	800675c <HAL_UART_IRQHandler+0x128>
 8006738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2204      	movs	r2, #4
 800674a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006752:	f043 0202 	orr.w	r2, r3, #2
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800675c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d017      	beq.n	8006798 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b00      	cmp	r3, #0
 8006772:	d105      	bne.n	8006780 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006774:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006778:	4b5f      	ldr	r3, [pc, #380]	@ (80068f8 <HAL_UART_IRQHandler+0x2c4>)
 800677a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2208      	movs	r2, #8
 8006786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800678e:	f043 0208 	orr.w	r2, r3, #8
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800679c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d012      	beq.n	80067ca <HAL_UART_IRQHandler+0x196>
 80067a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00c      	beq.n	80067ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c0:	f043 0220 	orr.w	r2, r3, #32
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 8259 	beq.w	8006c88 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067da:	f003 0320 	and.w	r3, r3, #32
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d013      	beq.n	800680a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d105      	bne.n	80067fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d007      	beq.n	800680a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006810:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681e:	2b40      	cmp	r3, #64	@ 0x40
 8006820:	d005      	beq.n	800682e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006826:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800682a:	2b00      	cmp	r3, #0
 800682c:	d058      	beq.n	80068e0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 f8e3 	bl	80079fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683e:	2b40      	cmp	r3, #64	@ 0x40
 8006840:	d148      	bne.n	80068d4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006858:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800685c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3308      	adds	r3, #8
 800686a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800686e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006872:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800687a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1d9      	bne.n	8006842 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006894:	2b00      	cmp	r3, #0
 8006896:	d017      	beq.n	80068c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800689e:	4a18      	ldr	r2, [pc, #96]	@ (8006900 <HAL_UART_IRQHandler+0x2cc>)
 80068a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fc fa23 	bl	8002cf4 <HAL_DMA_Abort_IT>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01f      	beq.n	80068f4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80068c2:	4610      	mov	r0, r2
 80068c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c6:	e015      	b.n	80068f4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d2:	e00f      	b.n	80068f4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068de:	e009      	b.n	80068f4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80068f2:	e1c9      	b.n	8006c88 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	bf00      	nop
    return;
 80068f6:	e1c7      	b.n	8006c88 <HAL_UART_IRQHandler+0x654>
 80068f8:	10000001 	.word	0x10000001
 80068fc:	04000120 	.word	0x04000120
 8006900:	08007d83 	.word	0x08007d83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006908:	2b01      	cmp	r3, #1
 800690a:	f040 8157 	bne.w	8006bbc <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006912:	f003 0310 	and.w	r3, r3, #16
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 8150 	beq.w	8006bbc <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8149 	beq.w	8006bbc <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2210      	movs	r2, #16
 8006930:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693c:	2b40      	cmp	r3, #64	@ 0x40
 800693e:	f040 80bd 	bne.w	8006abc <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8199 	beq.w	8006c8c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006960:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006964:	429a      	cmp	r2, r3
 8006966:	f080 8191 	bcs.w	8006c8c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006970:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	f040 8087 	bne.w	8006a96 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800699c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1da      	bne.n	8006988 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3308      	adds	r3, #8
 80069d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3308      	adds	r3, #8
 80069f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e1      	bne.n	80069d2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e3      	bne.n	8006a0e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a64:	f023 0310 	bic.w	r3, r3, #16
 8006a68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e4      	bne.n	8006a54 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fc f8d6 	bl	8002c42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8006aae:	b292      	uxth	r2, r2
 8006ab0:	1a8a      	subs	r2, r1, r2
 8006ab2:	b292      	uxth	r2, r2
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aba:	e0e7      	b.n	8006c8c <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80d9 	beq.w	8006c90 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8006ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 80d4 	beq.w	8006c90 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006afc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b0c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e4      	bne.n	8006ae8 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3308      	adds	r3, #8
 8006b24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3308      	adds	r3, #8
 8006b42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b46:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e1      	bne.n	8006b1e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0310 	bic.w	r3, r3, #16
 8006b82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	69b9      	ldr	r1, [r7, #24]
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e4      	bne.n	8006b6e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006bb0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bba:	e069      	b.n	8006c90 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d010      	beq.n	8006bea <HAL_UART_IRQHandler+0x5b6>
 8006bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006bdc:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006be8:	e055      	b.n	8006c96 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d014      	beq.n	8006c20 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d105      	bne.n	8006c0e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d008      	beq.n	8006c20 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d03e      	beq.n	8006c94 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
    }
    return;
 8006c1e:	e039      	b.n	8006c94 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d009      	beq.n	8006c40 <HAL_UART_IRQHandler+0x60c>
 8006c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 f8ba 	bl	8007db2 <UART_EndTransmit_IT>
    return;
 8006c3e:	e02a      	b.n	8006c96 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <HAL_UART_IRQHandler+0x630>
 8006c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c62:	e018      	b.n	8006c96 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d012      	beq.n	8006c96 <HAL_UART_IRQHandler+0x662>
 8006c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	da0e      	bge.n	8006c96 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c82:	e008      	b.n	8006c96 <HAL_UART_IRQHandler+0x662>
      return;
 8006c84:	bf00      	nop
 8006c86:	e006      	b.n	8006c96 <HAL_UART_IRQHandler+0x662>
    return;
 8006c88:	bf00      	nop
 8006c8a:	e004      	b.n	8006c96 <HAL_UART_IRQHandler+0x662>
      return;
 8006c8c:	bf00      	nop
 8006c8e:	e002      	b.n	8006c96 <HAL_UART_IRQHandler+0x662>
      return;
 8006c90:	bf00      	nop
 8006c92:	e000      	b.n	8006c96 <HAL_UART_IRQHandler+0x662>
    return;
 8006c94:	bf00      	nop
  }
}
 8006c96:	37e8      	adds	r7, #232	@ 0xe8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a09      	ldr	r2, [pc, #36]	@ (8006d88 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d009      	beq.n	8006d7c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	615a      	str	r2, [r3, #20]
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40008000 	.word	0x40008000

08006d8c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a18      	ldr	r2, [pc, #96]	@ (8006dfc <HAL_UART_EnableReceiverTimeout+0x70>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d027      	beq.n	8006dee <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d120      	bne.n	8006dea <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_UART_EnableReceiverTimeout+0x2a>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e01c      	b.n	8006df0 <HAL_UART_EnableReceiverTimeout+0x64>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2224      	movs	r2, #36	@ 0x24
 8006dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006dd4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e002      	b.n	8006df0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8006dea:	2302      	movs	r3, #2
 8006dec:	e000      	b.n	8006df0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
  }
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	40008000 	.word	0x40008000

08006e00 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
	...

08006e1c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a1a      	ldr	r2, [pc, #104]	@ (8006e90 <UART_InitCallbacksToDefault+0x74>)
 8006e28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a19      	ldr	r2, [pc, #100]	@ (8006e94 <UART_InitCallbacksToDefault+0x78>)
 8006e30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a18      	ldr	r2, [pc, #96]	@ (8006e98 <UART_InitCallbacksToDefault+0x7c>)
 8006e38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a17      	ldr	r2, [pc, #92]	@ (8006e9c <UART_InitCallbacksToDefault+0x80>)
 8006e40:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a16      	ldr	r2, [pc, #88]	@ (8006ea0 <UART_InitCallbacksToDefault+0x84>)
 8006e48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a15      	ldr	r2, [pc, #84]	@ (8006ea4 <UART_InitCallbacksToDefault+0x88>)
 8006e50:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a14      	ldr	r2, [pc, #80]	@ (8006ea8 <UART_InitCallbacksToDefault+0x8c>)
 8006e58:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a13      	ldr	r2, [pc, #76]	@ (8006eac <UART_InitCallbacksToDefault+0x90>)
 8006e60:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a12      	ldr	r2, [pc, #72]	@ (8006eb0 <UART_InitCallbacksToDefault+0x94>)
 8006e68:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a11      	ldr	r2, [pc, #68]	@ (8006eb4 <UART_InitCallbacksToDefault+0x98>)
 8006e70:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a10      	ldr	r2, [pc, #64]	@ (8006eb8 <UART_InitCallbacksToDefault+0x9c>)
 8006e78:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8006ebc <UART_InitCallbacksToDefault+0xa0>)
 8006e80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	08006cb1 	.word	0x08006cb1
 8006e94:	08006c9d 	.word	0x08006c9d
 8006e98:	08006cd9 	.word	0x08006cd9
 8006e9c:	08006cc5 	.word	0x08006cc5
 8006ea0:	08006ced 	.word	0x08006ced
 8006ea4:	08006d01 	.word	0x08006d01
 8006ea8:	08006d15 	.word	0x08006d15
 8006eac:	08006d29 	.word	0x08006d29
 8006eb0:	08007e0d 	.word	0x08007e0d
 8006eb4:	08007e21 	.word	0x08007e21
 8006eb8:	08007e35 	.word	0x08007e35
 8006ebc:	08006d3d 	.word	0x08006d3d

08006ec0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec4:	b08c      	sub	sp, #48	@ 0x30
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4baa      	ldr	r3, [pc, #680]	@ (8007198 <UART_SetConfig+0x2d8>)
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a9f      	ldr	r2, [pc, #636]	@ (800719c <UART_SetConfig+0x2dc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d004      	beq.n	8006f2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006f36:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f40:	430b      	orrs	r3, r1
 8006f42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4a:	f023 010f 	bic.w	r1, r3, #15
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a90      	ldr	r2, [pc, #576]	@ (80071a0 <UART_SetConfig+0x2e0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d125      	bne.n	8006fb0 <UART_SetConfig+0xf0>
 8006f64:	4b8f      	ldr	r3, [pc, #572]	@ (80071a4 <UART_SetConfig+0x2e4>)
 8006f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d81a      	bhi.n	8006fa8 <UART_SetConfig+0xe8>
 8006f72:	a201      	add	r2, pc, #4	@ (adr r2, 8006f78 <UART_SetConfig+0xb8>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006f89 	.word	0x08006f89
 8006f7c:	08006f99 	.word	0x08006f99
 8006f80:	08006f91 	.word	0x08006f91
 8006f84:	08006fa1 	.word	0x08006fa1
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8e:	e116      	b.n	80071be <UART_SetConfig+0x2fe>
 8006f90:	2302      	movs	r3, #2
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f96:	e112      	b.n	80071be <UART_SetConfig+0x2fe>
 8006f98:	2304      	movs	r3, #4
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9e:	e10e      	b.n	80071be <UART_SetConfig+0x2fe>
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa6:	e10a      	b.n	80071be <UART_SetConfig+0x2fe>
 8006fa8:	2310      	movs	r3, #16
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fae:	e106      	b.n	80071be <UART_SetConfig+0x2fe>
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a7c      	ldr	r2, [pc, #496]	@ (80071a8 <UART_SetConfig+0x2e8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d138      	bne.n	800702c <UART_SetConfig+0x16c>
 8006fba:	4b7a      	ldr	r3, [pc, #488]	@ (80071a4 <UART_SetConfig+0x2e4>)
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc0:	f003 030c 	and.w	r3, r3, #12
 8006fc4:	2b0c      	cmp	r3, #12
 8006fc6:	d82d      	bhi.n	8007024 <UART_SetConfig+0x164>
 8006fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <UART_SetConfig+0x110>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08007005 	.word	0x08007005
 8006fd4:	08007025 	.word	0x08007025
 8006fd8:	08007025 	.word	0x08007025
 8006fdc:	08007025 	.word	0x08007025
 8006fe0:	08007015 	.word	0x08007015
 8006fe4:	08007025 	.word	0x08007025
 8006fe8:	08007025 	.word	0x08007025
 8006fec:	08007025 	.word	0x08007025
 8006ff0:	0800700d 	.word	0x0800700d
 8006ff4:	08007025 	.word	0x08007025
 8006ff8:	08007025 	.word	0x08007025
 8006ffc:	08007025 	.word	0x08007025
 8007000:	0800701d 	.word	0x0800701d
 8007004:	2300      	movs	r3, #0
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700a:	e0d8      	b.n	80071be <UART_SetConfig+0x2fe>
 800700c:	2302      	movs	r3, #2
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007012:	e0d4      	b.n	80071be <UART_SetConfig+0x2fe>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800701a:	e0d0      	b.n	80071be <UART_SetConfig+0x2fe>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007022:	e0cc      	b.n	80071be <UART_SetConfig+0x2fe>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800702a:	e0c8      	b.n	80071be <UART_SetConfig+0x2fe>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a5e      	ldr	r2, [pc, #376]	@ (80071ac <UART_SetConfig+0x2ec>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d125      	bne.n	8007082 <UART_SetConfig+0x1c2>
 8007036:	4b5b      	ldr	r3, [pc, #364]	@ (80071a4 <UART_SetConfig+0x2e4>)
 8007038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800703c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007040:	2b30      	cmp	r3, #48	@ 0x30
 8007042:	d016      	beq.n	8007072 <UART_SetConfig+0x1b2>
 8007044:	2b30      	cmp	r3, #48	@ 0x30
 8007046:	d818      	bhi.n	800707a <UART_SetConfig+0x1ba>
 8007048:	2b20      	cmp	r3, #32
 800704a:	d00a      	beq.n	8007062 <UART_SetConfig+0x1a2>
 800704c:	2b20      	cmp	r3, #32
 800704e:	d814      	bhi.n	800707a <UART_SetConfig+0x1ba>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <UART_SetConfig+0x19a>
 8007054:	2b10      	cmp	r3, #16
 8007056:	d008      	beq.n	800706a <UART_SetConfig+0x1aa>
 8007058:	e00f      	b.n	800707a <UART_SetConfig+0x1ba>
 800705a:	2300      	movs	r3, #0
 800705c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007060:	e0ad      	b.n	80071be <UART_SetConfig+0x2fe>
 8007062:	2302      	movs	r3, #2
 8007064:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007068:	e0a9      	b.n	80071be <UART_SetConfig+0x2fe>
 800706a:	2304      	movs	r3, #4
 800706c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007070:	e0a5      	b.n	80071be <UART_SetConfig+0x2fe>
 8007072:	2308      	movs	r3, #8
 8007074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007078:	e0a1      	b.n	80071be <UART_SetConfig+0x2fe>
 800707a:	2310      	movs	r3, #16
 800707c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007080:	e09d      	b.n	80071be <UART_SetConfig+0x2fe>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a4a      	ldr	r2, [pc, #296]	@ (80071b0 <UART_SetConfig+0x2f0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d125      	bne.n	80070d8 <UART_SetConfig+0x218>
 800708c:	4b45      	ldr	r3, [pc, #276]	@ (80071a4 <UART_SetConfig+0x2e4>)
 800708e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007092:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007096:	2bc0      	cmp	r3, #192	@ 0xc0
 8007098:	d016      	beq.n	80070c8 <UART_SetConfig+0x208>
 800709a:	2bc0      	cmp	r3, #192	@ 0xc0
 800709c:	d818      	bhi.n	80070d0 <UART_SetConfig+0x210>
 800709e:	2b80      	cmp	r3, #128	@ 0x80
 80070a0:	d00a      	beq.n	80070b8 <UART_SetConfig+0x1f8>
 80070a2:	2b80      	cmp	r3, #128	@ 0x80
 80070a4:	d814      	bhi.n	80070d0 <UART_SetConfig+0x210>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <UART_SetConfig+0x1f0>
 80070aa:	2b40      	cmp	r3, #64	@ 0x40
 80070ac:	d008      	beq.n	80070c0 <UART_SetConfig+0x200>
 80070ae:	e00f      	b.n	80070d0 <UART_SetConfig+0x210>
 80070b0:	2300      	movs	r3, #0
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b6:	e082      	b.n	80071be <UART_SetConfig+0x2fe>
 80070b8:	2302      	movs	r3, #2
 80070ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070be:	e07e      	b.n	80071be <UART_SetConfig+0x2fe>
 80070c0:	2304      	movs	r3, #4
 80070c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c6:	e07a      	b.n	80071be <UART_SetConfig+0x2fe>
 80070c8:	2308      	movs	r3, #8
 80070ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ce:	e076      	b.n	80071be <UART_SetConfig+0x2fe>
 80070d0:	2310      	movs	r3, #16
 80070d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d6:	e072      	b.n	80071be <UART_SetConfig+0x2fe>
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a35      	ldr	r2, [pc, #212]	@ (80071b4 <UART_SetConfig+0x2f4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d12a      	bne.n	8007138 <UART_SetConfig+0x278>
 80070e2:	4b30      	ldr	r3, [pc, #192]	@ (80071a4 <UART_SetConfig+0x2e4>)
 80070e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070f0:	d01a      	beq.n	8007128 <UART_SetConfig+0x268>
 80070f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070f6:	d81b      	bhi.n	8007130 <UART_SetConfig+0x270>
 80070f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070fc:	d00c      	beq.n	8007118 <UART_SetConfig+0x258>
 80070fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007102:	d815      	bhi.n	8007130 <UART_SetConfig+0x270>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <UART_SetConfig+0x250>
 8007108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800710c:	d008      	beq.n	8007120 <UART_SetConfig+0x260>
 800710e:	e00f      	b.n	8007130 <UART_SetConfig+0x270>
 8007110:	2300      	movs	r3, #0
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007116:	e052      	b.n	80071be <UART_SetConfig+0x2fe>
 8007118:	2302      	movs	r3, #2
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711e:	e04e      	b.n	80071be <UART_SetConfig+0x2fe>
 8007120:	2304      	movs	r3, #4
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007126:	e04a      	b.n	80071be <UART_SetConfig+0x2fe>
 8007128:	2308      	movs	r3, #8
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712e:	e046      	b.n	80071be <UART_SetConfig+0x2fe>
 8007130:	2310      	movs	r3, #16
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007136:	e042      	b.n	80071be <UART_SetConfig+0x2fe>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a17      	ldr	r2, [pc, #92]	@ (800719c <UART_SetConfig+0x2dc>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d13a      	bne.n	80071b8 <UART_SetConfig+0x2f8>
 8007142:	4b18      	ldr	r3, [pc, #96]	@ (80071a4 <UART_SetConfig+0x2e4>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007148:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800714c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007150:	d01a      	beq.n	8007188 <UART_SetConfig+0x2c8>
 8007152:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007156:	d81b      	bhi.n	8007190 <UART_SetConfig+0x2d0>
 8007158:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800715c:	d00c      	beq.n	8007178 <UART_SetConfig+0x2b8>
 800715e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007162:	d815      	bhi.n	8007190 <UART_SetConfig+0x2d0>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <UART_SetConfig+0x2b0>
 8007168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800716c:	d008      	beq.n	8007180 <UART_SetConfig+0x2c0>
 800716e:	e00f      	b.n	8007190 <UART_SetConfig+0x2d0>
 8007170:	2300      	movs	r3, #0
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007176:	e022      	b.n	80071be <UART_SetConfig+0x2fe>
 8007178:	2302      	movs	r3, #2
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717e:	e01e      	b.n	80071be <UART_SetConfig+0x2fe>
 8007180:	2304      	movs	r3, #4
 8007182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007186:	e01a      	b.n	80071be <UART_SetConfig+0x2fe>
 8007188:	2308      	movs	r3, #8
 800718a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718e:	e016      	b.n	80071be <UART_SetConfig+0x2fe>
 8007190:	2310      	movs	r3, #16
 8007192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007196:	e012      	b.n	80071be <UART_SetConfig+0x2fe>
 8007198:	cfff69f3 	.word	0xcfff69f3
 800719c:	40008000 	.word	0x40008000
 80071a0:	40013800 	.word	0x40013800
 80071a4:	40021000 	.word	0x40021000
 80071a8:	40004400 	.word	0x40004400
 80071ac:	40004800 	.word	0x40004800
 80071b0:	40004c00 	.word	0x40004c00
 80071b4:	40005000 	.word	0x40005000
 80071b8:	2310      	movs	r3, #16
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4aae      	ldr	r2, [pc, #696]	@ (800747c <UART_SetConfig+0x5bc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	f040 8097 	bne.w	80072f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	d823      	bhi.n	800721a <UART_SetConfig+0x35a>
 80071d2:	a201      	add	r2, pc, #4	@ (adr r2, 80071d8 <UART_SetConfig+0x318>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	080071fd 	.word	0x080071fd
 80071dc:	0800721b 	.word	0x0800721b
 80071e0:	08007205 	.word	0x08007205
 80071e4:	0800721b 	.word	0x0800721b
 80071e8:	0800720b 	.word	0x0800720b
 80071ec:	0800721b 	.word	0x0800721b
 80071f0:	0800721b 	.word	0x0800721b
 80071f4:	0800721b 	.word	0x0800721b
 80071f8:	08007213 	.word	0x08007213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071fc:	f7fc fe5e 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8007200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007202:	e010      	b.n	8007226 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007204:	4b9e      	ldr	r3, [pc, #632]	@ (8007480 <UART_SetConfig+0x5c0>)
 8007206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007208:	e00d      	b.n	8007226 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800720a:	f7fc fde9 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 800720e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007210:	e009      	b.n	8007226 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007218:	e005      	b.n	8007226 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007224:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8130 	beq.w	800748e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007232:	4a94      	ldr	r2, [pc, #592]	@ (8007484 <UART_SetConfig+0x5c4>)
 8007234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007238:	461a      	mov	r2, r3
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007240:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	4613      	mov	r3, r2
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	4413      	add	r3, r2
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	429a      	cmp	r2, r3
 8007250:	d305      	bcc.n	800725e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	429a      	cmp	r2, r3
 800725c:	d903      	bls.n	8007266 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007264:	e113      	b.n	800748e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	2200      	movs	r2, #0
 800726a:	60bb      	str	r3, [r7, #8]
 800726c:	60fa      	str	r2, [r7, #12]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007272:	4a84      	ldr	r2, [pc, #528]	@ (8007484 <UART_SetConfig+0x5c4>)
 8007274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007278:	b29b      	uxth	r3, r3
 800727a:	2200      	movs	r2, #0
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007284:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007288:	f7f9 fbbc 	bl	8000a04 <__aeabi_uldivmod>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4610      	mov	r0, r2
 8007292:	4619      	mov	r1, r3
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	020b      	lsls	r3, r1, #8
 800729e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072a2:	0202      	lsls	r2, r0, #8
 80072a4:	6979      	ldr	r1, [r7, #20]
 80072a6:	6849      	ldr	r1, [r1, #4]
 80072a8:	0849      	lsrs	r1, r1, #1
 80072aa:	2000      	movs	r0, #0
 80072ac:	460c      	mov	r4, r1
 80072ae:	4605      	mov	r5, r0
 80072b0:	eb12 0804 	adds.w	r8, r2, r4
 80072b4:	eb43 0905 	adc.w	r9, r3, r5
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	469a      	mov	sl, r3
 80072c0:	4693      	mov	fp, r2
 80072c2:	4652      	mov	r2, sl
 80072c4:	465b      	mov	r3, fp
 80072c6:	4640      	mov	r0, r8
 80072c8:	4649      	mov	r1, r9
 80072ca:	f7f9 fb9b 	bl	8000a04 <__aeabi_uldivmod>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4613      	mov	r3, r2
 80072d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072dc:	d308      	bcc.n	80072f0 <UART_SetConfig+0x430>
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072e4:	d204      	bcs.n	80072f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6a3a      	ldr	r2, [r7, #32]
 80072ec:	60da      	str	r2, [r3, #12]
 80072ee:	e0ce      	b.n	800748e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072f6:	e0ca      	b.n	800748e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007300:	d166      	bne.n	80073d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007302:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007306:	2b08      	cmp	r3, #8
 8007308:	d827      	bhi.n	800735a <UART_SetConfig+0x49a>
 800730a:	a201      	add	r2, pc, #4	@ (adr r2, 8007310 <UART_SetConfig+0x450>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	08007335 	.word	0x08007335
 8007314:	0800733d 	.word	0x0800733d
 8007318:	08007345 	.word	0x08007345
 800731c:	0800735b 	.word	0x0800735b
 8007320:	0800734b 	.word	0x0800734b
 8007324:	0800735b 	.word	0x0800735b
 8007328:	0800735b 	.word	0x0800735b
 800732c:	0800735b 	.word	0x0800735b
 8007330:	08007353 	.word	0x08007353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007334:	f7fc fdc2 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8007338:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800733a:	e014      	b.n	8007366 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800733c:	f7fc fdd4 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8007340:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007342:	e010      	b.n	8007366 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007344:	4b4e      	ldr	r3, [pc, #312]	@ (8007480 <UART_SetConfig+0x5c0>)
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007348:	e00d      	b.n	8007366 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800734a:	f7fc fd49 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 800734e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007350:	e009      	b.n	8007366 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007356:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007358:	e005      	b.n	8007366 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007364:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8090 	beq.w	800748e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007372:	4a44      	ldr	r2, [pc, #272]	@ (8007484 <UART_SetConfig+0x5c4>)
 8007374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007378:	461a      	mov	r2, r3
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007380:	005a      	lsls	r2, r3, #1
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	085b      	lsrs	r3, r3, #1
 8007388:	441a      	add	r2, r3
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007392:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	2b0f      	cmp	r3, #15
 8007398:	d916      	bls.n	80073c8 <UART_SetConfig+0x508>
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a0:	d212      	bcs.n	80073c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f023 030f 	bic.w	r3, r3, #15
 80073aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	085b      	lsrs	r3, r3, #1
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	8bfb      	ldrh	r3, [r7, #30]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	8bfa      	ldrh	r2, [r7, #30]
 80073c4:	60da      	str	r2, [r3, #12]
 80073c6:	e062      	b.n	800748e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073ce:	e05e      	b.n	800748e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d828      	bhi.n	800742a <UART_SetConfig+0x56a>
 80073d8:	a201      	add	r2, pc, #4	@ (adr r2, 80073e0 <UART_SetConfig+0x520>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	08007405 	.word	0x08007405
 80073e4:	0800740d 	.word	0x0800740d
 80073e8:	08007415 	.word	0x08007415
 80073ec:	0800742b 	.word	0x0800742b
 80073f0:	0800741b 	.word	0x0800741b
 80073f4:	0800742b 	.word	0x0800742b
 80073f8:	0800742b 	.word	0x0800742b
 80073fc:	0800742b 	.word	0x0800742b
 8007400:	08007423 	.word	0x08007423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007404:	f7fc fd5a 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8007408:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800740a:	e014      	b.n	8007436 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800740c:	f7fc fd6c 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8007410:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007412:	e010      	b.n	8007436 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007414:	4b1a      	ldr	r3, [pc, #104]	@ (8007480 <UART_SetConfig+0x5c0>)
 8007416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007418:	e00d      	b.n	8007436 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800741a:	f7fc fce1 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 800741e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007420:	e009      	b.n	8007436 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007428:	e005      	b.n	8007436 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007434:	bf00      	nop
    }

    if (pclk != 0U)
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	2b00      	cmp	r3, #0
 800743a:	d028      	beq.n	800748e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007440:	4a10      	ldr	r2, [pc, #64]	@ (8007484 <UART_SetConfig+0x5c4>)
 8007442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007446:	461a      	mov	r2, r3
 8007448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744a:	fbb3 f2f2 	udiv	r2, r3, r2
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	441a      	add	r2, r3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	fbb2 f3f3 	udiv	r3, r2, r3
 800745e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	2b0f      	cmp	r3, #15
 8007464:	d910      	bls.n	8007488 <UART_SetConfig+0x5c8>
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800746c:	d20c      	bcs.n	8007488 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	b29a      	uxth	r2, r3
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60da      	str	r2, [r3, #12]
 8007478:	e009      	b.n	800748e <UART_SetConfig+0x5ce>
 800747a:	bf00      	nop
 800747c:	40008000 	.word	0x40008000
 8007480:	00f42400 	.word	0x00f42400
 8007484:	080080f4 	.word	0x080080f4
      }
      else
      {
        ret = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2201      	movs	r2, #1
 8007492:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2201      	movs	r2, #1
 800749a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2200      	movs	r2, #0
 80074a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2200      	movs	r2, #0
 80074a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80074aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3730      	adds	r7, #48	@ 0x30
 80074b2:	46bd      	mov	sp, r7
 80074b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080074b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756e:	f003 0320 	and.w	r3, r3, #32
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01a      	beq.n	80075ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075b6:	d10a      	bne.n	80075ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	605a      	str	r2, [r3, #4]
  }
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b098      	sub	sp, #96	@ 0x60
 8007600:	af02      	add	r7, sp, #8
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800760c:	f7fb f8da 	bl	80027c4 <HAL_GetTick>
 8007610:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b08      	cmp	r3, #8
 800761e:	d12f      	bne.n	8007680 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007620:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007628:	2200      	movs	r2, #0
 800762a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f88e 	bl	8007750 <UART_WaitOnFlagUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d022      	beq.n	8007680 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800764e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007658:	647b      	str	r3, [r7, #68]	@ 0x44
 800765a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800765e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2220      	movs	r2, #32
 8007670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e063      	b.n	8007748 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b04      	cmp	r3, #4
 800768c:	d149      	bne.n	8007722 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800768e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007696:	2200      	movs	r2, #0
 8007698:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f857 	bl	8007750 <UART_WaitOnFlagUntilTimeout>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d03c      	beq.n	8007722 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	623b      	str	r3, [r7, #32]
   return(result);
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80076c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e6      	bne.n	80076a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3308      	adds	r3, #8
 80076e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f023 0301 	bic.w	r3, r3, #1
 80076f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3308      	adds	r3, #8
 80076f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076fa:	61fa      	str	r2, [r7, #28]
 80076fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fe:	69b9      	ldr	r1, [r7, #24]
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	e841 2300 	strex	r3, r2, [r1]
 8007706:	617b      	str	r3, [r7, #20]
   return(result);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e5      	bne.n	80076da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e012      	b.n	8007748 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3758      	adds	r7, #88	@ 0x58
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	4613      	mov	r3, r2
 800775e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007760:	e04f      	b.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007768:	d04b      	beq.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800776a:	f7fb f82b 	bl	80027c4 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	429a      	cmp	r2, r3
 8007778:	d302      	bcc.n	8007780 <UART_WaitOnFlagUntilTimeout+0x30>
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e04e      	b.n	8007822 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	d037      	beq.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b80      	cmp	r3, #128	@ 0x80
 8007796:	d034      	beq.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b40      	cmp	r3, #64	@ 0x40
 800779c:	d031      	beq.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d110      	bne.n	80077ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f920 	bl	80079fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2208      	movs	r2, #8
 80077be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e029      	b.n	8007822 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077dc:	d111      	bne.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f906 	bl	80079fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e00f      	b.n	8007822 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69da      	ldr	r2, [r3, #28]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	4013      	ands	r3, r2
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	429a      	cmp	r2, r3
 8007810:	bf0c      	ite	eq
 8007812:	2301      	moveq	r3, #1
 8007814:	2300      	movne	r3, #0
 8007816:	b2db      	uxtb	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	79fb      	ldrb	r3, [r7, #7]
 800781c:	429a      	cmp	r2, r3
 800781e:	d0a0      	beq.n	8007762 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b096      	sub	sp, #88	@ 0x58
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	4613      	mov	r3, r2
 8007838:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	88fa      	ldrh	r2, [r7, #6]
 8007844:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2222      	movs	r2, #34	@ 0x22
 8007854:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800785e:	2b00      	cmp	r3, #0
 8007860:	d02d      	beq.n	80078be <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007868:	4a40      	ldr	r2, [pc, #256]	@ (800796c <UART_Start_Receive_DMA+0x140>)
 800786a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007872:	4a3f      	ldr	r2, [pc, #252]	@ (8007970 <UART_Start_Receive_DMA+0x144>)
 8007874:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800787c:	4a3d      	ldr	r2, [pc, #244]	@ (8007974 <UART_Start_Receive_DMA+0x148>)
 800787e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007886:	2200      	movs	r2, #0
 8007888:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3324      	adds	r3, #36	@ 0x24
 8007896:	4619      	mov	r1, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800789c:	461a      	mov	r2, r3
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	f7fb f954 	bl	8002b4c <HAL_DMA_Start_IT>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2210      	movs	r2, #16
 80078ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e051      	b.n	8007962 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d018      	beq.n	80078f8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ce:	e853 3f00 	ldrex	r3, [r3]
 80078d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078da:	657b      	str	r3, [r7, #84]	@ 0x54
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078e6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80078f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e6      	bne.n	80078c6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3308      	adds	r3, #8
 80078fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790a:	f043 0301 	orr.w	r3, r3, #1
 800790e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007918:	637a      	str	r2, [r7, #52]	@ 0x34
 800791a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800791e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e5      	bne.n	80078f8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3308      	adds	r3, #8
 8007932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	613b      	str	r3, [r7, #16]
   return(result);
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3308      	adds	r3, #8
 800794a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800794c:	623a      	str	r2, [r7, #32]
 800794e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	69f9      	ldr	r1, [r7, #28]
 8007952:	6a3a      	ldr	r2, [r7, #32]
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	61bb      	str	r3, [r7, #24]
   return(result);
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e5      	bne.n	800792c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3758      	adds	r7, #88	@ 0x58
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	08007b85 	.word	0x08007b85
 8007970:	08007cb9 	.word	0x08007cb9
 8007974:	08007cff 	.word	0x08007cff

08007978 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007978:	b480      	push	{r7}
 800797a:	b08f      	sub	sp, #60	@ 0x3c
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	61fb      	str	r3, [r7, #28]
   return(result);
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007994:	637b      	str	r3, [r7, #52]	@ 0x34
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079a0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e6      	bne.n	8007980 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3308      	adds	r3, #8
 80079b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80079c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3308      	adds	r3, #8
 80079d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079d2:	61ba      	str	r2, [r7, #24]
 80079d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6979      	ldr	r1, [r7, #20]
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	613b      	str	r3, [r7, #16]
   return(result);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e5      	bne.n	80079b2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80079ee:	bf00      	nop
 80079f0:	373c      	adds	r7, #60	@ 0x3c
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b095      	sub	sp, #84	@ 0x54
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0a:	e853 3f00 	ldrex	r3, [r3]
 8007a0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a20:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a28:	e841 2300 	strex	r3, r2, [r1]
 8007a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e6      	bne.n	8007a02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a4a:	f023 0301 	bic.w	r3, r3, #1
 8007a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3308      	adds	r3, #8
 8007a56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e3      	bne.n	8007a34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d118      	bne.n	8007aa6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f023 0310 	bic.w	r3, r3, #16
 8007a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a92:	61bb      	str	r3, [r7, #24]
 8007a94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	6979      	ldr	r1, [r7, #20]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e6      	bne.n	8007a74 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007aba:	bf00      	nop
 8007abc:	3754      	adds	r7, #84	@ 0x54
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b090      	sub	sp, #64	@ 0x40
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d137      	bne.n	8007b52 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	623b      	str	r3, [r7, #32]
   return(result);
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e5      	bne.n	8007aea <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3c:	61fb      	str	r3, [r7, #28]
 8007b3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	69b9      	ldr	r1, [r7, #24]
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	617b      	str	r3, [r7, #20]
   return(result);
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e6      	bne.n	8007b1e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b50:	e004      	b.n	8007b5c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8007b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b58:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007b5a:	4798      	blx	r3
}
 8007b5c:	bf00      	nop
 8007b5e:	3740      	adds	r7, #64	@ 0x40
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b70:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b09c      	sub	sp, #112	@ 0x70
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b90:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d171      	bne.n	8007c84 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007ba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e6      	bne.n	8007ba8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3308      	adds	r3, #8
 8007be0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	667b      	str	r3, [r7, #100]	@ 0x64
 8007bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007bfa:	647a      	str	r2, [r7, #68]	@ 0x44
 8007bfc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e5      	bne.n	8007bda <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3308      	adds	r3, #8
 8007c14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c24:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e5      	bne.n	8007c0e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c44:	2220      	movs	r2, #32
 8007c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d118      	bne.n	8007c84 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0310 	bic.w	r3, r3, #16
 8007c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c70:	61fb      	str	r3, [r7, #28]
 8007c72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	69b9      	ldr	r1, [r7, #24]
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	e841 2300 	strex	r3, r2, [r1]
 8007c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e6      	bne.n	8007c52 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c86:	2200      	movs	r2, #0
 8007c88:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d109      	bne.n	8007ca6 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8007c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007c98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c9a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ca2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ca4:	e004      	b.n	8007cb0 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8007ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007cae:	4798      	blx	r3
}
 8007cb0:	bf00      	nop
 8007cb2:	3770      	adds	r7, #112	@ 0x70
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d10b      	bne.n	8007cec <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007ce0:	0852      	lsrs	r2, r2, #1
 8007ce2:	b292      	uxth	r2, r2
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cea:	e004      	b.n	8007cf6 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	4798      	blx	r3
}
 8007cf6:	bf00      	nop
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b086      	sub	sp, #24
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d12:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d26:	2b80      	cmp	r3, #128	@ 0x80
 8007d28:	d109      	bne.n	8007d3e <UART_DMAError+0x40>
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	2b21      	cmp	r3, #33	@ 0x21
 8007d2e:	d106      	bne.n	8007d3e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007d38:	6978      	ldr	r0, [r7, #20]
 8007d3a:	f7ff fe1d 	bl	8007978 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d48:	2b40      	cmp	r3, #64	@ 0x40
 8007d4a:	d109      	bne.n	8007d60 <UART_DMAError+0x62>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b22      	cmp	r3, #34	@ 0x22
 8007d50:	d106      	bne.n	8007d60 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007d5a:	6978      	ldr	r0, [r7, #20]
 8007d5c:	f7ff fe4d 	bl	80079fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d66:	f043 0210 	orr.w	r2, r3, #16
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d76:	6978      	ldr	r0, [r7, #20]
 8007d78:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d7a:	bf00      	nop
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b088      	sub	sp, #32
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dce:	61fb      	str	r3, [r7, #28]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	61bb      	str	r3, [r7, #24]
 8007dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6979      	ldr	r1, [r7, #20]
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	613b      	str	r3, [r7, #16]
   return(result);
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e6      	bne.n	8007dba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e04:	bf00      	nop
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <HAL_UARTEx_DisableFifoMode+0x16>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e027      	b.n	8007eae <HAL_UARTEx_DisableFifoMode+0x66>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2224      	movs	r2, #36	@ 0x24
 8007e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0201 	bic.w	r2, r2, #1
 8007e84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	e02d      	b.n	8007f2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2224      	movs	r2, #36	@ 0x24
 8007ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0201 	bic.w	r2, r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f850 	bl	8007fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e02d      	b.n	8007faa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2224      	movs	r2, #36	@ 0x24
 8007f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0201 	bic.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f812 	bl	8007fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d108      	bne.n	8007fd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fd4:	e031      	b.n	800803a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fd6:	2308      	movs	r3, #8
 8007fd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fda:	2308      	movs	r3, #8
 8007fdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	0e5b      	lsrs	r3, r3, #25
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	0f5b      	lsrs	r3, r3, #29
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	7b3a      	ldrb	r2, [r7, #12]
 8008002:	4911      	ldr	r1, [pc, #68]	@ (8008048 <UARTEx_SetNbDataToProcess+0x94>)
 8008004:	5c8a      	ldrb	r2, [r1, r2]
 8008006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800800a:	7b3a      	ldrb	r2, [r7, #12]
 800800c:	490f      	ldr	r1, [pc, #60]	@ (800804c <UARTEx_SetNbDataToProcess+0x98>)
 800800e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008010:	fb93 f3f2 	sdiv	r3, r3, r2
 8008014:	b29a      	uxth	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	7b7a      	ldrb	r2, [r7, #13]
 8008020:	4909      	ldr	r1, [pc, #36]	@ (8008048 <UARTEx_SetNbDataToProcess+0x94>)
 8008022:	5c8a      	ldrb	r2, [r1, r2]
 8008024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008028:	7b7a      	ldrb	r2, [r7, #13]
 800802a:	4908      	ldr	r1, [pc, #32]	@ (800804c <UARTEx_SetNbDataToProcess+0x98>)
 800802c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800802e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008032:	b29a      	uxth	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800803a:	bf00      	nop
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	0800810c 	.word	0x0800810c
 800804c:	08008114 	.word	0x08008114

08008050 <memset>:
 8008050:	4402      	add	r2, r0
 8008052:	4603      	mov	r3, r0
 8008054:	4293      	cmp	r3, r2
 8008056:	d100      	bne.n	800805a <memset+0xa>
 8008058:	4770      	bx	lr
 800805a:	f803 1b01 	strb.w	r1, [r3], #1
 800805e:	e7f9      	b.n	8008054 <memset+0x4>

08008060 <__libc_init_array>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	4d0d      	ldr	r5, [pc, #52]	@ (8008098 <__libc_init_array+0x38>)
 8008064:	4c0d      	ldr	r4, [pc, #52]	@ (800809c <__libc_init_array+0x3c>)
 8008066:	1b64      	subs	r4, r4, r5
 8008068:	10a4      	asrs	r4, r4, #2
 800806a:	2600      	movs	r6, #0
 800806c:	42a6      	cmp	r6, r4
 800806e:	d109      	bne.n	8008084 <__libc_init_array+0x24>
 8008070:	4d0b      	ldr	r5, [pc, #44]	@ (80080a0 <__libc_init_array+0x40>)
 8008072:	4c0c      	ldr	r4, [pc, #48]	@ (80080a4 <__libc_init_array+0x44>)
 8008074:	f000 f826 	bl	80080c4 <_init>
 8008078:	1b64      	subs	r4, r4, r5
 800807a:	10a4      	asrs	r4, r4, #2
 800807c:	2600      	movs	r6, #0
 800807e:	42a6      	cmp	r6, r4
 8008080:	d105      	bne.n	800808e <__libc_init_array+0x2e>
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	f855 3b04 	ldr.w	r3, [r5], #4
 8008088:	4798      	blx	r3
 800808a:	3601      	adds	r6, #1
 800808c:	e7ee      	b.n	800806c <__libc_init_array+0xc>
 800808e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008092:	4798      	blx	r3
 8008094:	3601      	adds	r6, #1
 8008096:	e7f2      	b.n	800807e <__libc_init_array+0x1e>
 8008098:	08008124 	.word	0x08008124
 800809c:	08008124 	.word	0x08008124
 80080a0:	08008124 	.word	0x08008124
 80080a4:	08008128 	.word	0x08008128

080080a8 <memcpy>:
 80080a8:	440a      	add	r2, r1
 80080aa:	4291      	cmp	r1, r2
 80080ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80080b0:	d100      	bne.n	80080b4 <memcpy+0xc>
 80080b2:	4770      	bx	lr
 80080b4:	b510      	push	{r4, lr}
 80080b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080be:	4291      	cmp	r1, r2
 80080c0:	d1f9      	bne.n	80080b6 <memcpy+0xe>
 80080c2:	bd10      	pop	{r4, pc}

080080c4 <_init>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	bf00      	nop
 80080c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ca:	bc08      	pop	{r3}
 80080cc:	469e      	mov	lr, r3
 80080ce:	4770      	bx	lr

080080d0 <_fini>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	bf00      	nop
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr
