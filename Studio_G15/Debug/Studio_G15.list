
Studio_G15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d18  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007ef0  08007ef0  00008ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f30  08007f30  00009238  2**0
                  CONTENTS
  4 .ARM          00000008  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f38  08007f38  00009238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f38  08007f38  00008f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f3c  08007f3c  00008f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  08007f40  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d98  20000238  08008178  00009238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000fd0  08008178  00009fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e2e  00000000  00000000  00009268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002965  00000000  00000000  0001f096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00021a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df8  00000000  00000000  00022bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c6b  00000000  00000000  000239c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150cd  00000000  00000000  0004a62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe038  00000000  00000000  0005f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd0  00000000  00000000  0015d774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00162444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000238 	.word	0x20000238
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007ed8 	.word	0x08007ed8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000023c 	.word	0x2000023c
 8000214:	08007ed8 	.word	0x08007ed8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <modbus_1t5_Timeout+0x3c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000d00:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <modbus_1t5_Timeout+0x3c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <modbus_1t5_Timeout+0x3c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <modbus_1t5_Timeout+0x3c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f042 0201 	orr.w	r2, r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000254 	.word	0x20000254

08000d34 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <modbus_3t5_Timeout+0x1c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2201      	movs	r2, #1
 8000d42:	755a      	strb	r2, [r3, #21]

}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	20000254 	.word	0x20000254

08000d54 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f005 ff59 	bl	8006c14 <HAL_UART_GetError>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b20      	cmp	r3, #32
 8000d66:	d101      	bne.n	8000d6c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000d68:	f7ff ffc4 	bl	8000cf4 <modbus_1t5_Timeout>

	}
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000d7e:	4a25      	ldr	r2, [pc, #148]	@ (8000e14 <Modbus_init+0xa0>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000d84:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <Modbus_init+0xa0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <Modbus_init+0xa4>)
 8000d92:	210e      	movs	r1, #14
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 f94d 	bl	8005034 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	2110      	movs	r1, #16
 8000da0:	4618      	mov	r0, r3
 8000da2:	f005 fee1 	bl	8006b68 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 fef8 	bl	8006ba0 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4a19      	ldr	r2, [pc, #100]	@ (8000e1c <Modbus_init+0xa8>)
 8000db6:	2104      	movs	r1, #4
 8000db8:	4618      	mov	r0, r3
 8000dba:	f005 f8f7 	bl	8005fac <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <Modbus_init+0xa0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <Modbus_init+0xa0>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <Modbus_init+0xa0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000dd0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f005 fae7 	bl	80063b0 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <Modbus_init+0xa0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d10c      	bne.n	8000e0c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <Modbus_init+0xa0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fa8d 	bl	8004318 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <Modbus_init+0xa0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 fbd4 	bl	80045b4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000254 	.word	0x20000254
 8000e18:	08000d35 	.word	0x08000d35
 8000e1c:	08000d55 	.word	0x08000d55

08000e20 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000e2c:	23ff      	movs	r3, #255	@ 0xff
 8000e2e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000e30:	23ff      	movs	r3, #255	@ 0xff
 8000e32:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000e34:	e013      	b.n	8000e5e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	781a      	ldrb	r2, [r3, #0]
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	4053      	eors	r3, r2
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000e46:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <CRC16+0x64>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	4053      	eors	r3, r2
 8000e52:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000e54:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <CRC16+0x68>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000e5e:	883b      	ldrh	r3, [r7, #0]
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	803a      	strh	r2, [r7, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e6      	bne.n	8000e36 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	021b      	lsls	r3, r3, #8
 8000e6c:	b21a      	sxth	r2, r3
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	b29b      	uxth	r3, r3
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	20000100 	.word	0x20000100
 8000e88:	20000000 	.word	0x20000000

08000e8c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000e92:	4b7e      	ldr	r3, [pc, #504]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	7ddb      	ldrb	r3, [r3, #23]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d80a      	bhi.n	8000eb4 <Modbus_Protocal_Worker+0x28>
 8000e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea4 <Modbus_Protocal_Worker+0x18>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000ebf 	.word	0x08000ebf
 8000ea8:	08001053 	.word	0x08001053
 8000eac:	08000f4b 	.word	0x08000f4b
 8000eb0:	08000f8f 	.word	0x08000f8f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000eb4:	4b75      	ldr	r3, [pc, #468]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	75da      	strb	r2, [r3, #23]
		break;
 8000ebc:	e0e1      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000ebe:	4b73      	ldr	r3, [pc, #460]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8000eca:	4b70      	ldr	r3, [pc, #448]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8000ed2:	f000 f9cd 	bl	8001270 <Modbus_Emission>
 8000ed6:	e018      	b.n	8000f0a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8000ed8:	4b6c      	ldr	r3, [pc, #432]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8000ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d00b      	beq.n	8000f0a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000ef2:	4b66      	ldr	r3, [pc, #408]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000efa:	4b64      	ldr	r3, [pc, #400]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2200      	movs	r2, #0
 8000f00:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000f02:	4b62      	ldr	r3, [pc, #392]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2203      	movs	r2, #3
 8000f08:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000f0a:	4b60      	ldr	r3, [pc, #384]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f14:	2b20      	cmp	r3, #32
 8000f16:	f040 80ad 	bne.w	8001074 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000f1a:	4b5c      	ldr	r3, [pc, #368]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000f24:	4b59      	ldr	r3, [pc, #356]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000f2a:	4b58      	ldr	r3, [pc, #352]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4b57      	ldr	r3, [pc, #348]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000f36:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f42:	4619      	mov	r1, r3
 8000f44:	f005 fa34 	bl	80063b0 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8000f48:	e094      	b.n	8001074 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000f4a:	4b50      	ldr	r3, [pc, #320]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	7d1b      	ldrb	r3, [r3, #20]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 8091 	beq.w	8001078 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000f56:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	22fe      	movs	r2, #254	@ 0xfe
 8000f5c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8000f68:	4b48      	ldr	r3, [pc, #288]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8000f78:	4b44      	ldr	r3, [pc, #272]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000f7c:	1a8a      	subs	r2, r1, r2
 8000f7e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8000f80:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000f84:	4b41      	ldr	r3, [pc, #260]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2204      	movs	r2, #4
 8000f8a:	75da      	strb	r2, [r3, #23]
		}
		break;
 8000f8c:	e074      	b.n	8001078 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8000f96:	f113 0f02 	cmn.w	r3, #2
 8000f9a:	d150      	bne.n	800103e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000fa4:	4b39      	ldr	r3, [pc, #228]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000fac:	4b37      	ldr	r3, [pc, #220]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000fb4:	3b02      	subs	r3, #2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4610      	mov	r0, r2
 8000fba:	f7ff ff31 	bl	8000e20 <CRC16>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000fc2:	793a      	ldrb	r2, [r7, #4]
 8000fc4:	4b31      	ldr	r3, [pc, #196]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	4b30      	ldr	r3, [pc, #192]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000fd0:	3b02      	subs	r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d10c      	bne.n	8000ff6 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000fdc:	797a      	ldrb	r2, [r7, #5]
 8000fde:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fe0:	6819      	ldr	r1, [r3, #0]
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000fea:	3b01      	subs	r3, #1
 8000fec:	440b      	add	r3, r1
 8000fee:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d004      	beq.n	8001000 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000ff6:	4b25      	ldr	r3, [pc, #148]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	22ff      	movs	r2, #255	@ 0xff
 8000ffc:	759a      	strb	r2, [r3, #22]
				break;
 8000ffe:	e040      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001008:	4b20      	ldr	r3, [pc, #128]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d113      	bne.n	800103a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001022:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800102c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800102e:	461a      	mov	r2, r3
 8001030:	f006 ff44 	bl	8007ebc <memcpy>

			//execute command
			Modbus_frame_response();
 8001034:	f000 f904 	bl	8001240 <Modbus_frame_response>
 8001038:	e001      	b.n	800103e <Modbus_Protocal_Worker+0x1b2>
				break;
 800103a:	bf00      	nop
					}
		break;


	}
}
 800103c:	e021      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	7d5b      	ldrb	r3, [r3, #21]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d019      	beq.n	800107c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2201      	movs	r2, #1
 800104e:	75da      	strb	r2, [r3, #23]
		break;
 8001050:	e014      	b.n	800107c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105c:	2b20      	cmp	r3, #32
 800105e:	d10f      	bne.n	8001080 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <Modbus_Protocal_Worker+0x200>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2201      	movs	r2, #1
 8001070:	75da      	strb	r2, [r3, #23]
		break;
 8001072:	e005      	b.n	8001080 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001074:	bf00      	nop
 8001076:	e004      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001078:	bf00      	nop
 800107a:	e002      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
		break;
 800107c:	bf00      	nop
 800107e:	e000      	b.n	8001082 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001080:	bf00      	nop
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000254 	.word	0x20000254

08001090 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <modbusWrite1Register+0x7c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	7e5b      	ldrb	r3, [r3, #25]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4a1a      	ldr	r2, [pc, #104]	@ (800110c <modbusWrite1Register+0x7c>)
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	7e92      	ldrb	r2, [r2, #26]
 80010a6:	4413      	add	r3, r2
 80010a8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80010aa:	88fa      	ldrh	r2, [r7, #6]
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <modbusWrite1Register+0x7c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d903      	bls.n	80010be <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80010b6:	2002      	movs	r0, #2
 80010b8:	f000 f8a0 	bl	80011fc <ModbusErrorReply>
			 return;
 80010bc:	e023      	b.n	8001106 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <modbusWrite1Register+0x7c>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <modbusWrite1Register+0x7c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6859      	ldr	r1, [r3, #4]
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	440b      	add	r3, r1
 80010ce:	7ed2      	ldrb	r2, [r2, #27]
 80010d0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <modbusWrite1Register+0x7c>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <modbusWrite1Register+0x7c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	440b      	add	r3, r1
 80010e2:	7f12      	ldrb	r2, [r2, #28]
 80010e4:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <modbusWrite1Register+0x7c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <modbusWrite1Register+0x7c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80010f4:	2208      	movs	r2, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	f006 fee0 	bl	8007ebc <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <modbusWrite1Register+0x7c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2205      	movs	r2, #5
 8001102:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000254 	.word	0x20000254

08001110 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001116:	4b38      	ldr	r3, [pc, #224]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	7edb      	ldrb	r3, [r3, #27]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b29b      	uxth	r3, r3
 8001120:	4a35      	ldr	r2, [pc, #212]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	7f12      	ldrb	r2, [r2, #28]
 8001126:	4413      	add	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800112a:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <modbusRead1Register+0xe8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	7e5b      	ldrb	r3, [r3, #25]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b29b      	uxth	r3, r3
 8001134:	4a30      	ldr	r2, [pc, #192]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	7e92      	ldrb	r2, [r2, #26]
 800113a:	4413      	add	r3, r2
 800113c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <modbusRead1Register+0x3a>
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	2b7d      	cmp	r3, #125	@ 0x7d
 8001148:	d903      	bls.n	8001152 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800114a:	2003      	movs	r0, #3
 800114c:	f000 f856 	bl	80011fc <ModbusErrorReply>
		 return;
 8001150:	e04e      	b.n	80011f0 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001152:	88ba      	ldrh	r2, [r7, #4]
 8001154:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	429a      	cmp	r2, r3
 800115c:	d808      	bhi.n	8001170 <modbusRead1Register+0x60>
 800115e:	88ba      	ldrh	r2, [r7, #4]
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4413      	add	r3, r2
 8001164:	461a      	mov	r2, r3
 8001166:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	429a      	cmp	r2, r3
 800116e:	d903      	bls.n	8001178 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001170:	2002      	movs	r0, #2
 8001172:	f000 f843 	bl	80011fc <ModbusErrorReply>
		 return;
 8001176:	e03b      	b.n	80011f0 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001178:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <modbusRead1Register+0xe8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2203      	movs	r2, #3
 800117e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	0052      	lsls	r2, r2, #1
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001192:	2400      	movs	r4, #0
 8001194:	e020      	b.n	80011d8 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <modbusRead1Register+0xe8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	88bb      	ldrh	r3, [r7, #4]
 800119e:	4423      	add	r3, r4
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	18d1      	adds	r1, r2, r3
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <modbusRead1Register+0xe8>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	1c63      	adds	r3, r4, #1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	7849      	ldrb	r1, [r1, #1]
 80011ae:	4413      	add	r3, r2
 80011b0:	460a      	mov	r2, r1
 80011b2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <modbusRead1Register+0xe8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	88bb      	ldrh	r3, [r7, #4]
 80011be:	4423      	add	r3, r4
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	18d1      	adds	r1, r2, r3
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <modbusRead1Register+0xe8>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	0063      	lsls	r3, r4, #1
 80011ca:	3303      	adds	r3, #3
 80011cc:	7809      	ldrb	r1, [r1, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	460a      	mov	r2, r1
 80011d2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80011d6:	3401      	adds	r4, #1
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	429c      	cmp	r4, r3
 80011dc:	dbdb      	blt.n	8001196 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	3301      	adds	r3, #1
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <modbusRead1Register+0xe8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	0052      	lsls	r2, r2, #1
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000254 	.word	0x20000254

080011fc <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <ModbusErrorReply+0x40>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	7e1a      	ldrb	r2, [r3, #24]
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <ModbusErrorReply+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <ModbusErrorReply+0x40>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <ModbusErrorReply+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2202      	movs	r2, #2
 800122a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000254 	.word	0x20000254

08001240 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001244:	4b09      	ldr	r3, [pc, #36]	@ (800126c <Modbus_frame_response+0x2c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	7e1b      	ldrb	r3, [r3, #24]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d004      	beq.n	8001258 <Modbus_frame_response+0x18>
 800124e:	2b06      	cmp	r3, #6
 8001250:	d105      	bne.n	800125e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001252:	f7ff ff1d 	bl	8001090 <modbusWrite1Register>
		break;
 8001256:	e006      	b.n	8001266 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001258:	f7ff ff5a 	bl	8001110 <modbusRead1Register>
		break;
 800125c:	e003      	b.n	8001266 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff ffcc 	bl	80011fc <ModbusErrorReply>
		break;
 8001264:	bf00      	nop

	}
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000254 	.word	0x20000254

08001270 <Modbus_Emission>:

void Modbus_Emission()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001276:	4b38      	ldr	r3, [pc, #224]	@ (8001358 <Modbus_Emission+0xe8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001280:	2b20      	cmp	r3, #32
 8001282:	d15d      	bne.n	8001340 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001284:	4b34      	ldr	r3, [pc, #208]	@ (8001358 <Modbus_Emission+0xe8>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b33      	ldr	r3, [pc, #204]	@ (8001358 <Modbus_Emission+0xe8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	7812      	ldrb	r2, [r2, #0]
 800128e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001292:	4b31      	ldr	r3, [pc, #196]	@ (8001358 <Modbus_Emission+0xe8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800129a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800129c:	4b2e      	ldr	r3, [pc, #184]	@ (8001358 <Modbus_Emission+0xe8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80012a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <Modbus_Emission+0xe8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80012ac:	461a      	mov	r2, r3
 80012ae:	f006 fe05 	bl	8007ebc <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80012b2:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <Modbus_Emission+0xe8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <Modbus_Emission+0xe8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3203      	adds	r2, #3
 80012c2:	b292      	uxth	r2, r2
 80012c4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80012c8:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <Modbus_Emission+0xe8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80012d0:	4b21      	ldr	r3, [pc, #132]	@ (8001358 <Modbus_Emission+0xe8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80012d8:	3b02      	subs	r3, #2
 80012da:	4619      	mov	r1, r3
 80012dc:	4610      	mov	r0, r2
 80012de:	f7ff fd9f 	bl	8000e20 <CRC16>
 80012e2:	4603      	mov	r3, r0
 80012e4:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <Modbus_Emission+0xe8>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <Modbus_Emission+0xe8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80012f2:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80012f4:	7939      	ldrb	r1, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	460a      	mov	r2, r1
 80012fa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80012fe:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <Modbus_Emission+0xe8>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <Modbus_Emission+0xe8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800130a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800130c:	7979      	ldrb	r1, [r7, #5]
 800130e:	4413      	add	r3, r2
 8001310:	460a      	mov	r2, r1
 8001312:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <Modbus_Emission+0xe8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001320:	2b20      	cmp	r3, #32
 8001322:	d10d      	bne.n	8001340 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <Modbus_Emission+0xe8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <Modbus_Emission+0xe8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <Modbus_Emission+0xe8>)
 8001334:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001336:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800133a:	461a      	mov	r2, r3
 800133c:	f004 ffb8 	bl	80062b0 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <Modbus_Emission+0xe8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2200      	movs	r2, #0
 8001346:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <Modbus_Emission+0xe8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	755a      	strb	r2, [r3, #21]

}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000254 	.word	0x20000254

0800135c <Heartbeat>:
BaseStruct base = {0};



//------------ Function ------------//
void Heartbeat(){
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <Heartbeat+0x18>)
 8001362:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001366:	801a      	strh	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000730 	.word	0x20000730

08001378 <Routine>:

void Routine(){
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	if(registerFrame[0x00].U16 == 18537)
 800137c:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <Routine+0x80>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	f644 0269 	movw	r2, #18537	@ 0x4869
 8001384:	4293      	cmp	r3, r2
 8001386:	d131      	bne.n	80013ec <Routine+0x74>
	{
		  registerFrame[0x04].U16 = 0b0000;
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <Routine+0x80>)
 800138a:	2200      	movs	r2, #0
 800138c:	811a      	strh	r2, [r3, #8]
		  registerFrame[0x04].U16 = 0b0001;   //Gripper status 0b0010 = 0000 0000 0000 0010
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <Routine+0x80>)
 8001390:	2201      	movs	r2, #1
 8001392:	811a      	strh	r2, [r3, #8]
		  registerFrame[0x10].U16 = 1;	//Z-axis status 0010 = 1
 8001394:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <Routine+0x80>)
 8001396:	2201      	movs	r2, #1
 8001398:	841a      	strh	r2, [r3, #32]
		  registerFrame[0x11].U16 = base.PositionZ	*10;	//Z-axis position
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <Routine+0x84>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <Routine+0x80>)
 80013ac:	845a      	strh	r2, [r3, #34]	@ 0x22
		  registerFrame[0x12].U16 = base.Speed		*10;		//Z-axis speed
 80013ae:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <Routine+0x84>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <Routine+0x80>)
 80013c0:	849a      	strh	r2, [r3, #36]	@ 0x24
		  registerFrame[0x13].U16 = base.Acc		*10;		//Z-axis acceleration
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <Routine+0x84>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <Routine+0x80>)
 80013d4:	84da      	strh	r2, [r3, #38]	@ 0x26
		  registerFrame[0x40].U16 = base.PositionX	*10;	//X-axis position
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <Routine+0x84>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <Routine+0x80>)
 80013e8:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000730 	.word	0x20000730
 80013fc:	200008c0 	.word	0x200008c0

08001400 <Vacuum>:

void Vacuum(){
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	if(registerFrame[0x02].U16 == 0b0000){
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <Vacuum+0x2c>)
 8001406:	889b      	ldrh	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d103      	bne.n	8001414 <Vacuum+0x14>
		base.Vacuum = 0;			//Vacuum status: Off
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <Vacuum+0x30>)
 800140e:	2200      	movs	r2, #0
 8001410:	821a      	strh	r2, [r3, #16]
	}
	else if(registerFrame[0x02].U16 == 0b0001){
		base.Vacuum = 1;			//Vacuum status: On
	}
}
 8001412:	e006      	b.n	8001422 <Vacuum+0x22>
	else if(registerFrame[0x02].U16 == 0b0001){
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <Vacuum+0x2c>)
 8001416:	889b      	ldrh	r3, [r3, #4]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d102      	bne.n	8001422 <Vacuum+0x22>
		base.Vacuum = 1;			//Vacuum status: On
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <Vacuum+0x30>)
 800141e:	2201      	movs	r2, #1
 8001420:	821a      	strh	r2, [r3, #16]
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	20000730 	.word	0x20000730
 8001430:	200008c0 	.word	0x200008c0

08001434 <GripperMovement>:

void GripperMovement(){
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	if(registerFrame[0x03].U16 == 0b0000){
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <GripperMovement+0x2c>)
 800143a:	88db      	ldrh	r3, [r3, #6]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d103      	bne.n	8001448 <GripperMovement+0x14>
		base.Gripper = 0;			//Gripper Movement: Backward
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <GripperMovement+0x30>)
 8001442:	2200      	movs	r2, #0
 8001444:	825a      	strh	r2, [r3, #18]
	}
	else if(registerFrame[0x03].U16 == 0b0001){
		base.Gripper = 1;			//Gripper Movement: Forward
	}
}
 8001446:	e006      	b.n	8001456 <GripperMovement+0x22>
	else if(registerFrame[0x03].U16 == 0b0001){
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <GripperMovement+0x2c>)
 800144a:	88db      	ldrh	r3, [r3, #6]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d102      	bne.n	8001456 <GripperMovement+0x22>
		base.Gripper = 1;			//Gripper Movement: Forward
 8001450:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <GripperMovement+0x30>)
 8001452:	2201      	movs	r2, #1
 8001454:	825a      	strh	r2, [r3, #18]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	20000730 	.word	0x20000730
 8001464:	200008c0 	.word	0x200008c0

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f001 f84f 	bl	800250e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f86e 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f000 fb2a 	bl	8001acc <MX_GPIO_Init>
  MX_DMA_Init();
 8001478:	f000 faf6 	bl	8001a68 <MX_DMA_Init>
  MX_TIM2_Init();
 800147c:	f000 f8b4 	bl	80015e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001480:	f000 f906 	bl	8001690 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001484:	f000 f9d6 	bl	8001834 <MX_TIM5_Init>
  MX_UART4_Init();
 8001488:	f000 fa52 	bl	8001930 <MX_UART4_Init>
  MX_TIM4_Init();
 800148c:	f000 f982 	bl	8001794 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001490:	f000 fa9c 	bl	80019cc <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001494:	f000 fa1c 	bl	80018d0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001498:	4824      	ldr	r0, [pc, #144]	@ (800152c <main+0xc4>)
 800149a:	f002 ff3d 	bl	8004318 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800149e:	4824      	ldr	r0, [pc, #144]	@ (8001530 <main+0xc8>)
 80014a0:	f002 ff3a 	bl	8004318 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 80014a4:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <main+0xcc>)
 80014a6:	4a24      	ldr	r2, [pc, #144]	@ (8001538 <main+0xd0>)
 80014a8:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80014aa:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <main+0xcc>)
 80014ac:	4a23      	ldr	r2, [pc, #140]	@ (800153c <main+0xd4>)
 80014ae:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <main+0xcc>)
 80014b2:	2215      	movs	r2, #21
 80014b4:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80014b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <main+0xcc>)
 80014b8:	22c8      	movs	r2, #200	@ 0xc8
 80014ba:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80014bc:	4920      	ldr	r1, [pc, #128]	@ (8001540 <main+0xd8>)
 80014be:	481d      	ldr	r0, [pc, #116]	@ (8001534 <main+0xcc>)
 80014c0:	f7ff fc58 	bl	8000d74 <Modbus_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Modbus
	  Modbus_Protocal_Worker();
 80014c4:	f7ff fce2 	bl	8000e8c <Modbus_Protocal_Worker>
	  Routine();
 80014c8:	f7ff ff56 	bl	8001378 <Routine>
	  Vacuum();
 80014cc:	f7ff ff98 	bl	8001400 <Vacuum>
	  GripperMovement();
 80014d0:	f7ff ffb0 	bl	8001434 <GripperMovement>
	  //--

	  //Ps2
	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 80014d4:	230a      	movs	r3, #10
 80014d6:	220a      	movs	r2, #10
 80014d8:	491a      	ldr	r1, [pc, #104]	@ (8001544 <main+0xdc>)
 80014da:	481b      	ldr	r0, [pc, #108]	@ (8001548 <main+0xe0>)
 80014dc:	f004 fe20 	bl	8006120 <HAL_UART_Receive>
	  if(ps2.ps2RX[0] == 74){
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <main+0xdc>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b4a      	cmp	r3, #74	@ 0x4a
 80014e6:	d102      	bne.n	80014ee <main+0x86>
		  ps2.stop = 1;
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <main+0xdc>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	671a      	str	r2, [r3, #112]	@ 0x70
	  }
	  if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <main+0xdc>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d112      	bne.n	800151c <main+0xb4>
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <main+0xdc>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b4b      	cmp	r3, #75	@ 0x4b
 80014fc:	d10e      	bne.n	800151c <main+0xb4>
		  ps2.stop = 0;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <main+0xdc>)
 8001500:	2200      	movs	r2, #0
 8001502:	671a      	str	r2, [r3, #112]	@ 0x70
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);		//Stop
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <main+0xe4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2200      	movs	r2, #0
 800150a:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <main+0xe4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	639a      	str	r2, [r3, #56]	@ 0x38
		  ps2.pwmOut = 0;
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <main+0xdc>)
 8001516:	2200      	movs	r2, #0
 8001518:	669a      	str	r2, [r3, #104]	@ 0x68
 800151a:	e005      	b.n	8001528 <main+0xc0>
	  }
	  else if(ps2.stop == 0){
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <main+0xdc>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1cf      	bne.n	80014c4 <main+0x5c>
		  PS2X_Reader();
 8001524:	f000 fb64 	bl	8001bf0 <PS2X_Reader>
	  Modbus_Protocal_Worker();
 8001528:	e7cc      	b.n	80014c4 <main+0x5c>
 800152a:	bf00      	nop
 800152c:	20000a8c 	.word	0x20000a8c
 8001530:	20000b58 	.word	0x20000b58
 8001534:	20000258 	.word	0x20000258
 8001538:	20000dbc 	.word	0x20000dbc
 800153c:	20000c24 	.word	0x20000c24
 8001540:	20000730 	.word	0x20000730
 8001544:	20000f48 	.word	0x20000f48
 8001548:	20000cf0 	.word	0x20000cf0
 800154c:	200009c0 	.word	0x200009c0

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	@ 0x50
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0318 	add.w	r3, r7, #24
 800155a:	2238      	movs	r2, #56	@ 0x38
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f006 fc80 	bl	8007e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001572:	2000      	movs	r0, #0
 8001574:	f001 fe3c 	bl	80031f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001582:	2340      	movs	r3, #64	@ 0x40
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001586:	2302      	movs	r3, #2
 8001588:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800158a:	2302      	movs	r3, #2
 800158c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800158e:	2304      	movs	r3, #4
 8001590:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001592:	2355      	movs	r3, #85	@ 0x55
 8001594:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001596:	2302      	movs	r3, #2
 8001598:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800159a:	2302      	movs	r3, #2
 800159c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800159e:	2302      	movs	r3, #2
 80015a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a2:	f107 0318 	add.w	r3, r7, #24
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 fed6 	bl	8003358 <HAL_RCC_OscConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015b2:	f000 fced 	bl	8001f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b6:	230f      	movs	r3, #15
 80015b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ba:	2303      	movs	r3, #3
 80015bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2104      	movs	r1, #4
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 f9d4 	bl	800397c <HAL_RCC_ClockConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015da:	f000 fcd9 	bl	8001f90 <Error_Handler>
  }
}
 80015de:	bf00      	nop
 80015e0:	3750      	adds	r7, #80	@ 0x50
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	2224      	movs	r2, #36	@ 0x24
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f006 fc34 	bl	8007e64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <MX_TIM2_Init+0xa4>)
 8001608:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800160c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <MX_TIM2_Init+0xa4>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <MX_TIM2_Init+0xa4>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_TIM2_Init+0xa4>)
 800161c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001620:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_TIM2_Init+0xa4>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <MX_TIM2_Init+0xa4>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800162e:	2303      	movs	r3, #3
 8001630:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001636:	2301      	movs	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001646:	2301      	movs	r3, #1
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <MX_TIM2_Init+0xa4>)
 800165a:	f003 f839 	bl	80046d0 <HAL_TIM_Encoder_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001664:	f000 fc94 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_TIM2_Init+0xa4>)
 8001676:	f004 fb53 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001680:	f000 fc86 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	3730      	adds	r7, #48	@ 0x30
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200008f4 	.word	0x200008f4

08001690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08e      	sub	sp, #56	@ 0x38
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001696:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b0:	463b      	mov	r3, r7
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c2:	4b32      	ldr	r3, [pc, #200]	@ (800178c <MX_TIM3_Init+0xfc>)
 80016c4:	4a32      	ldr	r2, [pc, #200]	@ (8001790 <MX_TIM3_Init+0x100>)
 80016c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 80016c8:	4b30      	ldr	r3, [pc, #192]	@ (800178c <MX_TIM3_Init+0xfc>)
 80016ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b2e      	ldr	r3, [pc, #184]	@ (800178c <MX_TIM3_Init+0xfc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 169;
 80016d6:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <MX_TIM3_Init+0xfc>)
 80016d8:	22a9      	movs	r2, #169	@ 0xa9
 80016da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016dc:	4b2b      	ldr	r3, [pc, #172]	@ (800178c <MX_TIM3_Init+0xfc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e2:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <MX_TIM3_Init+0xfc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e8:	4828      	ldr	r0, [pc, #160]	@ (800178c <MX_TIM3_Init+0xfc>)
 80016ea:	f002 fdb1 	bl	8004250 <HAL_TIM_Base_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80016f4:	f000 fc4c 	bl	8001f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001702:	4619      	mov	r1, r3
 8001704:	4821      	ldr	r0, [pc, #132]	@ (800178c <MX_TIM3_Init+0xfc>)
 8001706:	f003 fb25 	bl	8004d54 <HAL_TIM_ConfigClockSource>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001710:	f000 fc3e 	bl	8001f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001714:	481d      	ldr	r0, [pc, #116]	@ (800178c <MX_TIM3_Init+0xfc>)
 8001716:	f002 fe77 	bl	8004408 <HAL_TIM_PWM_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001720:	f000 fc36 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4816      	ldr	r0, [pc, #88]	@ (800178c <MX_TIM3_Init+0xfc>)
 8001734:	f004 faf4 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800173e:	f000 fc27 	bl	8001f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001742:	2360      	movs	r3, #96	@ 0x60
 8001744:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001752:	463b      	mov	r3, r7
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	480c      	ldr	r0, [pc, #48]	@ (800178c <MX_TIM3_Init+0xfc>)
 800175a:	f003 f9e7 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001764:	f000 fc14 	bl	8001f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	2204      	movs	r2, #4
 800176c:	4619      	mov	r1, r3
 800176e:	4807      	ldr	r0, [pc, #28]	@ (800178c <MX_TIM3_Init+0xfc>)
 8001770:	f003 f9dc 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800177a:	f000 fc09 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800177e:	4803      	ldr	r0, [pc, #12]	@ (800178c <MX_TIM3_Init+0xfc>)
 8001780:	f000 fce2 	bl	8002148 <HAL_TIM_MspPostInit>

}
 8001784:	bf00      	nop
 8001786:	3738      	adds	r7, #56	@ 0x38
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200009c0 	.word	0x200009c0
 8001790:	40000400 	.word	0x40000400

08001794 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <MX_TIM4_Init+0x98>)
 80017b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001830 <MX_TIM4_Init+0x9c>)
 80017b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <MX_TIM4_Init+0x98>)
 80017ba:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80017be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <MX_TIM4_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80017c6:	4b19      	ldr	r3, [pc, #100]	@ (800182c <MX_TIM4_Init+0x98>)
 80017c8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80017cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <MX_TIM4_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <MX_TIM4_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017da:	4814      	ldr	r0, [pc, #80]	@ (800182c <MX_TIM4_Init+0x98>)
 80017dc:	f002 fd38 	bl	8004250 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80017e6:	f000 fbd3 	bl	8001f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	480d      	ldr	r0, [pc, #52]	@ (800182c <MX_TIM4_Init+0x98>)
 80017f8:	f003 faac 	bl	8004d54 <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001802:	f000 fbc5 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	@ (800182c <MX_TIM4_Init+0x98>)
 8001814:	f004 fa84 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800181e:	f000 fbb7 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000a8c 	.word	0x20000a8c
 8001830:	40000800 	.word	0x40000800

08001834 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001852:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <MX_TIM5_Init+0x94>)
 8001854:	4a1d      	ldr	r2, [pc, #116]	@ (80018cc <MX_TIM5_Init+0x98>)
 8001856:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <MX_TIM5_Init+0x94>)
 800185a:	22a9      	movs	r2, #169	@ 0xa9
 800185c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_TIM5_Init+0x94>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001864:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <MX_TIM5_Init+0x94>)
 8001866:	f04f 32ff 	mov.w	r2, #4294967295
 800186a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <MX_TIM5_Init+0x94>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <MX_TIM5_Init+0x94>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001878:	4813      	ldr	r0, [pc, #76]	@ (80018c8 <MX_TIM5_Init+0x94>)
 800187a:	f002 fce9 	bl	8004250 <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001884:	f000 fb84 	bl	8001f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	4619      	mov	r1, r3
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <MX_TIM5_Init+0x94>)
 8001896:	f003 fa5d 	bl	8004d54 <HAL_TIM_ConfigClockSource>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80018a0:	f000 fb76 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <MX_TIM5_Init+0x94>)
 80018b2:	f004 fa35 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80018bc:	f000 fb68 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000b58 	.word	0x20000b58
 80018cc:	40000c00 	.word	0x40000c00

080018d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018d4:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <MX_TIM16_Init+0x58>)
 80018d6:	4a15      	ldr	r2, [pc, #84]	@ (800192c <MX_TIM16_Init+0x5c>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80018da:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <MX_TIM16_Init+0x58>)
 80018dc:	22a9      	movs	r2, #169	@ 0xa9
 80018de:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_TIM16_Init+0x58>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <MX_TIM16_Init+0x58>)
 80018e8:	f240 4279 	movw	r2, #1145	@ 0x479
 80018ec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_TIM16_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_TIM16_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <MX_TIM16_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001900:	4809      	ldr	r0, [pc, #36]	@ (8001928 <MX_TIM16_Init+0x58>)
 8001902:	f002 fca5 	bl	8004250 <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800190c:	f000 fb40 	bl	8001f90 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001910:	2108      	movs	r1, #8
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_TIM16_Init+0x58>)
 8001914:	f002 fde6 	bl	80044e4 <HAL_TIM_OnePulse_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800191e:	f000 fb37 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000c24 	.word	0x20000c24
 800192c:	40014400 	.word	0x40014400

08001930 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001934:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <MX_UART4_Init+0x94>)
 8001936:	4a24      	ldr	r2, [pc, #144]	@ (80019c8 <MX_UART4_Init+0x98>)
 8001938:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9700;
 800193a:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <MX_UART4_Init+0x94>)
 800193c:	f242 52e4 	movw	r2, #9700	@ 0x25e4
 8001940:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <MX_UART4_Init+0x94>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <MX_UART4_Init+0x94>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <MX_UART4_Init+0x94>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <MX_UART4_Init+0x94>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_UART4_Init+0x94>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <MX_UART4_Init+0x94>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <MX_UART4_Init+0x94>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800196c:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <MX_UART4_Init+0x94>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MX_UART4_Init+0x94>)
 8001974:	2200      	movs	r2, #0
 8001976:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001978:	4812      	ldr	r0, [pc, #72]	@ (80019c4 <MX_UART4_Init+0x94>)
 800197a:	f004 fab7 	bl	8005eec <HAL_UART_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001984:	f000 fb04 	bl	8001f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001988:	2100      	movs	r1, #0
 800198a:	480e      	ldr	r0, [pc, #56]	@ (80019c4 <MX_UART4_Init+0x94>)
 800198c:	f006 f99f 	bl	8007cce <HAL_UARTEx_SetTxFifoThreshold>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001996:	f000 fafb 	bl	8001f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800199a:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 800199e:	4809      	ldr	r0, [pc, #36]	@ (80019c4 <MX_UART4_Init+0x94>)
 80019a0:	f006 f9d3 	bl	8007d4a <HAL_UARTEx_SetRxFifoThreshold>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 80019aa:	f000 faf1 	bl	8001f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <MX_UART4_Init+0x94>)
 80019b0:	f006 f954 	bl	8007c5c <HAL_UARTEx_DisableFifoMode>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 80019ba:	f000 fae9 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000cf0 	.word	0x20000cf0
 80019c8:	40004c00 	.word	0x40004c00

080019cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d0:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 80019d2:	4a24      	ldr	r2, [pc, #144]	@ (8001a64 <MX_USART2_UART_Init+0x98>)
 80019d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80019d6:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 80019d8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80019dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 80019e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019e4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80019ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 80019ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a18:	4811      	ldr	r0, [pc, #68]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 8001a1a:	f004 fa67 	bl	8005eec <HAL_UART_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001a24:	f000 fab4 	bl	8001f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	480d      	ldr	r0, [pc, #52]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 8001a2c:	f006 f94f 	bl	8007cce <HAL_UARTEx_SetTxFifoThreshold>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001a36:	f000 faab 	bl	8001f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4808      	ldr	r0, [pc, #32]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 8001a3e:	f006 f984 	bl	8007d4a <HAL_UARTEx_SetRxFifoThreshold>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001a48:	f000 faa2 	bl	8001f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 8001a4e:	f006 f905 	bl	8007c5c <HAL_UARTEx_DisableFifoMode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001a58:	f000 fa9a 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000dbc 	.word	0x20000dbc
 8001a64:	40004400 	.word	0x40004400

08001a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <MX_DMA_Init+0x60>)
 8001a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a72:	4a15      	ldr	r2, [pc, #84]	@ (8001ac8 <MX_DMA_Init+0x60>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <MX_DMA_Init+0x60>)
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <MX_DMA_Init+0x60>)
 8001a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac8 <MX_DMA_Init+0x60>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <MX_DMA_Init+0x60>)
 8001a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	200b      	movs	r0, #11
 8001aa4:	f000 fe7f 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001aa8:	200b      	movs	r0, #11
 8001aaa:	f000 fe96 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	200c      	movs	r0, #12
 8001ab4:	f000 fe77 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ab8:	200c      	movs	r0, #12
 8001aba:	f000 fe8e 	bl	80027da <HAL_NVIC_EnableIRQ>

}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000

08001acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	4a2e      	ldr	r2, [pc, #184]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aee:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001afa:	4b29      	ldr	r3, [pc, #164]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	4a28      	ldr	r2, [pc, #160]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001b00:	f043 0320 	orr.w	r3, r3, #32
 8001b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b06:	4b26      	ldr	r3, [pc, #152]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	4a22      	ldr	r2, [pc, #136]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba0 <MX_GPIO_Init+0xd4>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2120      	movs	r1, #32
 8001b46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b4a:	f001 fb15 	bl	8003178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b54:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	480f      	ldr	r0, [pc, #60]	@ (8001ba4 <MX_GPIO_Init+0xd8>)
 8001b66:	f001 f985 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b84:	f001 f976 	bl	8002e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2028      	movs	r0, #40	@ 0x28
 8001b8e:	f000 fe0a 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b92:	2028      	movs	r0, #40	@ 0x28
 8001b94:	f000 fe21 	bl	80027da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	@ 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	48000800 	.word	0x48000800

08001ba8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
		if(htim == &htim5)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d108      	bne.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x22>
			{
			_micros += UINT32_MAX;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	1e54      	subs	r4, r2, #1
 8001bc0:	f143 0500 	adc.w	r5, r3, #0
 8001bc4:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001bc6:	e9c3 4500 	strd	r4, r5, [r3]
			}
		if(htim == &htim4)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a06      	ldr	r2, [pc, #24]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			 Heartbeat();
 8001bd2:	f7ff fbc3 	bl	800135c <Heartbeat>
		}
	}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000b58 	.word	0x20000b58
 8001be4:	20000fc0 	.word	0x20000fc0
 8001be8:	20000a8c 	.word	0x20000a8c
 8001bec:	00000000 	.word	0x00000000

08001bf0 <PS2X_Reader>:
		//store value for next loop
		QEIdata.Position[OLD] = QEIdata.Position[NEW];
		QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
}
void PS2X_Reader()
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
//	ps2.ps2Y = 0;
//	ps2.ps2X = 0;
	if (ps2.ps2RX[0] == 69) 		//Press L4 to switch to use Joy stick
 8001bf6:	4b92      	ldr	r3, [pc, #584]	@ (8001e40 <PS2X_Reader+0x250>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b45      	cmp	r3, #69	@ 0x45
 8001bfc:	d102      	bne.n	8001c04 <PS2X_Reader+0x14>
	{
		ps2.mode = 1;
 8001bfe:	4b90      	ldr	r3, [pc, #576]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	66da      	str	r2, [r3, #108]	@ 0x6c
//		ps2.ps2YPos = 132;
	}
	if (ps2.ps2RX[0] == 70)		//Press L5 to switch to use Button
 8001c04:	4b8e      	ldr	r3, [pc, #568]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b46      	cmp	r3, #70	@ 0x46
 8001c0a:	d102      	bne.n	8001c12 <PS2X_Reader+0x22>
	{
		ps2.mode = 2;
 8001c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c0e:	2202      	movs	r2, #2
 8001c10:	66da      	str	r2, [r3, #108]	@ 0x6c
	}
	//Mode Joy stick
	if (ps2.mode == 1)
 8001c12:	4b8b      	ldr	r3, [pc, #556]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	f040 80bd 	bne.w	8001d96 <PS2X_Reader+0x1a6>
	{
		//Read Ps2 Joy stick in VERTICAL
		if(ps2.ps2RX[0] == 81){
 8001c1c:	4b88      	ldr	r3, [pc, #544]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b51      	cmp	r3, #81	@ 0x51
 8001c22:	d169      	bne.n	8001cf8 <PS2X_Reader+0x108>
			if (ps2.ps2RX[2] == 83){
 8001c24:	4b86      	ldr	r3, [pc, #536]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c26:	789b      	ldrb	r3, [r3, #2]
 8001c28:	2b53      	cmp	r3, #83	@ 0x53
 8001c2a:	d103      	bne.n	8001c34 <PS2X_Reader+0x44>
				ps2.digit = 1;
 8001c2c:	4b84      	ldr	r3, [pc, #528]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	e00e      	b.n	8001c52 <PS2X_Reader+0x62>
			}
			else if (ps2.ps2RX[3] == 83){
 8001c34:	4b82      	ldr	r3, [pc, #520]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c36:	78db      	ldrb	r3, [r3, #3]
 8001c38:	2b53      	cmp	r3, #83	@ 0x53
 8001c3a:	d103      	bne.n	8001c44 <PS2X_Reader+0x54>
				ps2.digit = 2;
 8001c3c:	4b80      	ldr	r3, [pc, #512]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c3e:	2202      	movs	r2, #2
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	e006      	b.n	8001c52 <PS2X_Reader+0x62>
			}
			else if (ps2.ps2RX[4] == 83){
 8001c44:	4b7e      	ldr	r3, [pc, #504]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c46:	791b      	ldrb	r3, [r3, #4]
 8001c48:	2b53      	cmp	r3, #83	@ 0x53
 8001c4a:	d102      	bne.n	8001c52 <PS2X_Reader+0x62>
				ps2.digit = 3;
 8001c4c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c4e:	2203      	movs	r2, #3
 8001c50:	60da      	str	r2, [r3, #12]
			}
			for(int k=1 ; k<5 ; k++){
 8001c52:	2301      	movs	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e01d      	b.n	8001c94 <PS2X_Reader+0xa4>
				for (int l=0; l<10 ; l++){
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	e014      	b.n	8001c88 <PS2X_Reader+0x98>
					if (ps2.ps2RX[k] == num[l]){
 8001c5e:	4a78      	ldr	r2, [pc, #480]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4a76      	ldr	r2, [pc, #472]	@ (8001e44 <PS2X_Reader+0x254>)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	4299      	cmp	r1, r3
 8001c72:	d106      	bne.n	8001c82 <PS2X_Reader+0x92>
						ps2.gain[k-1] = l;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	4971      	ldr	r1, [pc, #452]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int l=0; l<10 ; l++){
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	3301      	adds	r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b09      	cmp	r3, #9
 8001c8c:	dde7      	ble.n	8001c5e <PS2X_Reader+0x6e>
			for(int k=1 ; k<5 ; k++){
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3301      	adds	r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	ddde      	ble.n	8001c58 <PS2X_Reader+0x68>
					}
				}
			}
			if (ps2.digit == 1){
 8001c9a:	4b69      	ldr	r3, [pc, #420]	@ (8001e40 <PS2X_Reader+0x250>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d104      	bne.n	8001cac <PS2X_Reader+0xbc>
				ps2.ps2YPos = ps2.gain[0];
 8001ca2:	4b67      	ldr	r3, [pc, #412]	@ (8001e40 <PS2X_Reader+0x250>)
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	4a66      	ldr	r2, [pc, #408]	@ (8001e40 <PS2X_Reader+0x250>)
 8001ca8:	6213      	str	r3, [r2, #32]
 8001caa:	e025      	b.n	8001cf8 <PS2X_Reader+0x108>
			}
			else if (ps2.digit == 2){
 8001cac:	4b64      	ldr	r3, [pc, #400]	@ (8001e40 <PS2X_Reader+0x250>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d10c      	bne.n	8001cce <PS2X_Reader+0xde>
				ps2.ps2YPos = (ps2.gain[0]*10)+ps2.gain[1];
 8001cb4:	4b62      	ldr	r3, [pc, #392]	@ (8001e40 <PS2X_Reader+0x250>)
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b5f      	ldr	r3, [pc, #380]	@ (8001e40 <PS2X_Reader+0x250>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a5d      	ldr	r2, [pc, #372]	@ (8001e40 <PS2X_Reader+0x250>)
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	e014      	b.n	8001cf8 <PS2X_Reader+0x108>
			}
			else if (ps2.digit == 3){
 8001cce:	4b5c      	ldr	r3, [pc, #368]	@ (8001e40 <PS2X_Reader+0x250>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d110      	bne.n	8001cf8 <PS2X_Reader+0x108>
				ps2.ps2YPos = (ps2.gain[0]*100)+(ps2.gain[1]*10)+ps2.gain[2];
 8001cd6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e40 <PS2X_Reader+0x250>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2264      	movs	r2, #100	@ 0x64
 8001cdc:	fb02 f103 	mul.w	r1, r2, r3
 8001ce0:	4b57      	ldr	r3, [pc, #348]	@ (8001e40 <PS2X_Reader+0x250>)
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	18ca      	adds	r2, r1, r3
 8001cee:	4b54      	ldr	r3, [pc, #336]	@ (8001e40 <PS2X_Reader+0x250>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a52      	ldr	r2, [pc, #328]	@ (8001e40 <PS2X_Reader+0x250>)
 8001cf6:	6213      	str	r3, [r2, #32]
//				  ps2.ps2XPos = (ps2.H[0]*100)+(ps2.H[1]*10)+ps2.H[2];
//			  }
		}

		//Convert from 0 - 255 to -128 - 128
		ps2.ps2Y = ps2.ps2YPos - 132;
 8001cf8:	4b51      	ldr	r3, [pc, #324]	@ (8001e40 <PS2X_Reader+0x250>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	3b84      	subs	r3, #132	@ 0x84
 8001cfe:	4a50      	ldr	r2, [pc, #320]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d00:	61d3      	str	r3, [r2, #28]
//		ps2.ps2X = ps2.ps2XPos - 132;

		//Generate PWM
		ps2.pwmOut = (ps2.ps2Y/ 128.0)*300;
 8001d02:	4b4f      	ldr	r3, [pc, #316]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fbd8 	bl	80004bc <__aeabi_i2d>
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	4b4d      	ldr	r3, [pc, #308]	@ (8001e48 <PS2X_Reader+0x258>)
 8001d12:	f7fe fd67 	bl	80007e4 <__aeabi_ddiv>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	a346      	add	r3, pc, #280	@ (adr r3, 8001e38 <PS2X_Reader+0x248>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fc34 	bl	8000590 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe fe40 	bl	80009b4 <__aeabi_d2iz>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4a42      	ldr	r2, [pc, #264]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d38:	6693      	str	r3, [r2, #104]	@ 0x68
		if (ps2.pwmOut > 300)
 8001d3a:	4b41      	ldr	r3, [pc, #260]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d3e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001d42:	dd03      	ble.n	8001d4c <PS2X_Reader+0x15c>
		{
			ps2.pwmOut = 300;
 8001d44:	4b3e      	ldr	r3, [pc, #248]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d4a:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < -300)
 8001d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d50:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8001d54:	da02      	bge.n	8001d5c <PS2X_Reader+0x16c>
		{
			ps2.pwmOut = -300;
 8001d56:	4b3a      	ldr	r3, [pc, #232]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d58:	4a3c      	ldr	r2, [pc, #240]	@ (8001e4c <PS2X_Reader+0x25c>)
 8001d5a:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < 0)
 8001d5c:	4b38      	ldr	r3, [pc, #224]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da09      	bge.n	8001d78 <PS2X_Reader+0x188>
		{
			ps2.pwmOut = ps2.pwmOut * -1;
 8001d64:	4b36      	ldr	r3, [pc, #216]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d68:	425b      	negs	r3, r3
 8001d6a:	4a35      	ldr	r2, [pc, #212]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d6c:	6693      	str	r3, [r2, #104]	@ 0x68
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);		//PWM out Backward
 8001d6e:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <PS2X_Reader+0x260>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d76:	e008      	b.n	8001d8a <PS2X_Reader+0x19a>
		}
		else if (ps2.pwmOut > 0)
 8001d78:	4b31      	ldr	r3, [pc, #196]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	dd04      	ble.n	8001d8a <PS2X_Reader+0x19a>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);		//PWM out forward
 8001d80:	4b33      	ldr	r3, [pc, #204]	@ (8001e50 <PS2X_Reader+0x260>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d88:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d8c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001d8e:	4b30      	ldr	r3, [pc, #192]	@ (8001e50 <PS2X_Reader+0x260>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d94:	e0ba      	b.n	8001f0c <PS2X_Reader+0x31c>
	}

	//--- Mode Button ---//
	else if (ps2.mode == 2)
 8001d96:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <PS2X_Reader+0x250>)
 8001d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	f040 80b6 	bne.w	8001f0c <PS2X_Reader+0x31c>
	{
		ps2.ps2Y = 0;
 8001da0:	4b27      	ldr	r3, [pc, #156]	@ (8001e40 <PS2X_Reader+0x250>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
//		ps2.ps2X = 0;
		//Keys Map
		static uint32_t timestamp =0;
		if(timestamp < HAL_GetTick())
 8001da6:	f000 fc17 	bl	80025d8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b29      	ldr	r3, [pc, #164]	@ (8001e54 <PS2X_Reader+0x264>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d908      	bls.n	8001dc6 <PS2X_Reader+0x1d6>
		{
			timestamp = HAL_GetTick()+100;
 8001db4:	f000 fc10 	bl	80025d8 <HAL_GetTick>
 8001db8:	4603      	mov	r3, r0
 8001dba:	3364      	adds	r3, #100	@ 0x64
 8001dbc:	4a25      	ldr	r2, [pc, #148]	@ (8001e54 <PS2X_Reader+0x264>)
 8001dbe:	6013      	str	r3, [r2, #0]
			ps2.ps2RX[0] = 0;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e40 <PS2X_Reader+0x250>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
		}
		for (int i =0;i<6;i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	e054      	b.n	8001e76 <PS2X_Reader+0x286>
		{
			if (ps2.ps2RX[0] == 0)
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <PS2X_Reader+0x250>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d123      	bne.n	8001e1c <PS2X_Reader+0x22c>
			{
				//Left
				ps2.l[0] = 0; //w
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <PS2X_Reader+0x250>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	651a      	str	r2, [r3, #80]	@ 0x50
				ps2.l[1] = 0;	//a
 8001dda:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <PS2X_Reader+0x250>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	655a      	str	r2, [r3, #84]	@ 0x54
				ps2.l[2] = 0;	//s
 8001de0:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <PS2X_Reader+0x250>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	659a      	str	r2, [r3, #88]	@ 0x58
				ps2.l[3] = 0;	//d
 8001de6:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <PS2X_Reader+0x250>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	65da      	str	r2, [r3, #92]	@ 0x5c
				ps2.l[4] = 0;	//l1
 8001dec:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <PS2X_Reader+0x250>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	661a      	str	r2, [r3, #96]	@ 0x60
				ps2.l[5] = 0;	//l2
 8001df2:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <PS2X_Reader+0x250>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	665a      	str	r2, [r3, #100]	@ 0x64
				//Right
				ps2.r[0] = 0;	//w
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <PS2X_Reader+0x250>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	639a      	str	r2, [r3, #56]	@ 0x38
				ps2.r[1] = 0;	//a
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <PS2X_Reader+0x250>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	63da      	str	r2, [r3, #60]	@ 0x3c
				ps2.r[2] = 0;	//s
 8001e04:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <PS2X_Reader+0x250>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	641a      	str	r2, [r3, #64]	@ 0x40
				ps2.r[3] = 0;	//d
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <PS2X_Reader+0x250>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	645a      	str	r2, [r3, #68]	@ 0x44
				ps2.r[4] = 0;	//r1
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <PS2X_Reader+0x250>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	649a      	str	r2, [r3, #72]	@ 0x48
				ps2.r[5] = 0;	//r2
 8001e16:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <PS2X_Reader+0x250>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	64da      	str	r2, [r3, #76]	@ 0x4c
			}

			if (ps2.ps2RX[0] - 65 == i)
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <PS2X_Reader+0x250>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3b41      	subs	r3, #65	@ 0x41
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d117      	bne.n	8001e58 <PS2X_Reader+0x268>
			{
				ps2.l[i] = 1;
 8001e28:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <PS2X_Reader+0x250>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3314      	adds	r3, #20
 8001e2e:	2101      	movs	r1, #1
 8001e30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001e34:	e01c      	b.n	8001e70 <PS2X_Reader+0x280>
 8001e36:	bf00      	nop
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	4072c000 	.word	0x4072c000
 8001e40:	20000f48 	.word	0x20000f48
 8001e44:	20000200 	.word	0x20000200
 8001e48:	40600000 	.word	0x40600000
 8001e4c:	fffffed4 	.word	0xfffffed4
 8001e50:	200009c0 	.word	0x200009c0
 8001e54:	20000fc8 	.word	0x20000fc8
			}

			else if (ps2.ps2RX[0] - 73 == i)
 8001e58:	4b48      	ldr	r3, [pc, #288]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	3b49      	subs	r3, #73	@ 0x49
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d105      	bne.n	8001e70 <PS2X_Reader+0x280>
			{
				ps2.r[i] = 1;
 8001e64:	4a45      	ldr	r2, [pc, #276]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	330e      	adds	r3, #14
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i =0;i<6;i++)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3301      	adds	r3, #1
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	dda7      	ble.n	8001dcc <PS2X_Reader+0x1dc>
			}
		}

		//Generate PWM
		if (ps2.l[2] == 1)
 8001e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10e      	bne.n	8001ea2 <PS2X_Reader+0x2b2>
		{
			ps2.pwmOut = ps2.pwmOut - count;	// - PWM with x
 8001e84:	4b3d      	ldr	r3, [pc, #244]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001e86:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e88:	4b3d      	ldr	r3, [pc, #244]	@ (8001f80 <PS2X_Reader+0x390>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001e90:	6693      	str	r3, [r2, #104]	@ 0x68
			if (ps2.pwmOut < 0)
 8001e92:	4b3a      	ldr	r3, [pc, #232]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001e94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da38      	bge.n	8001f0c <PS2X_Reader+0x31c>
			{
				ps2.pwmOut = 0;		// to make pwm1 >= 0
 8001e9a:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	669a      	str	r2, [r3, #104]	@ 0x68
 8001ea0:	e034      	b.n	8001f0c <PS2X_Reader+0x31c>
			}
		}
		else if (ps2.l[3] == 1)
 8001ea2:	4b36      	ldr	r3, [pc, #216]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <PS2X_Reader+0x2ca>
		{
			ps2.pwmOut = ps2.pwmOut + count;	// + PWM with count
 8001eaa:	4b34      	ldr	r3, [pc, #208]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001eac:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001eae:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <PS2X_Reader+0x390>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a31      	ldr	r2, [pc, #196]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001eb6:	6693      	str	r3, [r2, #104]	@ 0x68
 8001eb8:	e028      	b.n	8001f0c <PS2X_Reader+0x31c>
		}
		else if (ps2.l[0] == 1)		//Press down button(l1) to PWM out forward
 8001eba:	4b30      	ldr	r3, [pc, #192]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d109      	bne.n	8001ed6 <PS2X_Reader+0x2e6>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001ec4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f84 <PS2X_Reader+0x394>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <PS2X_Reader+0x394>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ed4:	e01a      	b.n	8001f0c <PS2X_Reader+0x31c>
		}
		else if (ps2.l[1] == 1)		//Press down button(l1) to PWM out backward
 8001ed6:	4b29      	ldr	r3, [pc, #164]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10a      	bne.n	8001ef4 <PS2X_Reader+0x304>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
 8001ede:	4b27      	ldr	r3, [pc, #156]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001ee0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001ee2:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <PS2X_Reader+0x394>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
 8001ee8:	4b26      	ldr	r3, [pc, #152]	@ (8001f84 <PS2X_Reader+0x394>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ef0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ef2:	e00b      	b.n	8001f0c <PS2X_Reader+0x31c>
		}
		else if (ps2.r[1] == 1)		//Press X(r1) to stop
 8001ef4:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d107      	bne.n	8001f0c <PS2X_Reader+0x31c>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);		//Stop
 8001efc:	4b21      	ldr	r3, [pc, #132]	@ (8001f84 <PS2X_Reader+0x394>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2200      	movs	r2, #0
 8001f02:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001f04:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <PS2X_Reader+0x394>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	//Floor Seclection
	if(base.ShelveMode == 1){
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f88 <PS2X_Reader+0x398>)
 8001f0e:	8a9b      	ldrh	r3, [r3, #20]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d12f      	bne.n	8001f74 <PS2X_Reader+0x384>
		if (ps2.ps2RX[0] == 71){
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b47      	cmp	r3, #71	@ 0x47
 8001f1a:	d10c      	bne.n	8001f36 <PS2X_Reader+0x346>
			base.Shelve[ps2.counts] = 1+ps2.counts;
 8001f1c:	4b17      	ldr	r3, [pc, #92]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001f1e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001f20:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f24:	3201      	adds	r2, #1
 8001f26:	4918      	ldr	r1, [pc, #96]	@ (8001f88 <PS2X_Reader+0x398>)
 8001f28:	3306      	adds	r3, #6
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ps2.counts=  +1;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	675a      	str	r2, [r3, #116]	@ 0x74
 8001f34:	e010      	b.n	8001f58 <PS2X_Reader+0x368>
		}
		else if (ps2.ps2RX[0] == 73){
 8001f36:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b49      	cmp	r3, #73	@ 0x49
 8001f3c:	d10c      	bne.n	8001f58 <PS2X_Reader+0x368>
			base.Shelve[ps2.counts-1] = 0;
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f42:	3b01      	subs	r3, #1
 8001f44:	4a10      	ldr	r2, [pc, #64]	@ (8001f88 <PS2X_Reader+0x398>)
 8001f46:	3306      	adds	r3, #6
 8001f48:	2100      	movs	r1, #0
 8001f4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			ps2.counts = ps2.counts -1;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f52:	3b01      	subs	r3, #1
 8001f54:	4a09      	ldr	r2, [pc, #36]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001f56:	6753      	str	r3, [r2, #116]	@ 0x74
		}

		if (ps2.ps2RX[0] == 72 && registerFrame[0x10].U16 == 0b0001){
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <PS2X_Reader+0x38c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b48      	cmp	r3, #72	@ 0x48
 8001f5e:	d109      	bne.n	8001f74 <PS2X_Reader+0x384>
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <PS2X_Reader+0x39c>)
 8001f62:	8c1b      	ldrh	r3, [r3, #32]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <PS2X_Reader+0x384>
			base.ShelveMode = 0;
 8001f68:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <PS2X_Reader+0x398>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	829a      	strh	r2, [r3, #20]
			registerFrame[0x10].U16 = 0b0000;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <PS2X_Reader+0x39c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	841a      	strh	r2, [r3, #32]
		}
	}

}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000f48 	.word	0x20000f48
 8001f80:	20000228 	.word	0x20000228
 8001f84:	200009c0 	.word	0x200009c0
 8001f88:	200008c0 	.word	0x200008c0
 8001f8c:	20000730 	.word	0x20000730

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f94:	b672      	cpsid	i
}
 8001f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <Error_Handler+0x8>

08001f9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbe:	4a08      	ldr	r2, [pc, #32]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001fd2:	f001 f9b1 	bl	8003338 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	@ 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002004:	d128      	bne.n	8002058 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002006:	4b16      	ldr	r3, [pc, #88]	@ (8002060 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200a:	4a15      	ldr	r2, [pc, #84]	@ (8002060 <HAL_TIM_Encoder_MspInit+0x7c>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6593      	str	r3, [r2, #88]	@ 0x58
 8002012:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	4a0f      	ldr	r2, [pc, #60]	@ (8002060 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HAL_TIM_Encoder_MspInit+0x7c>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002036:	2303      	movs	r3, #3
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002046:	2301      	movs	r3, #1
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002054:	f000 ff0e 	bl	8002e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3728      	adds	r7, #40	@ 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a30      	ldr	r2, [pc, #192]	@ (8002134 <HAL_TIM_Base_MspInit+0xd0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d10c      	bne.n	8002090 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002076:	4b30      	ldr	r3, [pc, #192]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	4a2f      	ldr	r2, [pc, #188]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	6593      	str	r3, [r2, #88]	@ 0x58
 8002082:	4b2d      	ldr	r3, [pc, #180]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800208e:	e04c      	b.n	800212a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a29      	ldr	r2, [pc, #164]	@ (800213c <HAL_TIM_Base_MspInit+0xd8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d114      	bne.n	80020c4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800209a:	4b27      	ldr	r3, [pc, #156]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209e:	4a26      	ldr	r2, [pc, #152]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a6:	4b24      	ldr	r3, [pc, #144]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	201e      	movs	r0, #30
 80020b8:	f000 fb75 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020bc:	201e      	movs	r0, #30
 80020be:	f000 fb8c 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 80020c2:	e032      	b.n	800212a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002140 <HAL_TIM_Base_MspInit+0xdc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d114      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	4a19      	ldr	r2, [pc, #100]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 80020d4:	f043 0308 	orr.w	r3, r3, #8
 80020d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020da:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2032      	movs	r0, #50	@ 0x32
 80020ec:	f000 fb5b 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020f0:	2032      	movs	r0, #50	@ 0x32
 80020f2:	f000 fb72 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 80020f6:	e018      	b.n	800212a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a11      	ldr	r2, [pc, #68]	@ (8002144 <HAL_TIM_Base_MspInit+0xe0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d113      	bne.n	800212a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002102:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 8002104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002106:	4a0c      	ldr	r2, [pc, #48]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 8002108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800210c:	6613      	str	r3, [r2, #96]	@ 0x60
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_TIM_Base_MspInit+0xd4>)
 8002110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2019      	movs	r0, #25
 8002120:	f000 fb41 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002124:	2019      	movs	r0, #25
 8002126:	f000 fb58 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40000400 	.word	0x40000400
 8002138:	40021000 	.word	0x40021000
 800213c:	40000800 	.word	0x40000800
 8002140:	40000c00 	.word	0x40000c00
 8002144:	40014400 	.word	0x40014400

08002148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a11      	ldr	r2, [pc, #68]	@ (80021ac <HAL_TIM_MspPostInit+0x64>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d11b      	bne.n	80021a2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <HAL_TIM_MspPostInit+0x68>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216e:	4a10      	ldr	r2, [pc, #64]	@ (80021b0 <HAL_TIM_MspPostInit+0x68>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002176:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <HAL_TIM_MspPostInit+0x68>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002182:	2330      	movs	r3, #48	@ 0x30
 8002184:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002192:	2302      	movs	r3, #2
 8002194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	@ (80021b4 <HAL_TIM_MspPostInit+0x6c>)
 800219e:	f000 fe69 	bl	8002e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021a2:	bf00      	nop
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40021000 	.word	0x40021000
 80021b4:	48000400 	.word	0x48000400

080021b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b0a0      	sub	sp, #128	@ 0x80
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d0:	f107 0318 	add.w	r3, r7, #24
 80021d4:	2254      	movs	r2, #84	@ 0x54
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f005 fe43 	bl	8007e64 <memset>
  if(huart->Instance==UART4)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6b      	ldr	r2, [pc, #428]	@ (8002390 <HAL_UART_MspInit+0x1d8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d137      	bne.n	8002258 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80021e8:	2308      	movs	r3, #8
 80021ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f0:	f107 0318 	add.w	r3, r7, #24
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 fddd 	bl	8003db4 <HAL_RCCEx_PeriphCLKConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002200:	f7ff fec6 	bl	8001f90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002204:	4b63      	ldr	r3, [pc, #396]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002208:	4a62      	ldr	r2, [pc, #392]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 800220a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800220e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002210:	4b60      	ldr	r3, [pc, #384]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002214:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800221c:	4b5d      	ldr	r3, [pc, #372]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 800221e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002220:	4a5c      	ldr	r2, [pc, #368]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002228:	4b5a      	ldr	r3, [pc, #360]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 800222a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002234:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002238:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002246:	2305      	movs	r3, #5
 8002248:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800224e:	4619      	mov	r1, r3
 8002250:	4851      	ldr	r0, [pc, #324]	@ (8002398 <HAL_UART_MspInit+0x1e0>)
 8002252:	f000 fe0f 	bl	8002e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002256:	e097      	b.n	8002388 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a4f      	ldr	r2, [pc, #316]	@ (800239c <HAL_UART_MspInit+0x1e4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	f040 8092 	bne.w	8002388 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800226c:	f107 0318 	add.w	r3, r7, #24
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fd9f 	bl	8003db4 <HAL_RCCEx_PeriphCLKConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 800227c:	f7ff fe88 	bl	8001f90 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002280:	4b44      	ldr	r3, [pc, #272]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002284:	4a43      	ldr	r2, [pc, #268]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 8002286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800228a:	6593      	str	r3, [r2, #88]	@ 0x58
 800228c:	4b41      	ldr	r3, [pc, #260]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002298:	4b3e      	ldr	r3, [pc, #248]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 800229a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229c:	4a3d      	ldr	r2, [pc, #244]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002394 <HAL_UART_MspInit+0x1dc>)
 80022a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022b0:	230c      	movs	r3, #12
 80022b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022c0:	2307      	movs	r3, #7
 80022c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022c8:	4619      	mov	r1, r3
 80022ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ce:	f000 fdd1 	bl	8002e74 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80022d2:	4b33      	ldr	r3, [pc, #204]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 80022d4:	4a33      	ldr	r2, [pc, #204]	@ (80023a4 <HAL_UART_MspInit+0x1ec>)
 80022d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80022d8:	4b31      	ldr	r3, [pc, #196]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 80022da:	221b      	movs	r2, #27
 80022dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022de:	4b30      	ldr	r3, [pc, #192]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 80022e0:	2210      	movs	r2, #16
 80022e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e4:	4b2e      	ldr	r3, [pc, #184]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ea:	4b2d      	ldr	r3, [pc, #180]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 80022ec:	2280      	movs	r2, #128	@ 0x80
 80022ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022f0:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022f6:	4b2a      	ldr	r3, [pc, #168]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80022fc:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002302:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002308:	4825      	ldr	r0, [pc, #148]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 800230a:	f000 fa81 	bl	8002810 <HAL_DMA_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_UART_MspInit+0x160>
      Error_Handler();
 8002314:	f7ff fe3c 	bl	8001f90 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a21      	ldr	r2, [pc, #132]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 800231c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800231e:	4a20      	ldr	r2, [pc, #128]	@ (80023a0 <HAL_UART_MspInit+0x1e8>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8002324:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 8002326:	4a21      	ldr	r2, [pc, #132]	@ (80023ac <HAL_UART_MspInit+0x1f4>)
 8002328:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800232a:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 800232c:	221a      	movs	r2, #26
 800232e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002336:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800233c:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 800233e:	2280      	movs	r2, #128	@ 0x80
 8002340:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002342:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 8002344:	2200      	movs	r2, #0
 8002346:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002348:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800234e:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 8002350:	2200      	movs	r2, #0
 8002352:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 8002356:	2200      	movs	r2, #0
 8002358:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800235a:	4813      	ldr	r0, [pc, #76]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 800235c:	f000 fa58 	bl	8002810 <HAL_DMA_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8002366:	f7ff fe13 	bl	8001f90 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a0e      	ldr	r2, [pc, #56]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 800236e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002372:	4a0d      	ldr	r2, [pc, #52]	@ (80023a8 <HAL_UART_MspInit+0x1f0>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	2026      	movs	r0, #38	@ 0x26
 800237e:	f000 fa12 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002382:	2026      	movs	r0, #38	@ 0x26
 8002384:	f000 fa29 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 8002388:	bf00      	nop
 800238a:	3780      	adds	r7, #128	@ 0x80
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40004c00 	.word	0x40004c00
 8002394:	40021000 	.word	0x40021000
 8002398:	48000800 	.word	0x48000800
 800239c:	40004400 	.word	0x40004400
 80023a0:	20000e88 	.word	0x20000e88
 80023a4:	40020008 	.word	0x40020008
 80023a8:	20000ee8 	.word	0x20000ee8
 80023ac:	4002001c 	.word	0x4002001c

080023b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <NMI_Handler+0x4>

080023b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <HardFault_Handler+0x4>

080023c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <MemManage_Handler+0x4>

080023c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <BusFault_Handler+0x4>

080023d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <UsageFault_Handler+0x4>

080023d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002406:	f000 f8d5 	bl	80025b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002414:	4802      	ldr	r0, [pc, #8]	@ (8002420 <DMA1_Channel1_IRQHandler+0x10>)
 8002416:	f000 fbde 	bl	8002bd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000e88 	.word	0x20000e88

08002424 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002428:	4802      	ldr	r0, [pc, #8]	@ (8002434 <DMA1_Channel2_IRQHandler+0x10>)
 800242a:	f000 fbd4 	bl	8002bd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000ee8 	.word	0x20000ee8

08002438 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800243c:	4802      	ldr	r0, [pc, #8]	@ (8002448 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800243e:	f002 f9fb 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000c24 	.word	0x20000c24

0800244c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002450:	4802      	ldr	r0, [pc, #8]	@ (800245c <TIM4_IRQHandler+0x10>)
 8002452:	f002 f9f1 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000a8c 	.word	0x20000a8c

08002460 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <USART2_IRQHandler+0x10>)
 8002466:	f003 ffef 	bl	8006448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000dbc 	.word	0x20000dbc

08002474 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002478:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800247c:	f000 fe94 	bl	80031a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}

08002484 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002488:	4802      	ldr	r0, [pc, #8]	@ (8002494 <TIM5_IRQHandler+0x10>)
 800248a:	f002 f9d5 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000b58 	.word	0x20000b58

08002498 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800249c:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <SystemInit+0x20>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a2:	4a05      	ldr	r2, [pc, #20]	@ (80024b8 <SystemInit+0x20>)
 80024a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024bc:	480d      	ldr	r0, [pc, #52]	@ (80024f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024c0:	f7ff ffea 	bl	8002498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c4:	480c      	ldr	r0, [pc, #48]	@ (80024f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80024c6:	490d      	ldr	r1, [pc, #52]	@ (80024fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80024c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002500 <LoopForever+0xe>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024cc:	e002      	b.n	80024d4 <LoopCopyDataInit>

080024ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d2:	3304      	adds	r3, #4

080024d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d8:	d3f9      	bcc.n	80024ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024da:	4a0a      	ldr	r2, [pc, #40]	@ (8002504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002508 <LoopForever+0x16>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e0:	e001      	b.n	80024e6 <LoopFillZerobss>

080024e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e4:	3204      	adds	r2, #4

080024e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e8:	d3fb      	bcc.n	80024e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ea:	f005 fcc3 	bl	8007e74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ee:	f7fe ffbb 	bl	8001468 <main>

080024f2 <LoopForever>:

LoopForever:
    b LoopForever
 80024f2:	e7fe      	b.n	80024f2 <LoopForever>
  ldr   r0, =_estack
 80024f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024fc:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8002500:	08007f40 	.word	0x08007f40
  ldr r2, =_sbss
 8002504:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002508:	20000fd0 	.word	0x20000fd0

0800250c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800250c:	e7fe      	b.n	800250c <ADC1_2_IRQHandler>

0800250e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002518:	2003      	movs	r0, #3
 800251a:	f000 f939 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800251e:	2000      	movs	r0, #0
 8002520:	f000 f80e 	bl	8002540 <HAL_InitTick>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	71fb      	strb	r3, [r7, #7]
 800252e:	e001      	b.n	8002534 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002530:	f7ff fd34 	bl	8001f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002534:	79fb      	ldrb	r3, [r7, #7]

}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800254c:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <HAL_InitTick+0x68>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d022      	beq.n	800259a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002554:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_InitTick+0x6c>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <HAL_InitTick+0x68>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002560:	fbb1 f3f3 	udiv	r3, r1, r3
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f944 	bl	80027f6 <HAL_SYSTICK_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b0f      	cmp	r3, #15
 8002578:	d809      	bhi.n	800258e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800257a:	2200      	movs	r2, #0
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	f04f 30ff 	mov.w	r0, #4294967295
 8002582:	f000 f910 	bl	80027a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002586:	4a0a      	ldr	r2, [pc, #40]	@ (80025b0 <HAL_InitTick+0x70>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e007      	b.n	800259e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e004      	b.n	800259e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e001      	b.n	800259e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000234 	.word	0x20000234
 80025ac:	2000022c 	.word	0x2000022c
 80025b0:	20000230 	.word	0x20000230

080025b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_IncTick+0x1c>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <HAL_IncTick+0x20>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	4a03      	ldr	r2, [pc, #12]	@ (80025d0 <HAL_IncTick+0x1c>)
 80025c4:	6013      	str	r3, [r2, #0]
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	20000fcc 	.word	0x20000fcc
 80025d4:	20000234 	.word	0x20000234

080025d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <HAL_GetTick+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000fcc 	.word	0x20000fcc

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800261c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002622:	4a04      	ldr	r2, [pc, #16]	@ (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60d3      	str	r3, [r2, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0b      	blt.n	800267e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4907      	ldr	r1, [pc, #28]	@ (800268c <__NVIC_EnableIRQ+0x38>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	@ (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	@ (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	@ 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	@ 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f7ff ff8e 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	@ (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff29 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff40 	bl	8002638 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff90 	bl	80026e4 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5f 	bl	8002690 <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff33 	bl	8002654 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa4 	bl	800274c <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e08d      	b.n	800293e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	4b47      	ldr	r3, [pc, #284]	@ (8002948 <HAL_DMA_Init+0x138>)
 800282a:	429a      	cmp	r2, r3
 800282c:	d80f      	bhi.n	800284e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	4b45      	ldr	r3, [pc, #276]	@ (800294c <HAL_DMA_Init+0x13c>)
 8002836:	4413      	add	r3, r2
 8002838:	4a45      	ldr	r2, [pc, #276]	@ (8002950 <HAL_DMA_Init+0x140>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	009a      	lsls	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a42      	ldr	r2, [pc, #264]	@ (8002954 <HAL_DMA_Init+0x144>)
 800284a:	641a      	str	r2, [r3, #64]	@ 0x40
 800284c:	e00e      	b.n	800286c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	4b40      	ldr	r3, [pc, #256]	@ (8002958 <HAL_DMA_Init+0x148>)
 8002856:	4413      	add	r3, r2
 8002858:	4a3d      	ldr	r2, [pc, #244]	@ (8002950 <HAL_DMA_Init+0x140>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	009a      	lsls	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a3c      	ldr	r2, [pc, #240]	@ (800295c <HAL_DMA_Init+0x14c>)
 800286a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002886:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa76 	bl	8002db0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028cc:	d102      	bne.n	80028d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d010      	beq.n	8002914 <HAL_DMA_Init+0x104>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d80c      	bhi.n	8002914 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa96 	bl	8002e2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	e008      	b.n	8002926 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40020407 	.word	0x40020407
 800294c:	bffdfff8 	.word	0xbffdfff8
 8002950:	cccccccd 	.word	0xcccccccd
 8002954:	40020000 	.word	0x40020000
 8002958:	bffdfbf8 	.word	0xbffdfbf8
 800295c:	40020400 	.word	0x40020400

08002960 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_DMA_Start_IT+0x20>
 800297c:	2302      	movs	r3, #2
 800297e:	e066      	b.n	8002a4e <HAL_DMA_Start_IT+0xee>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d155      	bne.n	8002a40 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f9bb 	bl	8002d34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 020e 	orr.w	r2, r2, #14
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e00f      	b.n	80029f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0204 	bic.w	r2, r2, #4
 80029e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 020a 	orr.w	r2, r2, #10
 80029f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a14:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a2c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e005      	b.n	8002a4c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d005      	beq.n	8002a7a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2204      	movs	r2, #4
 8002a72:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	e037      	b.n	8002aea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 020e 	bic.w	r2, r2, #14
 8002a88:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a98:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aae:	f003 021f 	and.w	r2, r3, #31
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8002abc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ac6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00c      	beq.n	8002aea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ada:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ade:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ae8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d00d      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2204      	movs	r2, #4
 8002b24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	e047      	b.n	8002bcc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 020e 	bic.w	r2, r2, #14
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	2101      	movs	r1, #1
 8002b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b88:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00c      	beq.n	8002bac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002baa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
    }
  }
  return status;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d026      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x7a>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d021      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d107      	bne.n	8002c2a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0204 	bic.w	r2, r2, #4
 8002c28:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f003 021f 	and.w	r2, r3, #31
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2104      	movs	r1, #4
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d071      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c4e:	e06c      	b.n	8002d2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2202      	movs	r2, #2
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02e      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d029      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10b      	bne.n	8002c94 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 020a 	bic.w	r2, r2, #10
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d038      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cc0:	e033      	b.n	8002d2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	2208      	movs	r2, #8
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d02a      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d025      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 020e 	bic.w	r2, r2, #14
 8002cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	f003 021f 	and.w	r2, r3, #31
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002d02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d004      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
}
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d5c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d62:	f003 021f 	and.w	r2, r3, #31
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b10      	cmp	r3, #16
 8002d80:	d108      	bne.n	8002d94 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d92:	e007      	b.n	8002da4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	60da      	str	r2, [r3, #12]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d802      	bhi.n	8002dca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002dc4:	4b15      	ldr	r3, [pc, #84]	@ (8002e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e001      	b.n	8002dce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002dcc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	3b08      	subs	r3, #8
 8002dda:	4a12      	ldr	r2, [pc, #72]	@ (8002e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	009a      	lsls	r2, r3, #2
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a0b      	ldr	r2, [pc, #44]	@ (8002e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002dfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2201      	movs	r2, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40020407 	.word	0x40020407
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020820 	.word	0x40020820
 8002e24:	cccccccd 	.word	0xcccccccd
 8002e28:	40020880 	.word	0x40020880

08002e2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	461a      	mov	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a08      	ldr	r2, [pc, #32]	@ (8002e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e4e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2201      	movs	r2, #1
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	1000823f 	.word	0x1000823f
 8002e70:	40020940 	.word	0x40020940

08002e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e82:	e15a      	b.n	800313a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	4013      	ands	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 814c 	beq.w	8003134 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d005      	beq.n	8002eb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d130      	bne.n	8002f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eea:	2201      	movs	r2, #1
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	f003 0201 	and.w	r2, r3, #1
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d017      	beq.n	8002f52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d123      	bne.n	8002fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	08da      	lsrs	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3208      	adds	r2, #8
 8002f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	220f      	movs	r2, #15
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	08da      	lsrs	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3208      	adds	r2, #8
 8002fa0:	6939      	ldr	r1, [r7, #16]
 8002fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0203 	and.w	r2, r3, #3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80a6 	beq.w	8003134 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe8:	4b5b      	ldr	r3, [pc, #364]	@ (8003158 <HAL_GPIO_Init+0x2e4>)
 8002fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fec:	4a5a      	ldr	r2, [pc, #360]	@ (8003158 <HAL_GPIO_Init+0x2e4>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ff4:	4b58      	ldr	r3, [pc, #352]	@ (8003158 <HAL_GPIO_Init+0x2e4>)
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003000:	4a56      	ldr	r2, [pc, #344]	@ (800315c <HAL_GPIO_Init+0x2e8>)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	3302      	adds	r3, #2
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	220f      	movs	r2, #15
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800302a:	d01f      	beq.n	800306c <HAL_GPIO_Init+0x1f8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a4c      	ldr	r2, [pc, #304]	@ (8003160 <HAL_GPIO_Init+0x2ec>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d019      	beq.n	8003068 <HAL_GPIO_Init+0x1f4>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a4b      	ldr	r2, [pc, #300]	@ (8003164 <HAL_GPIO_Init+0x2f0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <HAL_GPIO_Init+0x1f0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a4a      	ldr	r2, [pc, #296]	@ (8003168 <HAL_GPIO_Init+0x2f4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00d      	beq.n	8003060 <HAL_GPIO_Init+0x1ec>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a49      	ldr	r2, [pc, #292]	@ (800316c <HAL_GPIO_Init+0x2f8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d007      	beq.n	800305c <HAL_GPIO_Init+0x1e8>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a48      	ldr	r2, [pc, #288]	@ (8003170 <HAL_GPIO_Init+0x2fc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d101      	bne.n	8003058 <HAL_GPIO_Init+0x1e4>
 8003054:	2305      	movs	r3, #5
 8003056:	e00a      	b.n	800306e <HAL_GPIO_Init+0x1fa>
 8003058:	2306      	movs	r3, #6
 800305a:	e008      	b.n	800306e <HAL_GPIO_Init+0x1fa>
 800305c:	2304      	movs	r3, #4
 800305e:	e006      	b.n	800306e <HAL_GPIO_Init+0x1fa>
 8003060:	2303      	movs	r3, #3
 8003062:	e004      	b.n	800306e <HAL_GPIO_Init+0x1fa>
 8003064:	2302      	movs	r3, #2
 8003066:	e002      	b.n	800306e <HAL_GPIO_Init+0x1fa>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_GPIO_Init+0x1fa>
 800306c:	2300      	movs	r3, #0
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	f002 0203 	and.w	r2, r2, #3
 8003074:	0092      	lsls	r2, r2, #2
 8003076:	4093      	lsls	r3, r2
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800307e:	4937      	ldr	r1, [pc, #220]	@ (800315c <HAL_GPIO_Init+0x2e8>)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3302      	adds	r3, #2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800308c:	4b39      	ldr	r3, [pc, #228]	@ (8003174 <HAL_GPIO_Init+0x300>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030b0:	4a30      	ldr	r2, [pc, #192]	@ (8003174 <HAL_GPIO_Init+0x300>)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003174 <HAL_GPIO_Init+0x300>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030da:	4a26      	ldr	r2, [pc, #152]	@ (8003174 <HAL_GPIO_Init+0x300>)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030e0:	4b24      	ldr	r3, [pc, #144]	@ (8003174 <HAL_GPIO_Init+0x300>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003104:	4a1b      	ldr	r2, [pc, #108]	@ (8003174 <HAL_GPIO_Init+0x300>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800310a:	4b1a      	ldr	r3, [pc, #104]	@ (8003174 <HAL_GPIO_Init+0x300>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800312e:	4a11      	ldr	r2, [pc, #68]	@ (8003174 <HAL_GPIO_Init+0x300>)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3301      	adds	r3, #1
 8003138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	f47f ae9d 	bne.w	8002e84 <HAL_GPIO_Init+0x10>
  }
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40021000 	.word	0x40021000
 800315c:	40010000 	.word	0x40010000
 8003160:	48000400 	.word	0x48000400
 8003164:	48000800 	.word	0x48000800
 8003168:	48000c00 	.word	0x48000c00
 800316c:	48001000 	.word	0x48001000
 8003170:	48001400 	.word	0x48001400
 8003174:	40010400 	.word	0x40010400

08003178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	807b      	strh	r3, [r7, #2]
 8003184:	4613      	mov	r3, r2
 8003186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003188:	787b      	ldrb	r3, [r7, #1]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800318e:	887a      	ldrh	r2, [r7, #2]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003194:	e002      	b.n	800319c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031b2:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031be:	4a05      	ldr	r2, [pc, #20]	@ (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f806 	bl	80031d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40010400 	.word	0x40010400

080031d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d141      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031fe:	4b4b      	ldr	r3, [pc, #300]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320a:	d131      	bne.n	8003270 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800320c:	4b47      	ldr	r3, [pc, #284]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003212:	4a46      	ldr	r2, [pc, #280]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800321c:	4b43      	ldr	r3, [pc, #268]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003224:	4a41      	ldr	r2, [pc, #260]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800322a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800322c:	4b40      	ldr	r3, [pc, #256]	@ (8003330 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2232      	movs	r2, #50	@ 0x32
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	4a3f      	ldr	r2, [pc, #252]	@ (8003334 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	0c9b      	lsrs	r3, r3, #18
 800323e:	3301      	adds	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003242:	e002      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3b01      	subs	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800324a:	4b38      	ldr	r3, [pc, #224]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003256:	d102      	bne.n	800325e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f2      	bne.n	8003244 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800325e:	4b33      	ldr	r3, [pc, #204]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800326a:	d158      	bne.n	800331e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e057      	b.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003270:	4b2e      	ldr	r3, [pc, #184]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003276:	4a2d      	ldr	r2, [pc, #180]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800327c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003280:	e04d      	b.n	800331e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003288:	d141      	bne.n	800330e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800328a:	4b28      	ldr	r3, [pc, #160]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003296:	d131      	bne.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003298:	4b24      	ldr	r3, [pc, #144]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800329e:	4a23      	ldr	r2, [pc, #140]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032a8:	4b20      	ldr	r3, [pc, #128]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032b0:	4a1e      	ldr	r2, [pc, #120]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003330 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2232      	movs	r2, #50	@ 0x32
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003334 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ce:	e002      	b.n	80032d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d6:	4b15      	ldr	r3, [pc, #84]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e2:	d102      	bne.n	80032ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f2      	bne.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ea:	4b10      	ldr	r3, [pc, #64]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f6:	d112      	bne.n	800331e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e011      	b.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003302:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003308:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800330c:	e007      	b.n	800331e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800330e:	4b07      	ldr	r3, [pc, #28]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003316:	4a05      	ldr	r2, [pc, #20]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003318:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800331c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40007000 	.word	0x40007000
 8003330:	2000022c 	.word	0x2000022c
 8003334:	431bde83 	.word	0x431bde83

08003338 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a04      	ldr	r2, [pc, #16]	@ (8003354 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003342:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003346:	6093      	str	r3, [r2, #8]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40007000 	.word	0x40007000

08003358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e2fe      	b.n	8003968 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d075      	beq.n	8003462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003376:	4b97      	ldr	r3, [pc, #604]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003380:	4b94      	ldr	r3, [pc, #592]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d102      	bne.n	8003396 <HAL_RCC_OscConfig+0x3e>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b03      	cmp	r3, #3
 8003394:	d002      	beq.n	800339c <HAL_RCC_OscConfig+0x44>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d10b      	bne.n	80033b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	4b8d      	ldr	r3, [pc, #564]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d05b      	beq.n	8003460 <HAL_RCC_OscConfig+0x108>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d157      	bne.n	8003460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e2d9      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033bc:	d106      	bne.n	80033cc <HAL_RCC_OscConfig+0x74>
 80033be:	4b85      	ldr	r3, [pc, #532]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a84      	ldr	r2, [pc, #528]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e01d      	b.n	8003408 <HAL_RCC_OscConfig+0xb0>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x98>
 80033d6:	4b7f      	ldr	r3, [pc, #508]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7e      	ldr	r2, [pc, #504]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4b7c      	ldr	r3, [pc, #496]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a7b      	ldr	r2, [pc, #492]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e00b      	b.n	8003408 <HAL_RCC_OscConfig+0xb0>
 80033f0:	4b78      	ldr	r3, [pc, #480]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a77      	ldr	r2, [pc, #476]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	4b75      	ldr	r3, [pc, #468]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a74      	ldr	r2, [pc, #464]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d013      	beq.n	8003438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7ff f8e2 	bl	80025d8 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7ff f8de 	bl	80025d8 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	@ 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e29e      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342a:	4b6a      	ldr	r3, [pc, #424]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0xc0>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7ff f8ce 	bl	80025d8 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7ff f8ca 	bl	80025d8 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e28a      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003452:	4b60      	ldr	r3, [pc, #384]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0xe8>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d075      	beq.n	800355a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	4b59      	ldr	r3, [pc, #356]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003478:	4b56      	ldr	r3, [pc, #344]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d102      	bne.n	800348e <HAL_RCC_OscConfig+0x136>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d002      	beq.n	8003494 <HAL_RCC_OscConfig+0x13c>
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d11f      	bne.n	80034d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003494:	4b4f      	ldr	r3, [pc, #316]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_OscConfig+0x154>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e25d      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	4b49      	ldr	r3, [pc, #292]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	061b      	lsls	r3, r3, #24
 80034ba:	4946      	ldr	r1, [pc, #280]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034c0:	4b45      	ldr	r3, [pc, #276]	@ (80035d8 <HAL_RCC_OscConfig+0x280>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff f83b 	bl	8002540 <HAL_InitTick>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d043      	beq.n	8003558 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e249      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d023      	beq.n	8003524 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034dc:	4b3d      	ldr	r3, [pc, #244]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a3c      	ldr	r2, [pc, #240]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80034e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7ff f876 	bl	80025d8 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f0:	f7ff f872 	bl	80025d8 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e232      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003502:	4b34      	ldr	r3, [pc, #208]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	4b31      	ldr	r3, [pc, #196]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	061b      	lsls	r3, r3, #24
 800351c:	492d      	ldr	r1, [pc, #180]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
 8003522:	e01a      	b.n	800355a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003524:	4b2b      	ldr	r3, [pc, #172]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a2a      	ldr	r2, [pc, #168]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800352a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800352e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7ff f852 	bl	80025d8 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003538:	f7ff f84e 	bl	80025d8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e20e      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800354a:	4b22      	ldr	r3, [pc, #136]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1e0>
 8003556:	e000      	b.n	800355a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003558:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d041      	beq.n	80035ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01c      	beq.n	80035a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356e:	4b19      	ldr	r3, [pc, #100]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003574:	4a17      	ldr	r2, [pc, #92]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7ff f82b 	bl	80025d8 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003586:	f7ff f827 	bl	80025d8 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e1e7      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003598:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800359a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0ef      	beq.n	8003586 <HAL_RCC_OscConfig+0x22e>
 80035a6:	e020      	b.n	80035ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a8:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80035aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ae:	4a09      	ldr	r2, [pc, #36]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7ff f80e 	bl	80025d8 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035be:	e00d      	b.n	80035dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c0:	f7ff f80a 	bl	80025d8 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d906      	bls.n	80035dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1ca      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	20000230 	.word	0x20000230
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80035de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1ea      	bne.n	80035c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80a6 	beq.w	8003744 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035fc:	4b84      	ldr	r3, [pc, #528]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_OscConfig+0x2b4>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x2b6>
 800360c:	2300      	movs	r3, #0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003612:	4b7f      	ldr	r3, [pc, #508]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003616:	4a7e      	ldr	r2, [pc, #504]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800361c:	6593      	str	r3, [r2, #88]	@ 0x58
 800361e:	4b7c      	ldr	r3, [pc, #496]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800362a:	2301      	movs	r3, #1
 800362c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362e:	4b79      	ldr	r3, [pc, #484]	@ (8003814 <HAL_RCC_OscConfig+0x4bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d118      	bne.n	800366c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800363a:	4b76      	ldr	r3, [pc, #472]	@ (8003814 <HAL_RCC_OscConfig+0x4bc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a75      	ldr	r2, [pc, #468]	@ (8003814 <HAL_RCC_OscConfig+0x4bc>)
 8003640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003646:	f7fe ffc7 	bl	80025d8 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364e:	f7fe ffc3 	bl	80025d8 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e183      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003660:	4b6c      	ldr	r3, [pc, #432]	@ (8003814 <HAL_RCC_OscConfig+0x4bc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d108      	bne.n	8003686 <HAL_RCC_OscConfig+0x32e>
 8003674:	4b66      	ldr	r3, [pc, #408]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	4a65      	ldr	r2, [pc, #404]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003684:	e024      	b.n	80036d0 <HAL_RCC_OscConfig+0x378>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b05      	cmp	r3, #5
 800368c:	d110      	bne.n	80036b0 <HAL_RCC_OscConfig+0x358>
 800368e:	4b60      	ldr	r3, [pc, #384]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003694:	4a5e      	ldr	r2, [pc, #376]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800369e:	4b5c      	ldr	r3, [pc, #368]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036ae:	e00f      	b.n	80036d0 <HAL_RCC_OscConfig+0x378>
 80036b0:	4b57      	ldr	r3, [pc, #348]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b6:	4a56      	ldr	r2, [pc, #344]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036c0:	4b53      	ldr	r3, [pc, #332]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c6:	4a52      	ldr	r2, [pc, #328]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d016      	beq.n	8003706 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe ff7e 	bl	80025d8 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fe ff7a 	bl	80025d8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e138      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	4b46      	ldr	r3, [pc, #280]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ed      	beq.n	80036e0 <HAL_RCC_OscConfig+0x388>
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fe ff67 	bl	80025d8 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7fe ff63 	bl	80025d8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e121      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003724:	4b3a      	ldr	r3, [pc, #232]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ed      	bne.n	800370e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003732:	7ffb      	ldrb	r3, [r7, #31]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003738:	4b35      	ldr	r3, [pc, #212]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	4a34      	ldr	r2, [pc, #208]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 800373e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003742:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03c      	beq.n	80037ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003758:	4b2d      	ldr	r3, [pc, #180]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 800375a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800375e:	4a2c      	ldr	r2, [pc, #176]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fe ff36 	bl	80025d8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003770:	f7fe ff32 	bl	80025d8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e0f2      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003782:	4b23      	ldr	r3, [pc, #140]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ef      	beq.n	8003770 <HAL_RCC_OscConfig+0x418>
 8003790:	e01b      	b.n	80037ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003792:	4b1f      	ldr	r3, [pc, #124]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003794:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003798:	4a1d      	ldr	r2, [pc, #116]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fe ff19 	bl	80025d8 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037aa:	f7fe ff15 	bl	80025d8 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0d5      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037bc:	4b14      	ldr	r3, [pc, #80]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80037be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ef      	bne.n	80037aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80c9 	beq.w	8003966 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	f000 8083 	beq.w	80038e8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d15e      	bne.n	80038a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a08      	ldr	r2, [pc, #32]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80037f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fe feef 	bl	80025d8 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fc:	e00c      	b.n	8003818 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fe feeb 	bl	80025d8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d905      	bls.n	8003818 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e0ab      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
 8003810:	40021000 	.word	0x40021000
 8003814:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003818:	4b55      	ldr	r3, [pc, #340]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ec      	bne.n	80037fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003824:	4b52      	ldr	r3, [pc, #328]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	4b52      	ldr	r3, [pc, #328]	@ (8003974 <HAL_RCC_OscConfig+0x61c>)
 800382a:	4013      	ands	r3, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6a11      	ldr	r1, [r2, #32]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003834:	3a01      	subs	r2, #1
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	4311      	orrs	r1, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800383e:	0212      	lsls	r2, r2, #8
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003846:	0852      	lsrs	r2, r2, #1
 8003848:	3a01      	subs	r2, #1
 800384a:	0552      	lsls	r2, r2, #21
 800384c:	4311      	orrs	r1, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003852:	0852      	lsrs	r2, r2, #1
 8003854:	3a01      	subs	r2, #1
 8003856:	0652      	lsls	r2, r2, #25
 8003858:	4311      	orrs	r1, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800385e:	06d2      	lsls	r2, r2, #27
 8003860:	430a      	orrs	r2, r1
 8003862:	4943      	ldr	r1, [pc, #268]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 8003864:	4313      	orrs	r3, r2
 8003866:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003868:	4b41      	ldr	r3, [pc, #260]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a40      	ldr	r2, [pc, #256]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 800386e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003872:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003874:	4b3e      	ldr	r3, [pc, #248]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a3d      	ldr	r2, [pc, #244]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800387e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fe feaa 	bl	80025d8 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fea6 	bl	80025d8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e066      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389a:	4b35      	ldr	r3, [pc, #212]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x530>
 80038a6:	e05e      	b.n	8003966 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a30      	ldr	r2, [pc, #192]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fe fe90 	bl	80025d8 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe fe8c 	bl	80025d8 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e04c      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ce:	4b28      	ldr	r3, [pc, #160]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038da:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	4924      	ldr	r1, [pc, #144]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038e0:	4b25      	ldr	r3, [pc, #148]	@ (8003978 <HAL_RCC_OscConfig+0x620>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	60cb      	str	r3, [r1, #12]
 80038e6:	e03e      	b.n	8003966 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e039      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0203 	and.w	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	429a      	cmp	r2, r3
 8003906:	d12c      	bne.n	8003962 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	3b01      	subs	r3, #1
 8003914:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d123      	bne.n	8003962 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003924:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d11b      	bne.n	8003962 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d113      	bne.n	8003962 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	3b01      	subs	r3, #1
 8003948:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d109      	bne.n	8003962 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	3b01      	subs	r3, #1
 800395c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	019f800c 	.word	0x019f800c
 8003978:	feeefffc 	.word	0xfeeefffc

0800397c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e11e      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b91      	ldr	r3, [pc, #580]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d910      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b8e      	ldr	r3, [pc, #568]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 020f 	bic.w	r2, r3, #15
 80039aa:	498c      	ldr	r1, [pc, #560]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b8a      	ldr	r3, [pc, #552]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e106      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d073      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d129      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d8:	4b81      	ldr	r3, [pc, #516]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0f4      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039e8:	f000 f99e 	bl	8003d28 <RCC_GetSysClockFreqFromPLLSource>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4a7c      	ldr	r2, [pc, #496]	@ (8003be4 <HAL_RCC_ClockConfig+0x268>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d93f      	bls.n	8003a76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039f6:	4b7a      	ldr	r3, [pc, #488]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d033      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d12f      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a16:	4b72      	ldr	r3, [pc, #456]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a1e:	4a70      	ldr	r2, [pc, #448]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a26:	2380      	movs	r3, #128	@ 0x80
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e024      	b.n	8003a76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a34:	4b6a      	ldr	r3, [pc, #424]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0c6      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a44:	4b66      	ldr	r3, [pc, #408]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0be      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a54:	f000 f8ce 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4a61      	ldr	r2, [pc, #388]	@ (8003be4 <HAL_RCC_ClockConfig+0x268>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d909      	bls.n	8003a76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a62:	4b5f      	ldr	r3, [pc, #380]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a6a:	4a5d      	ldr	r2, [pc, #372]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a72:	2380      	movs	r3, #128	@ 0x80
 8003a74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a76:	4b5a      	ldr	r3, [pc, #360]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4957      	ldr	r1, [pc, #348]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fe fda6 	bl	80025d8 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	e00a      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a90:	f7fe fda2 	bl	80025d8 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e095      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 020c 	and.w	r2, r3, #12
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d1eb      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d023      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b43      	ldr	r3, [pc, #268]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a42      	ldr	r2, [pc, #264]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003ad6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ada:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ae8:	4b3d      	ldr	r3, [pc, #244]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003af0:	4a3b      	ldr	r2, [pc, #236]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003af2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003af6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af8:	4b39      	ldr	r3, [pc, #228]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4936      	ldr	r1, [pc, #216]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b80      	cmp	r3, #128	@ 0x80
 8003b10:	d105      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b12:	4b33      	ldr	r3, [pc, #204]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	4a32      	ldr	r2, [pc, #200]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d21d      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f023 020f 	bic.w	r2, r3, #15
 8003b34:	4929      	ldr	r1, [pc, #164]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fd4c 	bl	80025d8 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fe fd48 	bl	80025d8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e03b      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b20      	ldr	r3, [pc, #128]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d1ed      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4917      	ldr	r1, [pc, #92]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b92:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490f      	ldr	r1, [pc, #60]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba6:	f000 f825 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	490c      	ldr	r1, [pc, #48]	@ (8003be8 <HAL_RCC_ClockConfig+0x26c>)
 8003bb8:	5ccb      	ldrb	r3, [r1, r3]
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <HAL_RCC_ClockConfig+0x270>)
 8003bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <HAL_RCC_ClockConfig+0x274>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fcb8 	bl	8002540 <HAL_InitTick>
 8003bd0:	4603      	mov	r3, r0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40022000 	.word	0x40022000
 8003be0:	40021000 	.word	0x40021000
 8003be4:	04c4b400 	.word	0x04c4b400
 8003be8:	08007ef0 	.word	0x08007ef0
 8003bec:	2000022c 	.word	0x2000022c
 8003bf0:	20000230 	.word	0x20000230

08003bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c06:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	e047      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c0c:	4b27      	ldr	r3, [pc, #156]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d102      	bne.n	8003c1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c18:	4b26      	ldr	r3, [pc, #152]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	e03e      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c1e:	4b23      	ldr	r3, [pc, #140]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b0c      	cmp	r3, #12
 8003c28:	d136      	bne.n	8003c98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c34:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d10c      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c48:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	4a16      	ldr	r2, [pc, #88]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c52:	68d2      	ldr	r2, [r2, #12]
 8003c54:	0a12      	lsrs	r2, r2, #8
 8003c56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	617b      	str	r3, [r7, #20]
      break;
 8003c60:	e00c      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c62:	4a13      	ldr	r2, [pc, #76]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	4a10      	ldr	r2, [pc, #64]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	0a12      	lsrs	r2, r2, #8
 8003c70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	617b      	str	r3, [r7, #20]
      break;
 8003c7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	0e5b      	lsrs	r3, r3, #25
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	3301      	adds	r3, #1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e001      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c9c:	693b      	ldr	r3, [r7, #16]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	00f42400 	.word	0x00f42400
 8003cb4:	016e3600 	.word	0x016e3600

08003cb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cbc:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	2000022c 	.word	0x2000022c

08003cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cd4:	f7ff fff0 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4904      	ldr	r1, [pc, #16]	@ (8003cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08007f00 	.word	0x08007f00

08003cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d00:	f7ff ffda 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0adb      	lsrs	r3, r3, #11
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4904      	ldr	r1, [pc, #16]	@ (8003d24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000
 8003d24:	08007f00 	.word	0x08007f00

08003d28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d38:	4b1b      	ldr	r3, [pc, #108]	@ (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	3301      	adds	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d10c      	bne.n	8003d66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d4c:	4a17      	ldr	r2, [pc, #92]	@ (8003dac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	4a14      	ldr	r2, [pc, #80]	@ (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d56:	68d2      	ldr	r2, [r2, #12]
 8003d58:	0a12      	lsrs	r2, r2, #8
 8003d5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	617b      	str	r3, [r7, #20]
    break;
 8003d64:	e00c      	b.n	8003d80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d66:	4a12      	ldr	r2, [pc, #72]	@ (8003db0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d70:	68d2      	ldr	r2, [r2, #12]
 8003d72:	0a12      	lsrs	r2, r2, #8
 8003d74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]
    break;
 8003d7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d80:	4b09      	ldr	r3, [pc, #36]	@ (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	0e5b      	lsrs	r3, r3, #25
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d9a:	687b      	ldr	r3, [r7, #4]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40021000 	.word	0x40021000
 8003dac:	016e3600 	.word	0x016e3600
 8003db0:	00f42400 	.word	0x00f42400

08003db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8098 	beq.w	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd6:	4b43      	ldr	r3, [pc, #268]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10d      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	4b40      	ldr	r3, [pc, #256]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dee:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a39      	ldr	r2, [pc, #228]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e0a:	f7fe fbe5 	bl	80025d8 <HAL_GetTick>
 8003e0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e10:	e009      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e12:	f7fe fbe1 	bl	80025d8 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d902      	bls.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	74fb      	strb	r3, [r7, #19]
        break;
 8003e24:	e005      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e26:	4b30      	ldr	r3, [pc, #192]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0ef      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e32:	7cfb      	ldrb	r3, [r7, #19]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d159      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e38:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01e      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d019      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e54:	4b23      	ldr	r3, [pc, #140]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e60:	4b20      	ldr	r3, [pc, #128]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e70:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e76:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e80:	4a18      	ldr	r2, [pc, #96]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fe fba1 	bl	80025d8 <HAL_GetTick>
 8003e96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e98:	e00b      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fe fb9d 	bl	80025d8 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d902      	bls.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	74fb      	strb	r3, [r7, #19]
            break;
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ec      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec6:	4b07      	ldr	r3, [pc, #28]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ecc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed4:	4903      	ldr	r1, [pc, #12]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003edc:	e008      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	74bb      	strb	r3, [r7, #18]
 8003ee2:	e005      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef0:	7c7b      	ldrb	r3, [r7, #17]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d105      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef6:	4ba7      	ldr	r3, [pc, #668]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efa:	4aa6      	ldr	r2, [pc, #664]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f0e:	4ba1      	ldr	r3, [pc, #644]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f14:	f023 0203 	bic.w	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	499d      	ldr	r1, [pc, #628]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f30:	4b98      	ldr	r3, [pc, #608]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f36:	f023 020c 	bic.w	r2, r3, #12
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4995      	ldr	r1, [pc, #596]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f52:	4b90      	ldr	r3, [pc, #576]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	498c      	ldr	r1, [pc, #560]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f74:	4b87      	ldr	r3, [pc, #540]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	4984      	ldr	r1, [pc, #528]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f96:	4b7f      	ldr	r3, [pc, #508]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	497b      	ldr	r1, [pc, #492]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fb8:	4b76      	ldr	r3, [pc, #472]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	4973      	ldr	r1, [pc, #460]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fda:	4b6e      	ldr	r3, [pc, #440]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	496a      	ldr	r1, [pc, #424]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ffc:	4b65      	ldr	r3, [pc, #404]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004002:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	4962      	ldr	r1, [pc, #392]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800401e:	4b5d      	ldr	r3, [pc, #372]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004024:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	4959      	ldr	r1, [pc, #356]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004040:	4b54      	ldr	r3, [pc, #336]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004046:	f023 0203 	bic.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	4951      	ldr	r1, [pc, #324]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004062:	4b4c      	ldr	r3, [pc, #304]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004068:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	4948      	ldr	r1, [pc, #288]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004080:	2b00      	cmp	r3, #0
 8004082:	d015      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004084:	4b43      	ldr	r3, [pc, #268]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	4940      	ldr	r1, [pc, #256]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a2:	d105      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d015      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040bc:	4b35      	ldr	r3, [pc, #212]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ca:	4932      	ldr	r1, [pc, #200]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040da:	d105      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d015      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040f4:	4b27      	ldr	r3, [pc, #156]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004102:	4924      	ldr	r1, [pc, #144]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004112:	d105      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004114:	4b1f      	ldr	r3, [pc, #124]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a1e      	ldr	r2, [pc, #120]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800411e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d015      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800412c:	4b19      	ldr	r3, [pc, #100]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004132:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413a:	4916      	ldr	r1, [pc, #88]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004146:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800414a:	d105      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800414c:	4b11      	ldr	r3, [pc, #68]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a10      	ldr	r2, [pc, #64]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004156:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d019      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004164:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	4908      	ldr	r1, [pc, #32]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004182:	d109      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004184:	4b03      	ldr	r3, [pc, #12]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a02      	ldr	r2, [pc, #8]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800418e:	60d3      	str	r3, [r2, #12]
 8004190:	e002      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d015      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041a4:	4b29      	ldr	r3, [pc, #164]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b2:	4926      	ldr	r1, [pc, #152]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041c2:	d105      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041c4:	4b21      	ldr	r3, [pc, #132]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4a20      	ldr	r2, [pc, #128]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d015      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041dc:	4b1b      	ldr	r3, [pc, #108]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ea:	4918      	ldr	r1, [pc, #96]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041fa:	d105      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041fc:	4b13      	ldr	r3, [pc, #76]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a12      	ldr	r2, [pc, #72]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004206:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d015      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004214:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004216:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800421a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004222:	490a      	ldr	r1, [pc, #40]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004232:	d105      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004234:	4b05      	ldr	r3, [pc, #20]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4a04      	ldr	r2, [pc, #16]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800423a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800423e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004240:	7cbb      	ldrb	r3, [r7, #18]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000

08004250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e054      	b.n	800430c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d111      	bne.n	8004292 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f001 fcdc 	bl	8005c34 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a23      	ldr	r2, [pc, #140]	@ (8004314 <HAL_TIM_Base_Init+0xc4>)
 8004288:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f001 f825 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	08002065 	.word	0x08002065

08004318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d001      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e054      	b.n	80043da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a26      	ldr	r2, [pc, #152]	@ (80043e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d022      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x80>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435a:	d01d      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x80>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a22      	ldr	r2, [pc, #136]	@ (80043ec <HAL_TIM_Base_Start_IT+0xd4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d018      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x80>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a21      	ldr	r2, [pc, #132]	@ (80043f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x80>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1f      	ldr	r2, [pc, #124]	@ (80043f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00e      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x80>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1e      	ldr	r2, [pc, #120]	@ (80043f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x80>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <HAL_TIM_Base_Start_IT+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x80>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1b      	ldr	r2, [pc, #108]	@ (8004400 <HAL_TIM_Base_Start_IT+0xe8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d115      	bne.n	80043c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <HAL_TIM_Base_Start_IT+0xec>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b06      	cmp	r3, #6
 80043a8:	d015      	beq.n	80043d6 <HAL_TIM_Base_Start_IT+0xbe>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b0:	d011      	beq.n	80043d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	e008      	b.n	80043d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e000      	b.n	80043d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40000800 	.word	0x40000800
 80043f4:	40000c00 	.word	0x40000c00
 80043f8:	40013400 	.word	0x40013400
 80043fc:	40014000 	.word	0x40014000
 8004400:	40015000 	.word	0x40015000
 8004404:	00010007 	.word	0x00010007

08004408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e054      	b.n	80044c4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d111      	bne.n	800444a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f001 fc00 	bl	8005c34 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a23      	ldr	r2, [pc, #140]	@ (80044cc <HAL_TIM_PWM_Init+0xc4>)
 8004440:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3304      	adds	r3, #4
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f000 ff49 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	080044d1 	.word	0x080044d1

080044d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e04c      	b.n	8004592 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d111      	bne.n	8004528 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f001 fb91 	bl	8005c34 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a1f      	ldr	r2, [pc, #124]	@ (800459c <HAL_TIM_OnePulse_Init+0xb8>)
 800451e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f000 feda 	bl	80052f4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0208 	bic.w	r2, r2, #8
 800454e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6819      	ldr	r1, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	080045a1 	.word	0x080045a1

080045a0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045dc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d108      	bne.n	80045f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045e4:	7bbb      	ldrb	r3, [r7, #14]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d105      	bne.n	80045f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045ea:	7b7b      	ldrb	r3, [r7, #13]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d102      	bne.n	80045f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045f0:	7b3b      	ldrb	r3, [r7, #12]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d001      	beq.n	80045fa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e059      	b.n	80046ae <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0202 	orr.w	r2, r2, #2
 8004628:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0204 	orr.w	r2, r2, #4
 8004638:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2201      	movs	r2, #1
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f001 fad0 	bl	8005be8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2201      	movs	r2, #1
 800464e:	2104      	movs	r1, #4
 8004650:	4618      	mov	r0, r3
 8004652:	f001 fac9 	bl	8005be8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a17      	ldr	r2, [pc, #92]	@ (80046b8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d018      	beq.n	8004692 <HAL_TIM_OnePulse_Start_IT+0xde>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a15      	ldr	r2, [pc, #84]	@ (80046bc <HAL_TIM_OnePulse_Start_IT+0x108>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <HAL_TIM_OnePulse_Start_IT+0xde>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a14      	ldr	r2, [pc, #80]	@ (80046c0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00e      	beq.n	8004692 <HAL_TIM_OnePulse_Start_IT+0xde>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a12      	ldr	r2, [pc, #72]	@ (80046c4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d009      	beq.n	8004692 <HAL_TIM_OnePulse_Start_IT+0xde>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a11      	ldr	r2, [pc, #68]	@ (80046c8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d004      	beq.n	8004692 <HAL_TIM_OnePulse_Start_IT+0xde>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0f      	ldr	r2, [pc, #60]	@ (80046cc <HAL_TIM_OnePulse_Start_IT+0x118>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40013400 	.word	0x40013400
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40014400 	.word	0x40014400
 80046c8:	40014800 	.word	0x40014800
 80046cc:	40015000 	.word	0x40015000

080046d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0a2      	b.n	800482a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d111      	bne.n	8004714 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f001 fa9b 	bl	8005c34 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4a      	ldr	r2, [pc, #296]	@ (8004834 <HAL_TIM_Encoder_Init+0x164>)
 800470a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800472a:	f023 0307 	bic.w	r3, r3, #7
 800472e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f000 fdda 	bl	80052f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004768:	f023 0303 	bic.w	r3, r3, #3
 800476c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	4313      	orrs	r3, r2
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004786:	f023 030c 	bic.w	r3, r3, #12
 800478a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	4313      	orrs	r3, r2
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	4313      	orrs	r3, r2
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80047c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80047cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	4313      	orrs	r3, r2
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	08001fe5 	.word	0x08001fe5

08004838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d026      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d021      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0202 	mvn.w	r2, #2
 800486c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	4798      	blx	r3
 800488c:	e009      	b.n	80048a2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d026      	beq.n	8004900 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d021      	beq.n	8004900 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0204 	mvn.w	r2, #4
 80048c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	4798      	blx	r3
 80048e4:	e009      	b.n	80048fa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d026      	beq.n	8004958 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d021      	beq.n	8004958 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0208 	mvn.w	r2, #8
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2204      	movs	r2, #4
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	4798      	blx	r3
 800493c:	e009      	b.n	8004952 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b00      	cmp	r3, #0
 8004960:	d026      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b00      	cmp	r3, #0
 800496a:	d021      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0210 	mvn.w	r2, #16
 8004974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2208      	movs	r2, #8
 800497a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	4798      	blx	r3
 8004994:	e009      	b.n	80049aa <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00e      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0201 	mvn.w	r2, #1
 80049cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d104      	bne.n	80049ec <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00e      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00e      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d009      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00e      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f06f 0220 	mvn.w	r2, #32
 8004a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00e      	beq.n	8004afa <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00e      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e0ff      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b14      	cmp	r3, #20
 8004b56:	f200 80f0 	bhi.w	8004d3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004bb5 	.word	0x08004bb5
 8004b64:	08004d3b 	.word	0x08004d3b
 8004b68:	08004d3b 	.word	0x08004d3b
 8004b6c:	08004d3b 	.word	0x08004d3b
 8004b70:	08004bf5 	.word	0x08004bf5
 8004b74:	08004d3b 	.word	0x08004d3b
 8004b78:	08004d3b 	.word	0x08004d3b
 8004b7c:	08004d3b 	.word	0x08004d3b
 8004b80:	08004c37 	.word	0x08004c37
 8004b84:	08004d3b 	.word	0x08004d3b
 8004b88:	08004d3b 	.word	0x08004d3b
 8004b8c:	08004d3b 	.word	0x08004d3b
 8004b90:	08004c77 	.word	0x08004c77
 8004b94:	08004d3b 	.word	0x08004d3b
 8004b98:	08004d3b 	.word	0x08004d3b
 8004b9c:	08004d3b 	.word	0x08004d3b
 8004ba0:	08004cb9 	.word	0x08004cb9
 8004ba4:	08004d3b 	.word	0x08004d3b
 8004ba8:	08004d3b 	.word	0x08004d3b
 8004bac:	08004d3b 	.word	0x08004d3b
 8004bb0:	08004cf9 	.word	0x08004cf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fc4e 	bl	800545c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0208 	orr.w	r2, r2, #8
 8004bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0204 	bic.w	r2, r2, #4
 8004bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6999      	ldr	r1, [r3, #24]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	619a      	str	r2, [r3, #24]
      break;
 8004bf2:	e0a5      	b.n	8004d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fcc8 	bl	8005590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6999      	ldr	r1, [r3, #24]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	619a      	str	r2, [r3, #24]
      break;
 8004c34:	e084      	b.n	8004d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fd3b 	bl	80056b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0208 	orr.w	r2, r2, #8
 8004c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0204 	bic.w	r2, r2, #4
 8004c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69d9      	ldr	r1, [r3, #28]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	61da      	str	r2, [r3, #28]
      break;
 8004c74:	e064      	b.n	8004d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fdad 	bl	80057dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69d9      	ldr	r1, [r3, #28]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	021a      	lsls	r2, r3, #8
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	61da      	str	r2, [r3, #28]
      break;
 8004cb6:	e043      	b.n	8004d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fe20 	bl	8005904 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0208 	orr.w	r2, r2, #8
 8004cd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0204 	bic.w	r2, r2, #4
 8004ce2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004cf6:	e023      	b.n	8004d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fe6a 	bl	80059d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	021a      	lsls	r2, r3, #8
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004d38:	e002      	b.n	8004d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop

08004d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIM_ConfigClockSource+0x1c>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e0f6      	b.n	8004f5e <HAL_TIM_ConfigClockSource+0x20a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004d8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a6f      	ldr	r2, [pc, #444]	@ (8004f68 <HAL_TIM_ConfigClockSource+0x214>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	f000 80c1 	beq.w	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004db0:	4a6d      	ldr	r2, [pc, #436]	@ (8004f68 <HAL_TIM_ConfigClockSource+0x214>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	f200 80c6 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004db8:	4a6c      	ldr	r2, [pc, #432]	@ (8004f6c <HAL_TIM_ConfigClockSource+0x218>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	f000 80b9 	beq.w	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004dc0:	4a6a      	ldr	r2, [pc, #424]	@ (8004f6c <HAL_TIM_ConfigClockSource+0x218>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	f200 80be 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004dc8:	4a69      	ldr	r2, [pc, #420]	@ (8004f70 <HAL_TIM_ConfigClockSource+0x21c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	f000 80b1 	beq.w	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004dd0:	4a67      	ldr	r2, [pc, #412]	@ (8004f70 <HAL_TIM_ConfigClockSource+0x21c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	f200 80b6 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004dd8:	4a66      	ldr	r2, [pc, #408]	@ (8004f74 <HAL_TIM_ConfigClockSource+0x220>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	f000 80a9 	beq.w	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004de0:	4a64      	ldr	r2, [pc, #400]	@ (8004f74 <HAL_TIM_ConfigClockSource+0x220>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	f200 80ae 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004de8:	4a63      	ldr	r2, [pc, #396]	@ (8004f78 <HAL_TIM_ConfigClockSource+0x224>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	f000 80a1 	beq.w	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004df0:	4a61      	ldr	r2, [pc, #388]	@ (8004f78 <HAL_TIM_ConfigClockSource+0x224>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	f200 80a6 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004df8:	4a60      	ldr	r2, [pc, #384]	@ (8004f7c <HAL_TIM_ConfigClockSource+0x228>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	f000 8099 	beq.w	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004e00:	4a5e      	ldr	r2, [pc, #376]	@ (8004f7c <HAL_TIM_ConfigClockSource+0x228>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	f200 809e 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004e0c:	f000 8091 	beq.w	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004e10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004e14:	f200 8096 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e1c:	f000 8089 	beq.w	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004e20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e24:	f200 808e 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e2c:	d03e      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0x158>
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e32:	f200 8087 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e3a:	f000 8086 	beq.w	8004f4a <HAL_TIM_ConfigClockSource+0x1f6>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e42:	d87f      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e44:	2b70      	cmp	r3, #112	@ 0x70
 8004e46:	d01a      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x12a>
 8004e48:	2b70      	cmp	r3, #112	@ 0x70
 8004e4a:	d87b      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e4c:	2b60      	cmp	r3, #96	@ 0x60
 8004e4e:	d050      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x19e>
 8004e50:	2b60      	cmp	r3, #96	@ 0x60
 8004e52:	d877      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e54:	2b50      	cmp	r3, #80	@ 0x50
 8004e56:	d03c      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x17e>
 8004e58:	2b50      	cmp	r3, #80	@ 0x50
 8004e5a:	d873      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e5c:	2b40      	cmp	r3, #64	@ 0x40
 8004e5e:	d058      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x1be>
 8004e60:	2b40      	cmp	r3, #64	@ 0x40
 8004e62:	d86f      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e64:	2b30      	cmp	r3, #48	@ 0x30
 8004e66:	d064      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004e68:	2b30      	cmp	r3, #48	@ 0x30
 8004e6a:	d86b      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d060      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d867      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d05c      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d05a      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x1de>
 8004e7c:	e062      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e8e:	f000 fe8b 	bl	8005ba8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
      break;
 8004eaa:	e04f      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ebc:	f000 fe74 	bl	8005ba8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ece:	609a      	str	r2, [r3, #8]
      break;
 8004ed0:	e03c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fde6 	bl	8005ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2150      	movs	r1, #80	@ 0x50
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fe3f 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e02c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004efe:	461a      	mov	r2, r3
 8004f00:	f000 fe05 	bl	8005b0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2160      	movs	r1, #96	@ 0x60
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fe2f 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8004f10:	e01c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f000 fdc6 	bl	8005ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2140      	movs	r1, #64	@ 0x40
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fe1f 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8004f30:	e00c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f000 fe16 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8004f42:	e003      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      break;
 8004f48:	e000      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	00100070 	.word	0x00100070
 8004f6c:	00100060 	.word	0x00100060
 8004f70:	00100050 	.word	0x00100050
 8004f74:	00100040 	.word	0x00100040
 8004f78:	00100030 	.word	0x00100030
 8004f7c:	00100020 	.word	0x00100020

08004f80 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	460b      	mov	r3, r1
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e14a      	b.n	80052e6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	f040 80dd 	bne.w	8005218 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800505e:	7afb      	ldrb	r3, [r7, #11]
 8005060:	2b1f      	cmp	r3, #31
 8005062:	f200 80d6 	bhi.w	8005212 <HAL_TIM_RegisterCallback+0x1de>
 8005066:	a201      	add	r2, pc, #4	@ (adr r2, 800506c <HAL_TIM_RegisterCallback+0x38>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	080050ed 	.word	0x080050ed
 8005070:	080050f5 	.word	0x080050f5
 8005074:	080050fd 	.word	0x080050fd
 8005078:	08005105 	.word	0x08005105
 800507c:	0800510d 	.word	0x0800510d
 8005080:	08005115 	.word	0x08005115
 8005084:	0800511d 	.word	0x0800511d
 8005088:	08005125 	.word	0x08005125
 800508c:	0800512d 	.word	0x0800512d
 8005090:	08005135 	.word	0x08005135
 8005094:	0800513d 	.word	0x0800513d
 8005098:	08005145 	.word	0x08005145
 800509c:	0800514d 	.word	0x0800514d
 80050a0:	08005155 	.word	0x08005155
 80050a4:	0800515f 	.word	0x0800515f
 80050a8:	08005169 	.word	0x08005169
 80050ac:	08005173 	.word	0x08005173
 80050b0:	0800517d 	.word	0x0800517d
 80050b4:	08005187 	.word	0x08005187
 80050b8:	08005191 	.word	0x08005191
 80050bc:	0800519b 	.word	0x0800519b
 80050c0:	080051a5 	.word	0x080051a5
 80050c4:	080051af 	.word	0x080051af
 80050c8:	080051b9 	.word	0x080051b9
 80050cc:	080051c3 	.word	0x080051c3
 80050d0:	080051cd 	.word	0x080051cd
 80050d4:	080051d7 	.word	0x080051d7
 80050d8:	080051e1 	.word	0x080051e1
 80050dc:	080051eb 	.word	0x080051eb
 80050e0:	080051f5 	.word	0x080051f5
 80050e4:	080051ff 	.word	0x080051ff
 80050e8:	08005209 	.word	0x08005209
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80050f2:	e0f7      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80050fa:	e0f3      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005102:	e0ef      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800510a:	e0eb      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8005112:	e0e7      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800511a:	e0e3      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8005122:	e0df      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800512a:	e0db      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8005132:	e0d7      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800513a:	e0d3      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8005142:	e0cf      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800514a:	e0cb      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8005152:	e0c7      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800515c:	e0c2      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8005166:	e0bd      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8005170:	e0b8      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800517a:	e0b3      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8005184:	e0ae      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800518e:	e0a9      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8005198:	e0a4      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80051a2:	e09f      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80051ac:	e09a      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80051b6:	e095      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80051c0:	e090      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80051ca:	e08b      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80051d4:	e086      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80051de:	e081      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80051e8:	e07c      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80051f2:	e077      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80051fc:	e072      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8005206:	e06d      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8005210:	e068      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
        break;
 8005216:	e065      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d15d      	bne.n	80052e0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8005224:	7afb      	ldrb	r3, [r7, #11]
 8005226:	2b0d      	cmp	r3, #13
 8005228:	d857      	bhi.n	80052da <HAL_TIM_RegisterCallback+0x2a6>
 800522a:	a201      	add	r2, pc, #4	@ (adr r2, 8005230 <HAL_TIM_RegisterCallback+0x1fc>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005269 	.word	0x08005269
 8005234:	08005271 	.word	0x08005271
 8005238:	08005279 	.word	0x08005279
 800523c:	08005281 	.word	0x08005281
 8005240:	08005289 	.word	0x08005289
 8005244:	08005291 	.word	0x08005291
 8005248:	08005299 	.word	0x08005299
 800524c:	080052a1 	.word	0x080052a1
 8005250:	080052a9 	.word	0x080052a9
 8005254:	080052b1 	.word	0x080052b1
 8005258:	080052b9 	.word	0x080052b9
 800525c:	080052c1 	.word	0x080052c1
 8005260:	080052c9 	.word	0x080052c9
 8005264:	080052d1 	.word	0x080052d1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800526e:	e039      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8005276:	e035      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800527e:	e031      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8005286:	e02d      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800528e:	e029      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8005296:	e025      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800529e:	e021      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80052a6:	e01d      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80052ae:	e019      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80052b6:	e015      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80052be:	e011      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80052c6:	e00d      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80052ce:	e009      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80052d8:	e004      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	75fb      	strb	r3, [r7, #23]
        break;
 80052de:	e001      	b.n	80052e4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop

080052f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a4c      	ldr	r2, [pc, #304]	@ (8005438 <TIM_Base_SetConfig+0x144>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d017      	beq.n	800533c <TIM_Base_SetConfig+0x48>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005312:	d013      	beq.n	800533c <TIM_Base_SetConfig+0x48>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a49      	ldr	r2, [pc, #292]	@ (800543c <TIM_Base_SetConfig+0x148>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00f      	beq.n	800533c <TIM_Base_SetConfig+0x48>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a48      	ldr	r2, [pc, #288]	@ (8005440 <TIM_Base_SetConfig+0x14c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_Base_SetConfig+0x48>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a47      	ldr	r2, [pc, #284]	@ (8005444 <TIM_Base_SetConfig+0x150>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_Base_SetConfig+0x48>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a46      	ldr	r2, [pc, #280]	@ (8005448 <TIM_Base_SetConfig+0x154>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0x48>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a45      	ldr	r2, [pc, #276]	@ (800544c <TIM_Base_SetConfig+0x158>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d108      	bne.n	800534e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a39      	ldr	r2, [pc, #228]	@ (8005438 <TIM_Base_SetConfig+0x144>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d023      	beq.n	800539e <TIM_Base_SetConfig+0xaa>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535c:	d01f      	beq.n	800539e <TIM_Base_SetConfig+0xaa>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a36      	ldr	r2, [pc, #216]	@ (800543c <TIM_Base_SetConfig+0x148>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d01b      	beq.n	800539e <TIM_Base_SetConfig+0xaa>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a35      	ldr	r2, [pc, #212]	@ (8005440 <TIM_Base_SetConfig+0x14c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d017      	beq.n	800539e <TIM_Base_SetConfig+0xaa>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a34      	ldr	r2, [pc, #208]	@ (8005444 <TIM_Base_SetConfig+0x150>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <TIM_Base_SetConfig+0xaa>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a33      	ldr	r2, [pc, #204]	@ (8005448 <TIM_Base_SetConfig+0x154>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00f      	beq.n	800539e <TIM_Base_SetConfig+0xaa>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a33      	ldr	r2, [pc, #204]	@ (8005450 <TIM_Base_SetConfig+0x15c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00b      	beq.n	800539e <TIM_Base_SetConfig+0xaa>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a32      	ldr	r2, [pc, #200]	@ (8005454 <TIM_Base_SetConfig+0x160>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d007      	beq.n	800539e <TIM_Base_SetConfig+0xaa>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a31      	ldr	r2, [pc, #196]	@ (8005458 <TIM_Base_SetConfig+0x164>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d003      	beq.n	800539e <TIM_Base_SetConfig+0xaa>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2c      	ldr	r2, [pc, #176]	@ (800544c <TIM_Base_SetConfig+0x158>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d108      	bne.n	80053b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a18      	ldr	r2, [pc, #96]	@ (8005438 <TIM_Base_SetConfig+0x144>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d013      	beq.n	8005404 <TIM_Base_SetConfig+0x110>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1a      	ldr	r2, [pc, #104]	@ (8005448 <TIM_Base_SetConfig+0x154>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00f      	beq.n	8005404 <TIM_Base_SetConfig+0x110>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005450 <TIM_Base_SetConfig+0x15c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00b      	beq.n	8005404 <TIM_Base_SetConfig+0x110>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a19      	ldr	r2, [pc, #100]	@ (8005454 <TIM_Base_SetConfig+0x160>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <TIM_Base_SetConfig+0x110>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a18      	ldr	r2, [pc, #96]	@ (8005458 <TIM_Base_SetConfig+0x164>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_Base_SetConfig+0x110>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a13      	ldr	r2, [pc, #76]	@ (800544c <TIM_Base_SetConfig+0x158>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d103      	bne.n	800540c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b01      	cmp	r3, #1
 800541c:	d105      	bne.n	800542a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f023 0201 	bic.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]
  }
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40013400 	.word	0x40013400
 800544c:	40015000 	.word	0x40015000
 8005450:	40014000 	.word	0x40014000
 8005454:	40014400 	.word	0x40014400
 8005458:	40014800 	.word	0x40014800

0800545c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f023 0201 	bic.w	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800548a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0303 	bic.w	r3, r3, #3
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f023 0302 	bic.w	r3, r3, #2
 80054a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a30      	ldr	r2, [pc, #192]	@ (8005578 <TIM_OC1_SetConfig+0x11c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <TIM_OC1_SetConfig+0x88>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a2f      	ldr	r2, [pc, #188]	@ (800557c <TIM_OC1_SetConfig+0x120>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00f      	beq.n	80054e4 <TIM_OC1_SetConfig+0x88>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a2e      	ldr	r2, [pc, #184]	@ (8005580 <TIM_OC1_SetConfig+0x124>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <TIM_OC1_SetConfig+0x88>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a2d      	ldr	r2, [pc, #180]	@ (8005584 <TIM_OC1_SetConfig+0x128>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_OC1_SetConfig+0x88>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005588 <TIM_OC1_SetConfig+0x12c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC1_SetConfig+0x88>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a2b      	ldr	r2, [pc, #172]	@ (800558c <TIM_OC1_SetConfig+0x130>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10c      	bne.n	80054fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0308 	bic.w	r3, r3, #8
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f023 0304 	bic.w	r3, r3, #4
 80054fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a1d      	ldr	r2, [pc, #116]	@ (8005578 <TIM_OC1_SetConfig+0x11c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <TIM_OC1_SetConfig+0xd2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a1c      	ldr	r2, [pc, #112]	@ (800557c <TIM_OC1_SetConfig+0x120>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00f      	beq.n	800552e <TIM_OC1_SetConfig+0xd2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a1b      	ldr	r2, [pc, #108]	@ (8005580 <TIM_OC1_SetConfig+0x124>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00b      	beq.n	800552e <TIM_OC1_SetConfig+0xd2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1a      	ldr	r2, [pc, #104]	@ (8005584 <TIM_OC1_SetConfig+0x128>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d007      	beq.n	800552e <TIM_OC1_SetConfig+0xd2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a19      	ldr	r2, [pc, #100]	@ (8005588 <TIM_OC1_SetConfig+0x12c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d003      	beq.n	800552e <TIM_OC1_SetConfig+0xd2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a18      	ldr	r2, [pc, #96]	@ (800558c <TIM_OC1_SetConfig+0x130>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d111      	bne.n	8005552 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800553c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	621a      	str	r2, [r3, #32]
}
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40013400 	.word	0x40013400
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800
 800558c:	40015000 	.word	0x40015000

08005590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f023 0210 	bic.w	r2, r3, #16
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0320 	bic.w	r3, r3, #32
 80055de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a2c      	ldr	r2, [pc, #176]	@ (80056a0 <TIM_OC2_SetConfig+0x110>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_OC2_SetConfig+0x74>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a2b      	ldr	r2, [pc, #172]	@ (80056a4 <TIM_OC2_SetConfig+0x114>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_OC2_SetConfig+0x74>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a2a      	ldr	r2, [pc, #168]	@ (80056a8 <TIM_OC2_SetConfig+0x118>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d10d      	bne.n	8005620 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800560a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800561e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a1f      	ldr	r2, [pc, #124]	@ (80056a0 <TIM_OC2_SetConfig+0x110>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d013      	beq.n	8005650 <TIM_OC2_SetConfig+0xc0>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a1e      	ldr	r2, [pc, #120]	@ (80056a4 <TIM_OC2_SetConfig+0x114>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00f      	beq.n	8005650 <TIM_OC2_SetConfig+0xc0>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a1e      	ldr	r2, [pc, #120]	@ (80056ac <TIM_OC2_SetConfig+0x11c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_OC2_SetConfig+0xc0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <TIM_OC2_SetConfig+0x120>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_OC2_SetConfig+0xc0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a1c      	ldr	r2, [pc, #112]	@ (80056b4 <TIM_OC2_SetConfig+0x124>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC2_SetConfig+0xc0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a17      	ldr	r2, [pc, #92]	@ (80056a8 <TIM_OC2_SetConfig+0x118>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d113      	bne.n	8005678 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800565e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40013400 	.word	0x40013400
 80056a8:	40015000 	.word	0x40015000
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800

080056b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0303 	bic.w	r3, r3, #3
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2b      	ldr	r2, [pc, #172]	@ (80057c4 <TIM_OC3_SetConfig+0x10c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <TIM_OC3_SetConfig+0x72>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2a      	ldr	r2, [pc, #168]	@ (80057c8 <TIM_OC3_SetConfig+0x110>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_OC3_SetConfig+0x72>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a29      	ldr	r2, [pc, #164]	@ (80057cc <TIM_OC3_SetConfig+0x114>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d10d      	bne.n	8005746 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1e      	ldr	r2, [pc, #120]	@ (80057c4 <TIM_OC3_SetConfig+0x10c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <TIM_OC3_SetConfig+0xbe>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a1d      	ldr	r2, [pc, #116]	@ (80057c8 <TIM_OC3_SetConfig+0x110>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00f      	beq.n	8005776 <TIM_OC3_SetConfig+0xbe>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a1d      	ldr	r2, [pc, #116]	@ (80057d0 <TIM_OC3_SetConfig+0x118>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00b      	beq.n	8005776 <TIM_OC3_SetConfig+0xbe>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a1c      	ldr	r2, [pc, #112]	@ (80057d4 <TIM_OC3_SetConfig+0x11c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d007      	beq.n	8005776 <TIM_OC3_SetConfig+0xbe>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1b      	ldr	r2, [pc, #108]	@ (80057d8 <TIM_OC3_SetConfig+0x120>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d003      	beq.n	8005776 <TIM_OC3_SetConfig+0xbe>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a16      	ldr	r2, [pc, #88]	@ (80057cc <TIM_OC3_SetConfig+0x114>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d113      	bne.n	800579e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800577c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	621a      	str	r2, [r3, #32]
}
 80057b8:	bf00      	nop
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40013400 	.word	0x40013400
 80057cc:	40015000 	.word	0x40015000
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800

080057dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800580a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800580e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800582a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	031b      	lsls	r3, r3, #12
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a2c      	ldr	r2, [pc, #176]	@ (80058ec <TIM_OC4_SetConfig+0x110>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_OC4_SetConfig+0x74>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a2b      	ldr	r2, [pc, #172]	@ (80058f0 <TIM_OC4_SetConfig+0x114>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC4_SetConfig+0x74>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a2a      	ldr	r2, [pc, #168]	@ (80058f4 <TIM_OC4_SetConfig+0x118>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10d      	bne.n	800586c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	031b      	lsls	r3, r3, #12
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800586a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a1f      	ldr	r2, [pc, #124]	@ (80058ec <TIM_OC4_SetConfig+0x110>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d013      	beq.n	800589c <TIM_OC4_SetConfig+0xc0>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a1e      	ldr	r2, [pc, #120]	@ (80058f0 <TIM_OC4_SetConfig+0x114>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00f      	beq.n	800589c <TIM_OC4_SetConfig+0xc0>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a1e      	ldr	r2, [pc, #120]	@ (80058f8 <TIM_OC4_SetConfig+0x11c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <TIM_OC4_SetConfig+0xc0>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a1d      	ldr	r2, [pc, #116]	@ (80058fc <TIM_OC4_SetConfig+0x120>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <TIM_OC4_SetConfig+0xc0>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a1c      	ldr	r2, [pc, #112]	@ (8005900 <TIM_OC4_SetConfig+0x124>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_OC4_SetConfig+0xc0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a17      	ldr	r2, [pc, #92]	@ (80058f4 <TIM_OC4_SetConfig+0x118>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d113      	bne.n	80058c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	019b      	lsls	r3, r3, #6
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40013400 	.word	0x40013400
 80058f4:	40015000 	.word	0x40015000
 80058f8:	40014000 	.word	0x40014000
 80058fc:	40014400 	.word	0x40014400
 8005900:	40014800 	.word	0x40014800

08005904 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005948:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	041b      	lsls	r3, r3, #16
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a19      	ldr	r2, [pc, #100]	@ (80059c0 <TIM_OC5_SetConfig+0xbc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <TIM_OC5_SetConfig+0x82>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a18      	ldr	r2, [pc, #96]	@ (80059c4 <TIM_OC5_SetConfig+0xc0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00f      	beq.n	8005986 <TIM_OC5_SetConfig+0x82>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a17      	ldr	r2, [pc, #92]	@ (80059c8 <TIM_OC5_SetConfig+0xc4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00b      	beq.n	8005986 <TIM_OC5_SetConfig+0x82>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <TIM_OC5_SetConfig+0xc8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d007      	beq.n	8005986 <TIM_OC5_SetConfig+0x82>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a15      	ldr	r2, [pc, #84]	@ (80059d0 <TIM_OC5_SetConfig+0xcc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_OC5_SetConfig+0x82>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a14      	ldr	r2, [pc, #80]	@ (80059d4 <TIM_OC5_SetConfig+0xd0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d109      	bne.n	800599a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800598c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	40012c00 	.word	0x40012c00
 80059c4:	40013400 	.word	0x40013400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40014400 	.word	0x40014400
 80059d0:	40014800 	.word	0x40014800
 80059d4:	40015000 	.word	0x40015000

080059d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	051b      	lsls	r3, r3, #20
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a98 <TIM_OC6_SetConfig+0xc0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d013      	beq.n	8005a5c <TIM_OC6_SetConfig+0x84>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a19      	ldr	r2, [pc, #100]	@ (8005a9c <TIM_OC6_SetConfig+0xc4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00f      	beq.n	8005a5c <TIM_OC6_SetConfig+0x84>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a18      	ldr	r2, [pc, #96]	@ (8005aa0 <TIM_OC6_SetConfig+0xc8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00b      	beq.n	8005a5c <TIM_OC6_SetConfig+0x84>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a17      	ldr	r2, [pc, #92]	@ (8005aa4 <TIM_OC6_SetConfig+0xcc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d007      	beq.n	8005a5c <TIM_OC6_SetConfig+0x84>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a16      	ldr	r2, [pc, #88]	@ (8005aa8 <TIM_OC6_SetConfig+0xd0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_OC6_SetConfig+0x84>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a15      	ldr	r2, [pc, #84]	@ (8005aac <TIM_OC6_SetConfig+0xd4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d109      	bne.n	8005a70 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	029b      	lsls	r3, r3, #10
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40013400 	.word	0x40013400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800
 8005aac:	40015000 	.word	0x40015000

08005ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 030a 	bic.w	r3, r3, #10
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b087      	sub	sp, #28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f023 0210 	bic.w	r2, r3, #16
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	031b      	lsls	r3, r3, #12
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f043 0307 	orr.w	r3, r3, #7
 8005b94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	609a      	str	r2, [r3, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	021a      	lsls	r2, r3, #8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	609a      	str	r2, [r3, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a1a      	ldr	r2, [r3, #32]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	401a      	ands	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a1a      	ldr	r2, [r3, #32]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 031f 	and.w	r3, r3, #31
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c20:	431a      	orrs	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a26      	ldr	r2, [pc, #152]	@ (8005cd8 <TIM_ResetCallback+0xa4>)
 8005c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a25      	ldr	r2, [pc, #148]	@ (8005cdc <TIM_ResetCallback+0xa8>)
 8005c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a24      	ldr	r2, [pc, #144]	@ (8005ce0 <TIM_ResetCallback+0xac>)
 8005c50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a23      	ldr	r2, [pc, #140]	@ (8005ce4 <TIM_ResetCallback+0xb0>)
 8005c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a22      	ldr	r2, [pc, #136]	@ (8005ce8 <TIM_ResetCallback+0xb4>)
 8005c60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a21      	ldr	r2, [pc, #132]	@ (8005cec <TIM_ResetCallback+0xb8>)
 8005c68:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a20      	ldr	r2, [pc, #128]	@ (8005cf0 <TIM_ResetCallback+0xbc>)
 8005c70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf4 <TIM_ResetCallback+0xc0>)
 8005c78:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf8 <TIM_ResetCallback+0xc4>)
 8005c80:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a1d      	ldr	r2, [pc, #116]	@ (8005cfc <TIM_ResetCallback+0xc8>)
 8005c88:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d00 <TIM_ResetCallback+0xcc>)
 8005c90:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <TIM_ResetCallback+0xd0>)
 8005c98:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d08 <TIM_ResetCallback+0xd4>)
 8005ca0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a19      	ldr	r2, [pc, #100]	@ (8005d0c <TIM_ResetCallback+0xd8>)
 8005ca8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <TIM_ResetCallback+0xdc>)
 8005cb0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a17      	ldr	r2, [pc, #92]	@ (8005d14 <TIM_ResetCallback+0xe0>)
 8005cb8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a16      	ldr	r2, [pc, #88]	@ (8005d18 <TIM_ResetCallback+0xe4>)
 8005cc0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a15      	ldr	r2, [pc, #84]	@ (8005d1c <TIM_ResetCallback+0xe8>)
 8005cc8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	08001ba9 	.word	0x08001ba9
 8005cdc:	08004f81 	.word	0x08004f81
 8005ce0:	08004ff9 	.word	0x08004ff9
 8005ce4:	0800500d 	.word	0x0800500d
 8005ce8:	08004fa9 	.word	0x08004fa9
 8005cec:	08004fbd 	.word	0x08004fbd
 8005cf0:	08004f95 	.word	0x08004f95
 8005cf4:	08004fd1 	.word	0x08004fd1
 8005cf8:	08004fe5 	.word	0x08004fe5
 8005cfc:	08005021 	.word	0x08005021
 8005d00:	08005e4d 	.word	0x08005e4d
 8005d04:	08005e61 	.word	0x08005e61
 8005d08:	08005e75 	.word	0x08005e75
 8005d0c:	08005e89 	.word	0x08005e89
 8005d10:	08005e9d 	.word	0x08005e9d
 8005d14:	08005eb1 	.word	0x08005eb1
 8005d18:	08005ec5 	.word	0x08005ec5
 8005d1c:	08005ed9 	.word	0x08005ed9

08005d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e074      	b.n	8005e22 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a34      	ldr	r2, [pc, #208]	@ (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d009      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a33      	ldr	r2, [pc, #204]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a31      	ldr	r2, [pc, #196]	@ (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d108      	bne.n	8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a21      	ldr	r2, [pc, #132]	@ (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d022      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db8:	d01d      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d018      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00e      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a15      	ldr	r2, [pc, #84]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a18      	ldr	r2, [pc, #96]	@ (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a11      	ldr	r2, [pc, #68]	@ (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10c      	bne.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40015000 	.word	0x40015000
 8005e3c:	40000400 	.word	0x40000400
 8005e40:	40000800 	.word	0x40000800
 8005e44:	40000c00 	.word	0x40000c00
 8005e48:	40014000 	.word	0x40014000

08005e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e050      	b.n	8005fa0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d114      	bne.n	8005f32 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fe8d 	bl	8006c30 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d103      	bne.n	8005f28 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a21      	ldr	r2, [pc, #132]	@ (8005fa8 <HAL_UART_Init+0xbc>)
 8005f24:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2224      	movs	r2, #36	@ 0x24
 8005f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0201 	bic.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f001 f9ba 	bl	80072cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 febb 	bl	8006cd4 <UART_SetConfig>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e01b      	b.n	8005fa0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f001 fa39 	bl	8007410 <UART_CheckIdleState>
 8005f9e:	4603      	mov	r3, r0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	080021b9 	.word	0x080021b9

08005fac <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d109      	bne.n	8005fd8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e09c      	b.n	8006112 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d16c      	bne.n	80060bc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8005fe2:	7afb      	ldrb	r3, [r7, #11]
 8005fe4:	2b0c      	cmp	r3, #12
 8005fe6:	d85e      	bhi.n	80060a6 <HAL_UART_RegisterCallback+0xfa>
 8005fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff0 <HAL_UART_RegisterCallback+0x44>)
 8005fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fee:	bf00      	nop
 8005ff0:	08006025 	.word	0x08006025
 8005ff4:	0800602f 	.word	0x0800602f
 8005ff8:	08006039 	.word	0x08006039
 8005ffc:	08006043 	.word	0x08006043
 8006000:	0800604d 	.word	0x0800604d
 8006004:	08006057 	.word	0x08006057
 8006008:	08006061 	.word	0x08006061
 800600c:	0800606b 	.word	0x0800606b
 8006010:	08006075 	.word	0x08006075
 8006014:	0800607f 	.word	0x0800607f
 8006018:	08006089 	.word	0x08006089
 800601c:	08006093 	.word	0x08006093
 8006020:	0800609d 	.word	0x0800609d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800602c:	e070      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8006036:	e06b      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8006040:	e066      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800604a:	e061      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8006054:	e05c      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800605e:	e057      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8006068:	e052      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8006072:	e04d      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800607c:	e048      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8006086:	e043      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8006090:	e03e      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800609a:	e039      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80060a4:	e034      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]
        break;
 80060ba:	e029      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d11a      	bne.n	80060fc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80060c6:	7afb      	ldrb	r3, [r7, #11]
 80060c8:	2b0b      	cmp	r3, #11
 80060ca:	d002      	beq.n	80060d2 <HAL_UART_RegisterCallback+0x126>
 80060cc:	2b0c      	cmp	r3, #12
 80060ce:	d005      	beq.n	80060dc <HAL_UART_RegisterCallback+0x130>
 80060d0:	e009      	b.n	80060e6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80060da:	e019      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80060e4:	e014      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
        break;
 80060fa:	e009      	b.n	8006110 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006102:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
}
 8006112:	4618      	mov	r0, r3
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop

08006120 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	@ 0x28
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006136:	2b20      	cmp	r3, #32
 8006138:	f040 80b5 	bne.w	80062a6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <HAL_UART_Receive+0x28>
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0ad      	b.n	80062a8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2222      	movs	r2, #34	@ 0x22
 8006158:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006162:	f7fc fa39 	bl	80025d8 <HAL_GetTick>
 8006166:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	88fa      	ldrh	r2, [r7, #6]
 800616c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	88fa      	ldrh	r2, [r7, #6]
 8006174:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006180:	d10e      	bne.n	80061a0 <HAL_UART_Receive+0x80>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <HAL_UART_Receive+0x76>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006190:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006194:	e02d      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	22ff      	movs	r2, #255	@ 0xff
 800619a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800619e:	e028      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10d      	bne.n	80061c4 <HAL_UART_Receive+0xa4>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <HAL_UART_Receive+0x9a>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	22ff      	movs	r2, #255	@ 0xff
 80061b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80061b8:	e01b      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	227f      	movs	r2, #127	@ 0x7f
 80061be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80061c2:	e016      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061cc:	d10d      	bne.n	80061ea <HAL_UART_Receive+0xca>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <HAL_UART_Receive+0xc0>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	227f      	movs	r2, #127	@ 0x7f
 80061da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80061de:	e008      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	223f      	movs	r2, #63	@ 0x3f
 80061e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80061e8:	e003      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80061f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006202:	d108      	bne.n	8006216 <HAL_UART_Receive+0xf6>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e003      	b.n	800621e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800621e:	e036      	b.n	800628e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2200      	movs	r2, #0
 8006228:	2120      	movs	r1, #32
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f001 f99a 	bl	8007564 <UART_WaitOnFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e032      	b.n	80062a8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10c      	bne.n	8006262 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624e:	b29a      	uxth	r2, r3
 8006250:	8a7b      	ldrh	r3, [r7, #18]
 8006252:	4013      	ands	r3, r2
 8006254:	b29a      	uxth	r2, r3
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	3302      	adds	r3, #2
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e00c      	b.n	800627c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	b2da      	uxtb	r2, r3
 800626a:	8a7b      	ldrh	r3, [r7, #18]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	4013      	ands	r3, r2
 8006270:	b2da      	uxtb	r2, r3
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3301      	adds	r3, #1
 800627a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1c2      	bne.n	8006220 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2220      	movs	r2, #32
 800629e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e000      	b.n	80062a8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80062a6:	2302      	movs	r3, #2
  }
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	@ 0x28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d167      	bne.n	8006398 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_UART_Transmit_DMA+0x24>
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e060      	b.n	800639a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	88fa      	ldrh	r2, [r7, #6]
 80062ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2221      	movs	r2, #33	@ 0x21
 80062fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d028      	beq.n	8006358 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800630a:	4a26      	ldr	r2, [pc, #152]	@ (80063a4 <HAL_UART_Transmit_DMA+0xf4>)
 800630c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006312:	4a25      	ldr	r2, [pc, #148]	@ (80063a8 <HAL_UART_Transmit_DMA+0xf8>)
 8006314:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800631a:	4a24      	ldr	r2, [pc, #144]	@ (80063ac <HAL_UART_Transmit_DMA+0xfc>)
 800631c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006322:	2200      	movs	r2, #0
 8006324:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632e:	4619      	mov	r1, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3328      	adds	r3, #40	@ 0x28
 8006336:	461a      	mov	r2, r3
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	f7fc fb11 	bl	8002960 <HAL_DMA_Start_IT>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2210      	movs	r2, #16
 8006348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2220      	movs	r2, #32
 8006350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e020      	b.n	800639a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2240      	movs	r2, #64	@ 0x40
 800635e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3308      	adds	r3, #8
 8006366:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	613b      	str	r3, [r7, #16]
   return(result);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006376:	627b      	str	r3, [r7, #36]	@ 0x24
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3308      	adds	r3, #8
 800637e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006380:	623a      	str	r2, [r7, #32]
 8006382:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	69f9      	ldr	r1, [r7, #28]
 8006386:	6a3a      	ldr	r2, [r7, #32]
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	61bb      	str	r3, [r7, #24]
   return(result);
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e5      	bne.n	8006360 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	e000      	b.n	800639a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006398:	2302      	movs	r3, #2
  }
}
 800639a:	4618      	mov	r0, r3
 800639c:	3728      	adds	r7, #40	@ 0x28
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	080078db 	.word	0x080078db
 80063a8:	08007979 	.word	0x08007979
 80063ac:	08007b13 	.word	0x08007b13

080063b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08a      	sub	sp, #40	@ 0x28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d137      	bne.n	8006438 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_UART_Receive_DMA+0x24>
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e030      	b.n	800643a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a18      	ldr	r2, [pc, #96]	@ (8006444 <HAL_UART_Receive_DMA+0x94>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d01f      	beq.n	8006428 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d018      	beq.n	8006428 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	613b      	str	r3, [r7, #16]
   return(result);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	69f9      	ldr	r1, [r7, #28]
 800641a:	6a3a      	ldr	r2, [r7, #32]
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	61bb      	str	r3, [r7, #24]
   return(result);
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e6      	bne.n	80063f6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006428:	88fb      	ldrh	r3, [r7, #6]
 800642a:	461a      	mov	r2, r3
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f001 f906 	bl	8007640 <UART_Start_Receive_DMA>
 8006434:	4603      	mov	r3, r0
 8006436:	e000      	b.n	800643a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006438:	2302      	movs	r3, #2
  }
}
 800643a:	4618      	mov	r0, r3
 800643c:	3728      	adds	r7, #40	@ 0x28
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40008000 	.word	0x40008000

08006448 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b0ba      	sub	sp, #232	@ 0xe8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800646e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006472:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006476:	4013      	ands	r3, r2
 8006478:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800647c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11b      	bne.n	80064bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d015      	beq.n	80064bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d105      	bne.n	80064a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800649c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 82f3 	beq.w	8006a98 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
      }
      return;
 80064ba:	e2ed      	b.n	8006a98 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 8129 	beq.w	8006718 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80064c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80064ca:	4b90      	ldr	r3, [pc, #576]	@ (800670c <HAL_UART_IRQHandler+0x2c4>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80064d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80064d6:	4b8e      	ldr	r3, [pc, #568]	@ (8006710 <HAL_UART_IRQHandler+0x2c8>)
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 811c 	beq.w	8006718 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d011      	beq.n	8006510 <HAL_UART_IRQHandler+0xc8>
 80064ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2201      	movs	r2, #1
 80064fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006506:	f043 0201 	orr.w	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d011      	beq.n	8006540 <HAL_UART_IRQHandler+0xf8>
 800651c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2202      	movs	r2, #2
 800652e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006536:	f043 0204 	orr.w	r2, r3, #4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d011      	beq.n	8006570 <HAL_UART_IRQHandler+0x128>
 800654c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2204      	movs	r2, #4
 800655e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006566:	f043 0202 	orr.w	r2, r3, #2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d017      	beq.n	80065ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800657c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d105      	bne.n	8006594 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006588:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800658c:	4b5f      	ldr	r3, [pc, #380]	@ (800670c <HAL_UART_IRQHandler+0x2c4>)
 800658e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2208      	movs	r2, #8
 800659a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a2:	f043 0208 	orr.w	r2, r3, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d012      	beq.n	80065de <HAL_UART_IRQHandler+0x196>
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00c      	beq.n	80065de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d4:	f043 0220 	orr.w	r2, r3, #32
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8259 	beq.w	8006a9c <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d013      	beq.n	800661e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d105      	bne.n	800660e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d007      	beq.n	800661e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006624:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006632:	2b40      	cmp	r3, #64	@ 0x40
 8006634:	d005      	beq.n	8006642 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800663a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800663e:	2b00      	cmp	r3, #0
 8006640:	d058      	beq.n	80066f4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 f8e3 	bl	800780e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006652:	2b40      	cmp	r3, #64	@ 0x40
 8006654:	d148      	bne.n	80066e8 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3308      	adds	r3, #8
 800665c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800666c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006674:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3308      	adds	r3, #8
 800667e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006682:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800668e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800669a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1d9      	bne.n	8006656 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d017      	beq.n	80066dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066b2:	4a18      	ldr	r2, [pc, #96]	@ (8006714 <HAL_UART_IRQHandler+0x2cc>)
 80066b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fc fa23 	bl	8002b08 <HAL_DMA_Abort_IT>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01f      	beq.n	8006708 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80066d6:	4610      	mov	r0, r2
 80066d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066da:	e015      	b.n	8006708 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e6:	e00f      	b.n	8006708 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f2:	e009      	b.n	8006708 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006706:	e1c9      	b.n	8006a9c <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006708:	bf00      	nop
    return;
 800670a:	e1c7      	b.n	8006a9c <HAL_UART_IRQHandler+0x654>
 800670c:	10000001 	.word	0x10000001
 8006710:	04000120 	.word	0x04000120
 8006714:	08007b97 	.word	0x08007b97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800671c:	2b01      	cmp	r3, #1
 800671e:	f040 8157 	bne.w	80069d0 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 8150 	beq.w	80069d0 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8149 	beq.w	80069d0 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2210      	movs	r2, #16
 8006744:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006750:	2b40      	cmp	r3, #64	@ 0x40
 8006752:	f040 80bd 	bne.w	80068d0 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006764:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8199 	beq.w	8006aa0 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006774:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006778:	429a      	cmp	r2, r3
 800677a:	f080 8191 	bcs.w	8006aa0 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006784:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 8087 	bne.w	80068aa <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1da      	bne.n	800679c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3308      	adds	r3, #8
 80067ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3308      	adds	r3, #8
 8006806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800680a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800680e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006812:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800681c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e1      	bne.n	80067e6 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3308      	adds	r3, #8
 8006842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006846:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006848:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800684c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e3      	bne.n	8006822 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006878:	f023 0310 	bic.w	r3, r3, #16
 800687c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800688a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800688c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006890:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e4      	bne.n	8006868 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fc f8d6 	bl	8002a56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2202      	movs	r2, #2
 80068ae:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80068c2:	b292      	uxth	r2, r2
 80068c4:	1a8a      	subs	r2, r1, r2
 80068c6:	b292      	uxth	r2, r2
 80068c8:	4611      	mov	r1, r2
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068ce:	e0e7      	b.n	8006aa0 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80d9 	beq.w	8006aa4 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80068f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80d4 	beq.w	8006aa4 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800690a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006910:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800691e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006920:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006924:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800692c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e4      	bne.n	80068fc <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	623b      	str	r3, [r7, #32]
   return(result);
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3308      	adds	r3, #8
 8006956:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800695a:	633a      	str	r2, [r7, #48]	@ 0x30
 800695c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e1      	bne.n	8006932 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2220      	movs	r2, #32
 8006972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0310 	bic.w	r3, r3, #16
 8006996:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80069a4:	61fb      	str	r3, [r7, #28]
 80069a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	69b9      	ldr	r1, [r7, #24]
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	617b      	str	r3, [r7, #20]
   return(result);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e4      	bne.n	8006982 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80069c4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80069c8:	4611      	mov	r1, r2
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069ce:	e069      	b.n	8006aa4 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d010      	beq.n	80069fe <HAL_UART_IRQHandler+0x5b6>
 80069dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80069f0:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069fc:	e055      	b.n	8006aaa <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80069fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d014      	beq.n	8006a34 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d105      	bne.n	8006a22 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d008      	beq.n	8006a34 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d03e      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	4798      	blx	r3
    }
    return;
 8006a32:	e039      	b.n	8006aa8 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <HAL_UART_IRQHandler+0x60c>
 8006a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 f8ba 	bl	8007bc6 <UART_EndTransmit_IT>
    return;
 8006a52:	e02a      	b.n	8006aaa <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00b      	beq.n	8006a78 <HAL_UART_IRQHandler+0x630>
 8006a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a76:	e018      	b.n	8006aaa <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d012      	beq.n	8006aaa <HAL_UART_IRQHandler+0x662>
 8006a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	da0e      	bge.n	8006aaa <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a96:	e008      	b.n	8006aaa <HAL_UART_IRQHandler+0x662>
      return;
 8006a98:	bf00      	nop
 8006a9a:	e006      	b.n	8006aaa <HAL_UART_IRQHandler+0x662>
    return;
 8006a9c:	bf00      	nop
 8006a9e:	e004      	b.n	8006aaa <HAL_UART_IRQHandler+0x662>
      return;
 8006aa0:	bf00      	nop
 8006aa2:	e002      	b.n	8006aaa <HAL_UART_IRQHandler+0x662>
      return;
 8006aa4:	bf00      	nop
 8006aa6:	e000      	b.n	8006aaa <HAL_UART_IRQHandler+0x662>
    return;
 8006aa8:	bf00      	nop
  }
}
 8006aaa:	37e8      	adds	r7, #232	@ 0xe8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a09      	ldr	r2, [pc, #36]	@ (8006b9c <HAL_UART_ReceiverTimeout_Config+0x34>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	615a      	str	r2, [r3, #20]
  }
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	40008000 	.word	0x40008000

08006ba0 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a18      	ldr	r2, [pc, #96]	@ (8006c10 <HAL_UART_EnableReceiverTimeout+0x70>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d027      	beq.n	8006c02 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d120      	bne.n	8006bfe <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_UART_EnableReceiverTimeout+0x2a>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e01c      	b.n	8006c04 <HAL_UART_EnableReceiverTimeout+0x64>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2224      	movs	r2, #36	@ 0x24
 8006bd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006be8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	e002      	b.n	8006c04 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e000      	b.n	8006c04 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
  }
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	40008000 	.word	0x40008000

08006c14 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ca4 <UART_InitCallbacksToDefault+0x74>)
 8006c3c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a19      	ldr	r2, [pc, #100]	@ (8006ca8 <UART_InitCallbacksToDefault+0x78>)
 8006c44:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a18      	ldr	r2, [pc, #96]	@ (8006cac <UART_InitCallbacksToDefault+0x7c>)
 8006c4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a17      	ldr	r2, [pc, #92]	@ (8006cb0 <UART_InitCallbacksToDefault+0x80>)
 8006c54:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a16      	ldr	r2, [pc, #88]	@ (8006cb4 <UART_InitCallbacksToDefault+0x84>)
 8006c5c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a15      	ldr	r2, [pc, #84]	@ (8006cb8 <UART_InitCallbacksToDefault+0x88>)
 8006c64:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a14      	ldr	r2, [pc, #80]	@ (8006cbc <UART_InitCallbacksToDefault+0x8c>)
 8006c6c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a13      	ldr	r2, [pc, #76]	@ (8006cc0 <UART_InitCallbacksToDefault+0x90>)
 8006c74:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a12      	ldr	r2, [pc, #72]	@ (8006cc4 <UART_InitCallbacksToDefault+0x94>)
 8006c7c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a11      	ldr	r2, [pc, #68]	@ (8006cc8 <UART_InitCallbacksToDefault+0x98>)
 8006c84:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a10      	ldr	r2, [pc, #64]	@ (8006ccc <UART_InitCallbacksToDefault+0x9c>)
 8006c8c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a0f      	ldr	r2, [pc, #60]	@ (8006cd0 <UART_InitCallbacksToDefault+0xa0>)
 8006c94:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	08006ac5 	.word	0x08006ac5
 8006ca8:	08006ab1 	.word	0x08006ab1
 8006cac:	08006aed 	.word	0x08006aed
 8006cb0:	08006ad9 	.word	0x08006ad9
 8006cb4:	08006b01 	.word	0x08006b01
 8006cb8:	08006b15 	.word	0x08006b15
 8006cbc:	08006b29 	.word	0x08006b29
 8006cc0:	08006b3d 	.word	0x08006b3d
 8006cc4:	08007c21 	.word	0x08007c21
 8006cc8:	08007c35 	.word	0x08007c35
 8006ccc:	08007c49 	.word	0x08007c49
 8006cd0:	08006b51 	.word	0x08006b51

08006cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cd8:	b08c      	sub	sp, #48	@ 0x30
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	431a      	orrs	r2, r3
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4baa      	ldr	r3, [pc, #680]	@ (8006fac <UART_SetConfig+0x2d8>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	6812      	ldr	r2, [r2, #0]
 8006d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a9f      	ldr	r2, [pc, #636]	@ (8006fb0 <UART_SetConfig+0x2dc>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006d4a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	6812      	ldr	r2, [r2, #0]
 8006d52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d54:	430b      	orrs	r3, r1
 8006d56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5e:	f023 010f 	bic.w	r1, r3, #15
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a90      	ldr	r2, [pc, #576]	@ (8006fb4 <UART_SetConfig+0x2e0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d125      	bne.n	8006dc4 <UART_SetConfig+0xf0>
 8006d78:	4b8f      	ldr	r3, [pc, #572]	@ (8006fb8 <UART_SetConfig+0x2e4>)
 8006d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d81a      	bhi.n	8006dbc <UART_SetConfig+0xe8>
 8006d86:	a201      	add	r2, pc, #4	@ (adr r2, 8006d8c <UART_SetConfig+0xb8>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006d9d 	.word	0x08006d9d
 8006d90:	08006dad 	.word	0x08006dad
 8006d94:	08006da5 	.word	0x08006da5
 8006d98:	08006db5 	.word	0x08006db5
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da2:	e116      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006da4:	2302      	movs	r3, #2
 8006da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006daa:	e112      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006dac:	2304      	movs	r3, #4
 8006dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db2:	e10e      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006db4:	2308      	movs	r3, #8
 8006db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dba:	e10a      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006dbc:	2310      	movs	r3, #16
 8006dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dc2:	e106      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a7c      	ldr	r2, [pc, #496]	@ (8006fbc <UART_SetConfig+0x2e8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d138      	bne.n	8006e40 <UART_SetConfig+0x16c>
 8006dce:	4b7a      	ldr	r3, [pc, #488]	@ (8006fb8 <UART_SetConfig+0x2e4>)
 8006dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd4:	f003 030c 	and.w	r3, r3, #12
 8006dd8:	2b0c      	cmp	r3, #12
 8006dda:	d82d      	bhi.n	8006e38 <UART_SetConfig+0x164>
 8006ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8006de4 <UART_SetConfig+0x110>)
 8006dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de2:	bf00      	nop
 8006de4:	08006e19 	.word	0x08006e19
 8006de8:	08006e39 	.word	0x08006e39
 8006dec:	08006e39 	.word	0x08006e39
 8006df0:	08006e39 	.word	0x08006e39
 8006df4:	08006e29 	.word	0x08006e29
 8006df8:	08006e39 	.word	0x08006e39
 8006dfc:	08006e39 	.word	0x08006e39
 8006e00:	08006e39 	.word	0x08006e39
 8006e04:	08006e21 	.word	0x08006e21
 8006e08:	08006e39 	.word	0x08006e39
 8006e0c:	08006e39 	.word	0x08006e39
 8006e10:	08006e39 	.word	0x08006e39
 8006e14:	08006e31 	.word	0x08006e31
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1e:	e0d8      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006e20:	2302      	movs	r3, #2
 8006e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e26:	e0d4      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006e28:	2304      	movs	r3, #4
 8006e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e2e:	e0d0      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006e30:	2308      	movs	r3, #8
 8006e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e36:	e0cc      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3e:	e0c8      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a5e      	ldr	r2, [pc, #376]	@ (8006fc0 <UART_SetConfig+0x2ec>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d125      	bne.n	8006e96 <UART_SetConfig+0x1c2>
 8006e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8006fb8 <UART_SetConfig+0x2e4>)
 8006e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e54:	2b30      	cmp	r3, #48	@ 0x30
 8006e56:	d016      	beq.n	8006e86 <UART_SetConfig+0x1b2>
 8006e58:	2b30      	cmp	r3, #48	@ 0x30
 8006e5a:	d818      	bhi.n	8006e8e <UART_SetConfig+0x1ba>
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	d00a      	beq.n	8006e76 <UART_SetConfig+0x1a2>
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	d814      	bhi.n	8006e8e <UART_SetConfig+0x1ba>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <UART_SetConfig+0x19a>
 8006e68:	2b10      	cmp	r3, #16
 8006e6a:	d008      	beq.n	8006e7e <UART_SetConfig+0x1aa>
 8006e6c:	e00f      	b.n	8006e8e <UART_SetConfig+0x1ba>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e74:	e0ad      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006e76:	2302      	movs	r3, #2
 8006e78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e7c:	e0a9      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006e7e:	2304      	movs	r3, #4
 8006e80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e84:	e0a5      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006e86:	2308      	movs	r3, #8
 8006e88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8c:	e0a1      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006e8e:	2310      	movs	r3, #16
 8006e90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e94:	e09d      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a4a      	ldr	r2, [pc, #296]	@ (8006fc4 <UART_SetConfig+0x2f0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d125      	bne.n	8006eec <UART_SetConfig+0x218>
 8006ea0:	4b45      	ldr	r3, [pc, #276]	@ (8006fb8 <UART_SetConfig+0x2e4>)
 8006ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006eaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8006eac:	d016      	beq.n	8006edc <UART_SetConfig+0x208>
 8006eae:	2bc0      	cmp	r3, #192	@ 0xc0
 8006eb0:	d818      	bhi.n	8006ee4 <UART_SetConfig+0x210>
 8006eb2:	2b80      	cmp	r3, #128	@ 0x80
 8006eb4:	d00a      	beq.n	8006ecc <UART_SetConfig+0x1f8>
 8006eb6:	2b80      	cmp	r3, #128	@ 0x80
 8006eb8:	d814      	bhi.n	8006ee4 <UART_SetConfig+0x210>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <UART_SetConfig+0x1f0>
 8006ebe:	2b40      	cmp	r3, #64	@ 0x40
 8006ec0:	d008      	beq.n	8006ed4 <UART_SetConfig+0x200>
 8006ec2:	e00f      	b.n	8006ee4 <UART_SetConfig+0x210>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eca:	e082      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed2:	e07e      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eda:	e07a      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006edc:	2308      	movs	r3, #8
 8006ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee2:	e076      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eea:	e072      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a35      	ldr	r2, [pc, #212]	@ (8006fc8 <UART_SetConfig+0x2f4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d12a      	bne.n	8006f4c <UART_SetConfig+0x278>
 8006ef6:	4b30      	ldr	r3, [pc, #192]	@ (8006fb8 <UART_SetConfig+0x2e4>)
 8006ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006efc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f04:	d01a      	beq.n	8006f3c <UART_SetConfig+0x268>
 8006f06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f0a:	d81b      	bhi.n	8006f44 <UART_SetConfig+0x270>
 8006f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f10:	d00c      	beq.n	8006f2c <UART_SetConfig+0x258>
 8006f12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f16:	d815      	bhi.n	8006f44 <UART_SetConfig+0x270>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <UART_SetConfig+0x250>
 8006f1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f20:	d008      	beq.n	8006f34 <UART_SetConfig+0x260>
 8006f22:	e00f      	b.n	8006f44 <UART_SetConfig+0x270>
 8006f24:	2300      	movs	r3, #0
 8006f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2a:	e052      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f32:	e04e      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006f34:	2304      	movs	r3, #4
 8006f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f3a:	e04a      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006f3c:	2308      	movs	r3, #8
 8006f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f42:	e046      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006f44:	2310      	movs	r3, #16
 8006f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f4a:	e042      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a17      	ldr	r2, [pc, #92]	@ (8006fb0 <UART_SetConfig+0x2dc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d13a      	bne.n	8006fcc <UART_SetConfig+0x2f8>
 8006f56:	4b18      	ldr	r3, [pc, #96]	@ (8006fb8 <UART_SetConfig+0x2e4>)
 8006f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f64:	d01a      	beq.n	8006f9c <UART_SetConfig+0x2c8>
 8006f66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f6a:	d81b      	bhi.n	8006fa4 <UART_SetConfig+0x2d0>
 8006f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f70:	d00c      	beq.n	8006f8c <UART_SetConfig+0x2b8>
 8006f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f76:	d815      	bhi.n	8006fa4 <UART_SetConfig+0x2d0>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <UART_SetConfig+0x2b0>
 8006f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f80:	d008      	beq.n	8006f94 <UART_SetConfig+0x2c0>
 8006f82:	e00f      	b.n	8006fa4 <UART_SetConfig+0x2d0>
 8006f84:	2300      	movs	r3, #0
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8a:	e022      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f92:	e01e      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006f94:	2304      	movs	r3, #4
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9a:	e01a      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006f9c:	2308      	movs	r3, #8
 8006f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa2:	e016      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006fa4:	2310      	movs	r3, #16
 8006fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006faa:	e012      	b.n	8006fd2 <UART_SetConfig+0x2fe>
 8006fac:	cfff69f3 	.word	0xcfff69f3
 8006fb0:	40008000 	.word	0x40008000
 8006fb4:	40013800 	.word	0x40013800
 8006fb8:	40021000 	.word	0x40021000
 8006fbc:	40004400 	.word	0x40004400
 8006fc0:	40004800 	.word	0x40004800
 8006fc4:	40004c00 	.word	0x40004c00
 8006fc8:	40005000 	.word	0x40005000
 8006fcc:	2310      	movs	r3, #16
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4aae      	ldr	r2, [pc, #696]	@ (8007290 <UART_SetConfig+0x5bc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	f040 8097 	bne.w	800710c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d823      	bhi.n	800702e <UART_SetConfig+0x35a>
 8006fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <UART_SetConfig+0x318>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007011 	.word	0x08007011
 8006ff0:	0800702f 	.word	0x0800702f
 8006ff4:	08007019 	.word	0x08007019
 8006ff8:	0800702f 	.word	0x0800702f
 8006ffc:	0800701f 	.word	0x0800701f
 8007000:	0800702f 	.word	0x0800702f
 8007004:	0800702f 	.word	0x0800702f
 8007008:	0800702f 	.word	0x0800702f
 800700c:	08007027 	.word	0x08007027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007010:	f7fc fe5e 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8007014:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007016:	e010      	b.n	800703a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007018:	4b9e      	ldr	r3, [pc, #632]	@ (8007294 <UART_SetConfig+0x5c0>)
 800701a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800701c:	e00d      	b.n	800703a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701e:	f7fc fde9 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8007022:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007024:	e009      	b.n	800703a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800702a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800702c:	e005      	b.n	800703a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007038:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8130 	beq.w	80072a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007046:	4a94      	ldr	r2, [pc, #592]	@ (8007298 <UART_SetConfig+0x5c4>)
 8007048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800704c:	461a      	mov	r2, r3
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	fbb3 f3f2 	udiv	r3, r3, r2
 8007054:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	4613      	mov	r3, r2
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	4413      	add	r3, r2
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	429a      	cmp	r2, r3
 8007064:	d305      	bcc.n	8007072 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	429a      	cmp	r2, r3
 8007070:	d903      	bls.n	800707a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007078:	e113      	b.n	80072a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	2200      	movs	r2, #0
 800707e:	60bb      	str	r3, [r7, #8]
 8007080:	60fa      	str	r2, [r7, #12]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007086:	4a84      	ldr	r2, [pc, #528]	@ (8007298 <UART_SetConfig+0x5c4>)
 8007088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800708c:	b29b      	uxth	r3, r3
 800708e:	2200      	movs	r2, #0
 8007090:	603b      	str	r3, [r7, #0]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007098:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800709c:	f7f9 fcb2 	bl	8000a04 <__aeabi_uldivmod>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4610      	mov	r0, r2
 80070a6:	4619      	mov	r1, r3
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	020b      	lsls	r3, r1, #8
 80070b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070b6:	0202      	lsls	r2, r0, #8
 80070b8:	6979      	ldr	r1, [r7, #20]
 80070ba:	6849      	ldr	r1, [r1, #4]
 80070bc:	0849      	lsrs	r1, r1, #1
 80070be:	2000      	movs	r0, #0
 80070c0:	460c      	mov	r4, r1
 80070c2:	4605      	mov	r5, r0
 80070c4:	eb12 0804 	adds.w	r8, r2, r4
 80070c8:	eb43 0905 	adc.w	r9, r3, r5
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	469a      	mov	sl, r3
 80070d4:	4693      	mov	fp, r2
 80070d6:	4652      	mov	r2, sl
 80070d8:	465b      	mov	r3, fp
 80070da:	4640      	mov	r0, r8
 80070dc:	4649      	mov	r1, r9
 80070de:	f7f9 fc91 	bl	8000a04 <__aeabi_uldivmod>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4613      	mov	r3, r2
 80070e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070f0:	d308      	bcc.n	8007104 <UART_SetConfig+0x430>
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070f8:	d204      	bcs.n	8007104 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6a3a      	ldr	r2, [r7, #32]
 8007100:	60da      	str	r2, [r3, #12]
 8007102:	e0ce      	b.n	80072a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800710a:	e0ca      	b.n	80072a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007114:	d166      	bne.n	80071e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007116:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800711a:	2b08      	cmp	r3, #8
 800711c:	d827      	bhi.n	800716e <UART_SetConfig+0x49a>
 800711e:	a201      	add	r2, pc, #4	@ (adr r2, 8007124 <UART_SetConfig+0x450>)
 8007120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007124:	08007149 	.word	0x08007149
 8007128:	08007151 	.word	0x08007151
 800712c:	08007159 	.word	0x08007159
 8007130:	0800716f 	.word	0x0800716f
 8007134:	0800715f 	.word	0x0800715f
 8007138:	0800716f 	.word	0x0800716f
 800713c:	0800716f 	.word	0x0800716f
 8007140:	0800716f 	.word	0x0800716f
 8007144:	08007167 	.word	0x08007167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007148:	f7fc fdc2 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 800714c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800714e:	e014      	b.n	800717a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007150:	f7fc fdd4 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 8007154:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007156:	e010      	b.n	800717a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007158:	4b4e      	ldr	r3, [pc, #312]	@ (8007294 <UART_SetConfig+0x5c0>)
 800715a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800715c:	e00d      	b.n	800717a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800715e:	f7fc fd49 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8007162:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007164:	e009      	b.n	800717a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800716a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800716c:	e005      	b.n	800717a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 8090 	beq.w	80072a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007186:	4a44      	ldr	r2, [pc, #272]	@ (8007298 <UART_SetConfig+0x5c4>)
 8007188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800718c:	461a      	mov	r2, r3
 800718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007190:	fbb3 f3f2 	udiv	r3, r3, r2
 8007194:	005a      	lsls	r2, r3, #1
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	441a      	add	r2, r3
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	2b0f      	cmp	r3, #15
 80071ac:	d916      	bls.n	80071dc <UART_SetConfig+0x508>
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071b4:	d212      	bcs.n	80071dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f023 030f 	bic.w	r3, r3, #15
 80071be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	085b      	lsrs	r3, r3, #1
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	8bfb      	ldrh	r3, [r7, #30]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	8bfa      	ldrh	r2, [r7, #30]
 80071d8:	60da      	str	r2, [r3, #12]
 80071da:	e062      	b.n	80072a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071e2:	e05e      	b.n	80072a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d828      	bhi.n	800723e <UART_SetConfig+0x56a>
 80071ec:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <UART_SetConfig+0x520>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007219 	.word	0x08007219
 80071f8:	08007221 	.word	0x08007221
 80071fc:	08007229 	.word	0x08007229
 8007200:	0800723f 	.word	0x0800723f
 8007204:	0800722f 	.word	0x0800722f
 8007208:	0800723f 	.word	0x0800723f
 800720c:	0800723f 	.word	0x0800723f
 8007210:	0800723f 	.word	0x0800723f
 8007214:	08007237 	.word	0x08007237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007218:	f7fc fd5a 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 800721c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800721e:	e014      	b.n	800724a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007220:	f7fc fd6c 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 8007224:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007226:	e010      	b.n	800724a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007228:	4b1a      	ldr	r3, [pc, #104]	@ (8007294 <UART_SetConfig+0x5c0>)
 800722a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800722c:	e00d      	b.n	800724a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800722e:	f7fc fce1 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8007232:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007234:	e009      	b.n	800724a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800723a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800723c:	e005      	b.n	800724a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007248:	bf00      	nop
    }

    if (pclk != 0U)
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	d028      	beq.n	80072a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007254:	4a10      	ldr	r2, [pc, #64]	@ (8007298 <UART_SetConfig+0x5c4>)
 8007256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800725a:	461a      	mov	r2, r3
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	085b      	lsrs	r3, r3, #1
 8007268:	441a      	add	r2, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007272:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	2b0f      	cmp	r3, #15
 8007278:	d910      	bls.n	800729c <UART_SetConfig+0x5c8>
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007280:	d20c      	bcs.n	800729c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	b29a      	uxth	r2, r3
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60da      	str	r2, [r3, #12]
 800728c:	e009      	b.n	80072a2 <UART_SetConfig+0x5ce>
 800728e:	bf00      	nop
 8007290:	40008000 	.word	0x40008000
 8007294:	00f42400 	.word	0x00f42400
 8007298:	08007f08 	.word	0x08007f08
      }
      else
      {
        ret = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2200      	movs	r2, #0
 80072b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2200      	movs	r2, #0
 80072bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3730      	adds	r7, #48	@ 0x30
 80072c6:	46bd      	mov	sp, r7
 80072c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080072cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01a      	beq.n	80073e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ca:	d10a      	bne.n	80073e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	605a      	str	r2, [r3, #4]
  }
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b098      	sub	sp, #96	@ 0x60
 8007414:	af02      	add	r7, sp, #8
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007420:	f7fb f8da 	bl	80025d8 <HAL_GetTick>
 8007424:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b08      	cmp	r3, #8
 8007432:	d12f      	bne.n	8007494 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800743c:	2200      	movs	r2, #0
 800743e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f88e 	bl	8007564 <UART_WaitOnFlagUntilTimeout>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d022      	beq.n	8007494 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800745c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800745e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007462:	653b      	str	r3, [r7, #80]	@ 0x50
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800746c:	647b      	str	r3, [r7, #68]	@ 0x44
 800746e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800747a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e6      	bne.n	800744e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e063      	b.n	800755c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0304 	and.w	r3, r3, #4
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d149      	bne.n	8007536 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074aa:	2200      	movs	r2, #0
 80074ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f857 	bl	8007564 <UART_WaitOnFlagUntilTimeout>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d03c      	beq.n	8007536 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	623b      	str	r3, [r7, #32]
   return(result);
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074da:	633b      	str	r3, [r7, #48]	@ 0x30
 80074dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e6      	bne.n	80074bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3308      	adds	r3, #8
 80074f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800750e:	61fa      	str	r2, [r7, #28]
 8007510:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	69b9      	ldr	r1, [r7, #24]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	617b      	str	r3, [r7, #20]
   return(result);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e5      	bne.n	80074ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e012      	b.n	800755c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3758      	adds	r7, #88	@ 0x58
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	4613      	mov	r3, r2
 8007572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007574:	e04f      	b.n	8007616 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757c:	d04b      	beq.n	8007616 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757e:	f7fb f82b 	bl	80025d8 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	429a      	cmp	r2, r3
 800758c:	d302      	bcc.n	8007594 <UART_WaitOnFlagUntilTimeout+0x30>
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e04e      	b.n	8007636 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0304 	and.w	r3, r3, #4
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d037      	beq.n	8007616 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b80      	cmp	r3, #128	@ 0x80
 80075aa:	d034      	beq.n	8007616 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b40      	cmp	r3, #64	@ 0x40
 80075b0:	d031      	beq.n	8007616 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f003 0308 	and.w	r3, r3, #8
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d110      	bne.n	80075e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2208      	movs	r2, #8
 80075c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f920 	bl	800780e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2208      	movs	r2, #8
 80075d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e029      	b.n	8007636 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075f0:	d111      	bne.n	8007616 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 f906 	bl	800780e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2220      	movs	r2, #32
 8007606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e00f      	b.n	8007636 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69da      	ldr	r2, [r3, #28]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4013      	ands	r3, r2
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	429a      	cmp	r2, r3
 8007624:	bf0c      	ite	eq
 8007626:	2301      	moveq	r3, #1
 8007628:	2300      	movne	r3, #0
 800762a:	b2db      	uxtb	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	429a      	cmp	r2, r3
 8007632:	d0a0      	beq.n	8007576 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b096      	sub	sp, #88	@ 0x58
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	4613      	mov	r3, r2
 800764c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	88fa      	ldrh	r2, [r7, #6]
 8007658:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2222      	movs	r2, #34	@ 0x22
 8007668:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007672:	2b00      	cmp	r3, #0
 8007674:	d02d      	beq.n	80076d2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800767c:	4a40      	ldr	r2, [pc, #256]	@ (8007780 <UART_Start_Receive_DMA+0x140>)
 800767e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007686:	4a3f      	ldr	r2, [pc, #252]	@ (8007784 <UART_Start_Receive_DMA+0x144>)
 8007688:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007690:	4a3d      	ldr	r2, [pc, #244]	@ (8007788 <UART_Start_Receive_DMA+0x148>)
 8007692:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800769a:	2200      	movs	r2, #0
 800769c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3324      	adds	r3, #36	@ 0x24
 80076aa:	4619      	mov	r1, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b0:	461a      	mov	r2, r3
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	f7fb f954 	bl	8002960 <HAL_DMA_Start_IT>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d009      	beq.n	80076d2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2210      	movs	r2, #16
 80076c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e051      	b.n	8007776 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d018      	beq.n	800770c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
 80076f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076fa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e6      	bne.n	80076da <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771e:	f043 0301 	orr.w	r3, r3, #1
 8007722:	653b      	str	r3, [r7, #80]	@ 0x50
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800772c:	637a      	str	r2, [r7, #52]	@ 0x34
 800772e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007732:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800773a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e5      	bne.n	800770c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3308      	adds	r3, #8
 8007746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	613b      	str	r3, [r7, #16]
   return(result);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3308      	adds	r3, #8
 800775e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007760:	623a      	str	r2, [r7, #32]
 8007762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	69f9      	ldr	r1, [r7, #28]
 8007766:	6a3a      	ldr	r2, [r7, #32]
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	61bb      	str	r3, [r7, #24]
   return(result);
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e5      	bne.n	8007740 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3758      	adds	r7, #88	@ 0x58
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	08007999 	.word	0x08007999
 8007784:	08007acd 	.word	0x08007acd
 8007788:	08007b13 	.word	0x08007b13

0800778c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800778c:	b480      	push	{r7}
 800778e:	b08f      	sub	sp, #60	@ 0x3c
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80077a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e6      	bne.n	8007794 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80077dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3308      	adds	r3, #8
 80077e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e6:	61ba      	str	r2, [r7, #24]
 80077e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	6979      	ldr	r1, [r7, #20]
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	613b      	str	r3, [r7, #16]
   return(result);
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e5      	bne.n	80077c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007802:	bf00      	nop
 8007804:	373c      	adds	r7, #60	@ 0x3c
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800780e:	b480      	push	{r7}
 8007810:	b095      	sub	sp, #84	@ 0x54
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007826:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800782a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007834:	643b      	str	r3, [r7, #64]	@ 0x40
 8007836:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800783a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e6      	bne.n	8007816 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3308      	adds	r3, #8
 800784e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	61fb      	str	r3, [r7, #28]
   return(result);
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800785e:	f023 0301 	bic.w	r3, r3, #1
 8007862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3308      	adds	r3, #8
 800786a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800786c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800786e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e3      	bne.n	8007848 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007884:	2b01      	cmp	r3, #1
 8007886:	d118      	bne.n	80078ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	60bb      	str	r3, [r7, #8]
   return(result);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f023 0310 	bic.w	r3, r3, #16
 800789c:	647b      	str	r3, [r7, #68]	@ 0x44
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6979      	ldr	r1, [r7, #20]
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	613b      	str	r3, [r7, #16]
   return(result);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e6      	bne.n	8007888 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078ce:	bf00      	nop
 80078d0:	3754      	adds	r7, #84	@ 0x54
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b090      	sub	sp, #64	@ 0x40
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d137      	bne.n	8007966 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80078f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3308      	adds	r3, #8
 8007904:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	623b      	str	r3, [r7, #32]
   return(result);
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007914:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3308      	adds	r3, #8
 800791c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800791e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800792c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e5      	bne.n	80078fe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007946:	637b      	str	r3, [r7, #52]	@ 0x34
 8007948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007950:	61fb      	str	r3, [r7, #28]
 8007952:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	69b9      	ldr	r1, [r7, #24]
 8007956:	69fa      	ldr	r2, [r7, #28]
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	617b      	str	r3, [r7, #20]
   return(result);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e6      	bne.n	8007932 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007964:	e004      	b.n	8007970 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8007966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007968:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800796c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800796e:	4798      	blx	r3
}
 8007970:	bf00      	nop
 8007972:	3740      	adds	r7, #64	@ 0x40
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007984:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007990:	bf00      	nop
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b09c      	sub	sp, #112	@ 0x70
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0320 	and.w	r3, r3, #32
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d171      	bne.n	8007a98 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80079b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e6      	bne.n	80079bc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3308      	adds	r3, #8
 80079f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a00:	f023 0301 	bic.w	r3, r3, #1
 8007a04:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e5      	bne.n	80079ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3308      	adds	r3, #8
 8007a28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	623b      	str	r3, [r7, #32]
   return(result);
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a38:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3308      	adds	r3, #8
 8007a40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a42:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e5      	bne.n	8007a22 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d118      	bne.n	8007a98 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0310 	bic.w	r3, r3, #16
 8007a7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a84:	61fb      	str	r3, [r7, #28]
 8007a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	617b      	str	r3, [r7, #20]
   return(result);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e6      	bne.n	8007a66 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007aa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d109      	bne.n	8007aba <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8007aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007aa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007aac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007aae:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ab6:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ab8:	e004      	b.n	8007ac4 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8007aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007abc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ac0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ac2:	4798      	blx	r3
}
 8007ac4:	bf00      	nop
 8007ac6:	3770      	adds	r7, #112	@ 0x70
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2201      	movs	r2, #1
 8007ade:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d10b      	bne.n	8007b00 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007af4:	0852      	lsrs	r2, r2, #1
 8007af6:	b292      	uxth	r2, r2
 8007af8:	4611      	mov	r1, r2
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007afe:	e004      	b.n	8007b0a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	4798      	blx	r3
}
 8007b0a:	bf00      	nop
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b086      	sub	sp, #24
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b26:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b3a:	2b80      	cmp	r3, #128	@ 0x80
 8007b3c:	d109      	bne.n	8007b52 <UART_DMAError+0x40>
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2b21      	cmp	r3, #33	@ 0x21
 8007b42:	d106      	bne.n	8007b52 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007b4c:	6978      	ldr	r0, [r7, #20]
 8007b4e:	f7ff fe1d 	bl	800778c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5c:	2b40      	cmp	r3, #64	@ 0x40
 8007b5e:	d109      	bne.n	8007b74 <UART_DMAError+0x62>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b22      	cmp	r3, #34	@ 0x22
 8007b64:	d106      	bne.n	8007b74 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007b6e:	6978      	ldr	r0, [r7, #20]
 8007b70:	f7ff fe4d 	bl	800780e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b7a:	f043 0210 	orr.w	r2, r3, #16
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b8a:	6978      	ldr	r0, [r7, #20]
 8007b8c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b8e:	bf00      	nop
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b088      	sub	sp, #32
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	61bb      	str	r3, [r7, #24]
 8007bee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6979      	ldr	r1, [r7, #20]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e6      	bne.n	8007bce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c18:	bf00      	nop
 8007c1a:	3720      	adds	r7, #32
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d101      	bne.n	8007c72 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e027      	b.n	8007cc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2224      	movs	r2, #36	@ 0x24
 8007c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0201 	bic.w	r2, r2, #1
 8007c98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ca0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e02d      	b.n	8007d42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2224      	movs	r2, #36	@ 0x24
 8007cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f850 	bl	8007dc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d101      	bne.n	8007d62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d5e:	2302      	movs	r3, #2
 8007d60:	e02d      	b.n	8007dbe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2224      	movs	r2, #36	@ 0x24
 8007d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0201 	bic.w	r2, r2, #1
 8007d88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f812 	bl	8007dc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
	...

08007dc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d108      	bne.n	8007dea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007de8:	e031      	b.n	8007e4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007dea:	2308      	movs	r3, #8
 8007dec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dee:	2308      	movs	r3, #8
 8007df0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	0e5b      	lsrs	r3, r3, #25
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	0f5b      	lsrs	r3, r3, #29
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 0307 	and.w	r3, r3, #7
 8007e10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	7b3a      	ldrb	r2, [r7, #12]
 8007e16:	4911      	ldr	r1, [pc, #68]	@ (8007e5c <UARTEx_SetNbDataToProcess+0x94>)
 8007e18:	5c8a      	ldrb	r2, [r1, r2]
 8007e1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e1e:	7b3a      	ldrb	r2, [r7, #12]
 8007e20:	490f      	ldr	r1, [pc, #60]	@ (8007e60 <UARTEx_SetNbDataToProcess+0x98>)
 8007e22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e24:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	7b7a      	ldrb	r2, [r7, #13]
 8007e34:	4909      	ldr	r1, [pc, #36]	@ (8007e5c <UARTEx_SetNbDataToProcess+0x94>)
 8007e36:	5c8a      	ldrb	r2, [r1, r2]
 8007e38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e3c:	7b7a      	ldrb	r2, [r7, #13]
 8007e3e:	4908      	ldr	r1, [pc, #32]	@ (8007e60 <UARTEx_SetNbDataToProcess+0x98>)
 8007e40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e42:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e4e:	bf00      	nop
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	08007f20 	.word	0x08007f20
 8007e60:	08007f28 	.word	0x08007f28

08007e64 <memset>:
 8007e64:	4402      	add	r2, r0
 8007e66:	4603      	mov	r3, r0
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d100      	bne.n	8007e6e <memset+0xa>
 8007e6c:	4770      	bx	lr
 8007e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e72:	e7f9      	b.n	8007e68 <memset+0x4>

08007e74 <__libc_init_array>:
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	4d0d      	ldr	r5, [pc, #52]	@ (8007eac <__libc_init_array+0x38>)
 8007e78:	4c0d      	ldr	r4, [pc, #52]	@ (8007eb0 <__libc_init_array+0x3c>)
 8007e7a:	1b64      	subs	r4, r4, r5
 8007e7c:	10a4      	asrs	r4, r4, #2
 8007e7e:	2600      	movs	r6, #0
 8007e80:	42a6      	cmp	r6, r4
 8007e82:	d109      	bne.n	8007e98 <__libc_init_array+0x24>
 8007e84:	4d0b      	ldr	r5, [pc, #44]	@ (8007eb4 <__libc_init_array+0x40>)
 8007e86:	4c0c      	ldr	r4, [pc, #48]	@ (8007eb8 <__libc_init_array+0x44>)
 8007e88:	f000 f826 	bl	8007ed8 <_init>
 8007e8c:	1b64      	subs	r4, r4, r5
 8007e8e:	10a4      	asrs	r4, r4, #2
 8007e90:	2600      	movs	r6, #0
 8007e92:	42a6      	cmp	r6, r4
 8007e94:	d105      	bne.n	8007ea2 <__libc_init_array+0x2e>
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e9c:	4798      	blx	r3
 8007e9e:	3601      	adds	r6, #1
 8007ea0:	e7ee      	b.n	8007e80 <__libc_init_array+0xc>
 8007ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea6:	4798      	blx	r3
 8007ea8:	3601      	adds	r6, #1
 8007eaa:	e7f2      	b.n	8007e92 <__libc_init_array+0x1e>
 8007eac:	08007f38 	.word	0x08007f38
 8007eb0:	08007f38 	.word	0x08007f38
 8007eb4:	08007f38 	.word	0x08007f38
 8007eb8:	08007f3c 	.word	0x08007f3c

08007ebc <memcpy>:
 8007ebc:	440a      	add	r2, r1
 8007ebe:	4291      	cmp	r1, r2
 8007ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ec4:	d100      	bne.n	8007ec8 <memcpy+0xc>
 8007ec6:	4770      	bx	lr
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ed2:	4291      	cmp	r1, r2
 8007ed4:	d1f9      	bne.n	8007eca <memcpy+0xe>
 8007ed6:	bd10      	pop	{r4, pc}

08007ed8 <_init>:
 8007ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eda:	bf00      	nop
 8007edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ede:	bc08      	pop	{r3}
 8007ee0:	469e      	mov	lr, r3
 8007ee2:	4770      	bx	lr

08007ee4 <_fini>:
 8007ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee6:	bf00      	nop
 8007ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eea:	bc08      	pop	{r3}
 8007eec:	469e      	mov	lr, r3
 8007eee:	4770      	bx	lr
